
PBL4_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006090  08006090  00016090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006190  08006190  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08006208  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08006208  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e817  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dab  00000000  00000000  0002e8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00030668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003385  00000000  00000000  00032060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcd4  00000000  00000000  000353e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b98e  00000000  00000000  000450b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004418  00000000  00000000  000e0a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006074 	.word	0x08006074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006074 	.word	0x08006074

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__io_putchar>:
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d102      	bne.n	8000f34 <__io_putchar+0x14>
    __io_putchar('\r');
 8000f2e:	200d      	movs	r0, #13
 8000f30:	f7ff fff6 	bl	8000f20 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f34:	1d39      	adds	r1, r7, #4
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <__io_putchar+0x2c>)
 8000f3e:	f003 fb5c 	bl	80045fa <HAL_UART_Transmit>

  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000164 	.word	0x20000164

08000f50 <calc_pwm>:

/*
 * Aby zlinearyzować działanie układu, możemy przeliczyć jasność na wypełnienie PWM poniższą funkcją
 */
float calc_pwm(float val)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a01 	vstr	s0, [r7, #4]
	if (val>100) val=100;
 8000f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ff8 <calc_pwm+0xa8>
 8000f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	dd01      	ble.n	8000f70 <calc_pwm+0x20>
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <calc_pwm+0xac>)
 8000f6e:	607b      	str	r3, [r7, #4]
	if (val<0) val=0;
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	d502      	bpl.n	8000f84 <calc_pwm+0x34>
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
    const float k = 0.13f;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <calc_pwm+0xb0>)
 8000f86:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <calc_pwm+0xb4>)
 8000f8a:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f90:	eeb1 7a67 	vneg.f32	s14, s15
 8000f94:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ec43 2b10 	vmov	d0, r2, r3
 8000fb4:	f004 fe58 	bl	8005c68 <exp>
 8000fb8:	ec51 0b10 	vmov	r0, r1, d0
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <calc_pwm+0xb8>)
 8000fc2:	f7ff f963 	bl	800028c <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	a109      	add	r1, pc, #36	; (adr r1, 8000ff0 <calc_pwm+0xa0>)
 8000fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fd0:	f7ff fc3c 	bl	800084c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdce 	bl	8000b7c <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	ee07 3a90 	vmov	s15, r3
}
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40c38800 	.word	0x40c38800
 8000ff8:	42c80000 	.word	0x42c80000
 8000ffc:	42c80000 	.word	0x42c80000
 8001000:	3e051eb8 	.word	0x3e051eb8
 8001004:	428c0000 	.word	0x428c0000
 8001008:	3ff00000 	.word	0x3ff00000

0800100c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) // TIM3 TO BEDZIE TAKI ZMIENIACZ DIÓD I BUZZERA
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a5d      	ldr	r2, [pc, #372]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80b0 	bne.w	800117e <HAL_TIM_PeriodElapsedCallback+0x172>
	{
		signalPower%=100; // EVERY 1 SEC
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001020:	f993 3000 	ldrsb.w	r3, [r3]
 8001024:	4a5b      	ldr	r2, [pc, #364]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1151      	asrs	r1, r2, #5
 800102c:	17da      	asrs	r2, r3, #31
 800102e:	1a8a      	subs	r2, r1, r2
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	fb01 f202 	mul.w	r2, r1, r2
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	b25a      	sxtb	r2, r3
 800103a:	4b55      	ldr	r3, [pc, #340]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800103c:	701a      	strb	r2, [r3, #0]
		signalPower+=2;
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001040:	f993 3000 	ldrsb.w	r3, [r3]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3302      	adds	r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b25a      	sxtb	r2, r3
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800104e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, calc_pwm((signalPower*5)));
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001052:	f993 3000 	ldrsb.w	r3, [r3]
 8001056:	461a      	mov	r2, r3
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f7ff ff71 	bl	8000f50 <calc_pwm>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 2a90 	vmov	r2, s15
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pwm((signalPower-20)*5));
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	f1a3 0214 	sub.w	r2, r3, #20
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	f7ff ff58 	bl	8000f50 <calc_pwm>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, calc_pwm((signalPower-40)*5));
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f7ff ff3f 	bl	8000f50 <calc_pwm>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010de:	ee17 2a90 	vmov	r2, s15
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm((signalPower-60)*5));
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010e6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ea:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	f7ff ff26 	bl	8000f50 <calc_pwm>
 8001104:	eef0 7a40 	vmov.f32	s15, s0
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, calc_pwm((signalPower-80)*5));
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001118:	f993 3000 	ldrsb.w	r3, [r3]
 800111c:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f7ff ff0d 	bl	8000f50 <calc_pwm>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 2a90 	vmov	r2, s15
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
	    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800114a:	f002 fe5c 	bl	8003e06 <HAL_TIM_GetActiveChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b04      	cmp	r3, #4
 8001152:	d116      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x176>
	      case HAL_TIM_ACTIVE_CHANNEL_3:
	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(todo));
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001156:	f993 3000 	ldrsb.w	r3, [r3]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f7ff fef3 	bl	8000f50 <calc_pwm>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001176:	ee17 2a90 	vmov	r2, s15
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
	        break;
 800117c:	e002      	b.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x178>
	      default:
	        break;
	    }
	}
 800117e:	bf00      	nop
 8001180:	e000      	b.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x178>
	        break;
 8001182:	bf00      	nop
		  default:
			break;
		}

	}*/
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000011c 	.word	0x2000011c
 8001190:	200001a8 	.word	0x200001a8
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	200000d4 	.word	0x200000d4
 800119c:	200001a9 	.word	0x200001a9

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f000 fdc3 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f895 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 facf 	bl	8001750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 faa3 	bl	80016fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011b6:	f000 f959 	bl	800146c <MX_TIM1_Init>
  MX_TIM3_Init();
 80011ba:	f000 fa1d 	bl	80015f8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80011be:	f000 f8f5 	bl	80013ac <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim1);
 80011c2:	483e      	ldr	r0, [pc, #248]	; (80012bc <main+0x11c>)
 80011c4:	f002 f9a0 	bl	8003508 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80011c8:	483d      	ldr	r0, [pc, #244]	; (80012c0 <main+0x120>)
 80011ca:	f002 f9f7 	bl	80035bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ce:	2100      	movs	r1, #0
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0x11c>)
 80011d2:	f002 faaf 	bl	8003734 <HAL_TIM_PWM_Start>
/*	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(1000);*/
	  //__WFI();
	  uint32_t value[2];

	   HAL_ADC_Start(&hadc1);
 80011d6:	483b      	ldr	r0, [pc, #236]	; (80012c4 <main+0x124>)
 80011d8:	f000 fe84 	bl	8001ee4 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	4838      	ldr	r0, [pc, #224]	; (80012c4 <main+0x124>)
 80011e2:	f000 ff33 	bl	800204c <HAL_ADC_PollForConversion>
	   value[0] = HAL_ADC_GetValue(&hadc1);
 80011e6:	4837      	ldr	r0, [pc, #220]	; (80012c4 <main+0x124>)
 80011e8:	f000 ffbb 	bl	8002162 <HAL_ADC_GetValue>
 80011ec:	4603      	mov	r3, r0
 80011ee:	603b      	str	r3, [r7, #0]

	   HAL_ADC_Start(&hadc1);
 80011f0:	4834      	ldr	r0, [pc, #208]	; (80012c4 <main+0x124>)
 80011f2:	f000 fe77 	bl	8001ee4 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <main+0x124>)
 80011fc:	f000 ff26 	bl	800204c <HAL_ADC_PollForConversion>
	   value[1] = HAL_ADC_GetValue(&hadc1);
 8001200:	4830      	ldr	r0, [pc, #192]	; (80012c4 <main+0x124>)
 8001202:	f000 ffae 	bl	8002162 <HAL_ADC_GetValue>
 8001206:	4603      	mov	r3, r0
 8001208:	607b      	str	r3, [r7, #4]


	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (int)(value[0]*100.0f/4096.0f));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80012c8 <main+0x128>
 8001218:	ee27 7a87 	vmul.f32	s14, s15, s14
 800121c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80012cc <main+0x12c>
 8001220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <main+0x11c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	ee17 2a90 	vmov	r2, s15
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SET_PRESCALER(&htim1,(int)((value[1]*1560/4096.0f)+120));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001244:	eddf 6a21 	vldr	s13, [pc, #132]	; 80012cc <main+0x12c>
 8001248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012d0 <main+0x130>
 8001250:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <main+0x11c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ee17 2a90 	vmov	r2, s15
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
	   printf("value1=%lu, value2=%lu\n", (int)((value[1]*1560/4096.0f)+120), (int)(value[0]*100.0f/4096.0f));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a15 	vldr	s13, [pc, #84]	; 80012cc <main+0x12c>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012d0 <main+0x130>
 8001280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001284:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001292:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012c8 <main+0x128>
 8001296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80012cc <main+0x12c>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 2a90 	vmov	r2, s15
 80012aa:	ee16 1a10 	vmov	r1, s12
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <main+0x134>)
 80012b0:	f003 fd4a 	bl	8004d48 <iprintf>
	   HAL_Delay(250);
 80012b4:	20fa      	movs	r0, #250	; 0xfa
 80012b6:	f000 fdad 	bl	8001e14 <HAL_Delay>
  {
 80012ba:	e78c      	b.n	80011d6 <main+0x36>
 80012bc:	200000d4 	.word	0x200000d4
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	2000008c 	.word	0x2000008c
 80012c8:	42c80000 	.word	0x42c80000
 80012cc:	45800000 	.word	0x45800000
 80012d0:	42f00000 	.word	0x42f00000
 80012d4:	08006090 	.word	0x08006090

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fd26 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <SystemClock_Config+0xcc>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <SystemClock_Config+0xd0>)
 8001322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001348:	2310      	movs	r3, #16
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800134c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001352:	2304      	movs	r3, #4
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001356:	2304      	movs	r3, #4
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fbea 	bl	8002b38 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800136a:	f000 fa5f 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fe4c 	bl	8003028 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001396:	f000 fa49 	bl	800182c <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3750      	adds	r7, #80	; 0x50
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <MX_ADC1_Init+0xb8>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <MX_ADC1_Init+0xbc>)
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_ADC1_Init+0xb4>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_ADC1_Init+0xb4>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_ADC1_Init+0xb4>)
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_ADC1_Init+0xb4>)
 800140e:	f000 fd25 	bl	8001e5c <HAL_ADC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001418:	f000 fa08 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800141c:	2301      	movs	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001424:	2304      	movs	r3, #4
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_ADC1_Init+0xb4>)
 800142e:	f000 fea5 	bl	800217c <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001438:	f000 f9f8 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_ADC1_Init+0xb4>)
 800144a:	f000 fe97 	bl	800217c <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001454:	f000 f9ea 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000008c 	.word	0x2000008c
 8001464:	40012000 	.word	0x40012000
 8001468:	0f000001 	.word	0x0f000001

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fc47 	bl	8004d38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014ac:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <MX_TIM1_Init+0x188>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014b2:	f240 3247 	movw	r2, #839	; 0x347
 80014b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014c0:	2263      	movs	r2, #99	; 0x63
 80014c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d6:	4846      	ldr	r0, [pc, #280]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014d8:	f001 ffc6 	bl	8003468 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014e2:	f000 f9a3 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f0:	4619      	mov	r1, r3
 80014f2:	483f      	ldr	r0, [pc, #252]	; (80015f0 <MX_TIM1_Init+0x184>)
 80014f4:	f002 fb98 	bl	8003c28 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 f995 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001502:	483b      	ldr	r0, [pc, #236]	; (80015f0 <MX_TIM1_Init+0x184>)
 8001504:	f002 f8bc 	bl	8003680 <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800150e:	f000 f98d 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800151e:	4619      	mov	r1, r3
 8001520:	4833      	ldr	r0, [pc, #204]	; (80015f0 <MX_TIM1_Init+0x184>)
 8001522:	f002 ff49 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800152c:	f000 f97e 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001530:	2360      	movs	r3, #96	; 0x60
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 20;
 8001534:	2314      	movs	r3, #20
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4826      	ldr	r0, [pc, #152]	; (80015f0 <MX_TIM1_Init+0x184>)
 8001556:	f002 faa5 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001560:	f000 f964 	bl	800182c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	2204      	movs	r2, #4
 800156e:	4619      	mov	r1, r3
 8001570:	481f      	ldr	r0, [pc, #124]	; (80015f0 <MX_TIM1_Init+0x184>)
 8001572:	f002 fa97 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800157c:	f000 f956 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	4819      	ldr	r0, [pc, #100]	; (80015f0 <MX_TIM1_Init+0x184>)
 800158a:	f002 fa8b 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001594:	f000 f94a 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	220c      	movs	r2, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM1_Init+0x184>)
 80015a2:	f002 fa7f 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015ac:	f000 f93e 	bl	800182c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM1_Init+0x184>)
 80015d4:	f002 ff5e 	bl	8004494 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 80015de:	f000 f925 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM1_Init+0x184>)
 80015e4:	f000 f9da 	bl	800199c <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3758      	adds	r7, #88	; 0x58
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200000d4 	.word	0x200000d4
 80015f4:	40010000 	.word	0x40010000

080015f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800162a:	4a33      	ldr	r2, [pc, #204]	; (80016f8 <MX_TIM3_Init+0x100>)
 800162c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_TIM3_Init+0xfc>)
 8001630:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_TIM3_Init+0xfc>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800163e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <MX_TIM3_Init+0xfc>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001650:	4828      	ldr	r0, [pc, #160]	; (80016f4 <MX_TIM3_Init+0xfc>)
 8001652:	f001 ff09 	bl	8003468 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800165c:	f000 f8e6 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	4619      	mov	r1, r3
 800166c:	4821      	ldr	r0, [pc, #132]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800166e:	f002 fadb 	bl	8003c28 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 f8d8 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800167c:	481d      	ldr	r0, [pc, #116]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800167e:	f001 ffff 	bl	8003680 <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001688:	f000 f8d0 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	4816      	ldr	r0, [pc, #88]	; (80016f4 <MX_TIM3_Init+0xfc>)
 800169c:	f002 fe8c 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 f8c1 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2208      	movs	r2, #8
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM3_Init+0xfc>)
 80016c2:	f002 f9ef 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 f8ae 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	220c      	movs	r2, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM3_Init+0xfc>)
 80016d8:	f002 f9e4 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80016e2:	f000 f8a3 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM3_Init+0xfc>)
 80016e8:	f000 f958 	bl	800199c <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000011c 	.word	0x2000011c
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART2_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001734:	f002 ff14 	bl	8004560 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800173e:	f000 f875 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000164 	.word	0x20000164
 800174c:	40004400 	.word	0x40004400

08001750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <MX_GPIO_Init+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <MX_GPIO_Init+0xd0>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_GPIO_Init+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <MX_GPIO_Init+0xd0>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_GPIO_Init+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2120      	movs	r1, #32
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <MX_GPIO_Init+0xd4>)
 80017dc:	f001 f992 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	; (8001828 <MX_GPIO_Init+0xd8>)
 80017f8:	f001 f800 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017fc:	2320      	movs	r3, #32
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_GPIO_Init+0xd4>)
 8001814:	f000 fff2 	bl	80027fc <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020800 	.word	0x40020800

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001876:	2007      	movs	r0, #7
 8001878:	f000 ff7e 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x7c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d127      	bne.n	80018fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018e2:	2303      	movs	r3, #3
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_ADC_MspInit+0x84>)
 80018f6:	f000 ff81 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_TIM_Base_MspInit+0x80>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d116      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2019      	movs	r0, #25
 8001944:	f000 ff23 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001948:	2019      	movs	r0, #25
 800194a:	f000 ff3c 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800194e:	e01a      	b.n	8001986 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_TIM_Base_MspInit+0x88>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d115      	bne.n	8001986 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0x84>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	201d      	movs	r0, #29
 800197c:	f000 ff07 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001980:	201d      	movs	r0, #29
 8001982:	f000 ff20 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40010000 	.word	0x40010000
 8001994:	40023800 	.word	0x40023800
 8001998:	40000400 	.word	0x40000400

0800199c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d11f      	bne.n	80019fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BUZZER_Pin|TIM1_CH2_LD3_Pin|TIM1_CH3_LD2_Pin|TIM1_CH4_LD1_Pin;
 80019da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <HAL_TIM_MspPostInit+0xbc>)
 80019f8:	f000 ff00 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019fc:	e023      	b.n	8001a46 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_MspPostInit+0xc0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d11e      	bne.n	8001a46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH3_LD5_Pin|TIM3_CH4_LD4_Pin;
 8001a24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a36:	2302      	movs	r3, #2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <HAL_TIM_MspPostInit+0xc4>)
 8001a42:	f000 fedb 	bl	80027fc <HAL_GPIO_Init>
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010000 	.word	0x40010000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40020800 	.word	0x40020800

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12b      	bne.n	8001ade <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0x8c>)
 8001ada:	f000 fe8f 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004400 	.word	0x40004400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f948 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b4e:	f001 fea1 	bl	8003894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000d4 	.word	0x200000d4

08001b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM3_IRQHandler+0x10>)
 8001b62:	f001 fe97 	bl	8003894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000011c 	.word	0x2000011c

08001b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
	}

return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f9ab 	bl	8000f20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
	}
	return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f003 f832 	bl	8004ce4 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20020000 	.word	0x20020000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200001ac 	.word	0x200001ac
 8001cb4:	200001c8 	.word	0x200001c8

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d06:	f7ff ffd7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f002 fff1 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff fa47 	bl	80011a0 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d20:	08006198 	.word	0x08006198
  ldr r2, =_sbss
 8001d24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d28:	200001c4 	.word	0x200001c4

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 fd0d 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fd68 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fd25 	bl	80027e2 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fced 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	200001b0 	.word	0x200001b0

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200001b0 	.word	0x200001b0

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008

08001e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e033      	b.n	8001eda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fd04 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa96 	bl	80023e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start+0x1a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e097      	b.n	800202e <HAL_ADC_Start+0x14a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d018      	beq.n	8001f46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f24:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_ADC_Start+0x158>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a45      	ldr	r2, [pc, #276]	; (8002040 <HAL_ADC_Start+0x15c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9a      	lsrs	r2, r3, #18
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d15f      	bne.n	8002014 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f023 0206 	bic.w	r2, r3, #6
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_ADC_Start+0x160>)
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d129      	bne.n	800202c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e020      	b.n	800202c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_ADC_Start+0x164>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d11b      	bne.n	800202c <HAL_ADC_Start+0x148>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d114      	bne.n	800202c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	e00b      	b.n	800202c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83
 8002044:	40012300 	.word	0x40012300
 8002048:	40012000 	.word	0x40012000

0800204c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002068:	d113      	bne.n	8002092 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002078:	d10b      	bne.n	8002092 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e063      	b.n	800215a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002092:	f7ff feb3 	bl	8001dfc <HAL_GetTick>
 8002096:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002098:	e021      	b.n	80020de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d01d      	beq.n	80020de <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x6c>
 80020a8:	f7ff fea8 	bl	8001dfc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d212      	bcs.n	80020de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d00b      	beq.n	80020de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0204 	orr.w	r2, r3, #4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e03d      	b.n	800215a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d1d6      	bne.n	800209a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0212 	mvn.w	r2, #18
 80020f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d123      	bne.n	8002158 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11f      	bne.n	8002158 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1c>
 8002194:	2302      	movs	r3, #2
 8002196:	e113      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x244>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d925      	bls.n	80021f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	3b1e      	subs	r3, #30
 80021be:	2207      	movs	r2, #7
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43da      	mvns	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	400a      	ands	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68d9      	ldr	r1, [r3, #12]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4403      	add	r3, r0
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	409a      	lsls	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	e022      	b.n	800223a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	2207      	movs	r2, #7
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	4603      	mov	r3, r0
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4403      	add	r3, r0
 8002230:	409a      	lsls	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d824      	bhi.n	800228c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b05      	subs	r3, #5
 8002254:	221f      	movs	r2, #31
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	4618      	mov	r0, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b05      	subs	r3, #5
 800227e:	fa00 f203 	lsl.w	r2, r0, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
 800228a:	e04c      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d824      	bhi.n	80022de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b23      	subs	r3, #35	; 0x23
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b23      	subs	r3, #35	; 0x23
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	e023      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b41      	subs	r3, #65	; 0x41
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b41      	subs	r3, #65	; 0x41
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_ADC_ConfigChannel+0x250>)
 8002328:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <HAL_ADC_ConfigChannel+0x254>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10f      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d8>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_ADC_ConfigChannel+0x254>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_ADC_ConfigChannel+0x258>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_ADC_ConfigChannel+0x1f4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b11      	cmp	r3, #17
 800236e:	d122      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_ADC_ConfigChannel+0x258>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d111      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_ADC_ConfigChannel+0x260>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9a      	lsrs	r2, r3, #18
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	40012000 	.word	0x40012000
 80023d4:	10000012 	.word	0x10000012
 80023d8:	20000000 	.word	0x20000000
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <ADC_Init+0x1f0>)
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <ADC_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e00f      	b.n	80024de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0202 	bic.w	r2, r2, #2
 80024ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e1b      	ldrb	r3, [r3, #24]
 80024f8:	005a      	lsls	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800252a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	035a      	lsls	r2, r3, #13
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e007      	b.n	8002554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	3b01      	subs	r3, #1
 8002570:	051a      	lsls	r2, r3, #20
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002596:	025a      	lsls	r2, r3, #9
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	029a      	lsls	r2, r3, #10
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40012300 	.word	0x40012300
 80025d4:	0f000001 	.word	0x0f000001

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e159      	b.n	8002acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8148 	bne.w	8002ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a2 	beq.w	8002ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a49      	ldr	r2, [pc, #292]	; (8002aec <HAL_GPIO_Init+0x2f0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x202>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_GPIO_Init+0x2f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x1fe>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <HAL_GPIO_Init+0x2f8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x1fa>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_GPIO_Init+0x300>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x1f2>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f aea2 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e267      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b85      	ldr	r3, [pc, #532]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b7e      	ldr	r3, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e242      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6c      	ldr	r2, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b69      	ldr	r3, [pc, #420]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a68      	ldr	r2, [pc, #416]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f904 	bl	8001dfc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f900 	bl	8001dfc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e207      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f8f0 	bl	8001dfc <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f8ec 	bl	8001dfc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1f3      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1c7      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4937      	ldr	r1, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e03a      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x244>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7ff f8a5 	bl	8001dfc <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7ff f8a1 	bl	8001dfc <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1a8      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4925      	ldr	r1, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x244>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff f884 	bl	8001dfc <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7ff f880 	bl	8001dfc <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e187      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCC_OscConfig+0x248>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7ff f864 	bl	8001dfc <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7ff f860 	bl	8001dfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e167      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
 8002d56:	e01b      	b.n	8002d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_OscConfig+0x248>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f84d 	bl	8001dfc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e00e      	b.n	8002d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff f849 	bl	8001dfc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d907      	bls.n	8002d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e150      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000
 8002d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ea      	bne.n	8002d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8097 	beq.w	8002ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b7d      	ldr	r3, [pc, #500]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a7c      	ldr	r2, [pc, #496]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b77      	ldr	r3, [pc, #476]	; (8002fac <HAL_RCC_OscConfig+0x474>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b74      	ldr	r3, [pc, #464]	; (8002fac <HAL_RCC_OscConfig+0x474>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x474>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f809 	bl	8001dfc <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7ff f805 	bl	8001dfc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e10c      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x474>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a63      	ldr	r2, [pc, #396]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e20:	e01c      	b.n	8002e5c <HAL_RCC_OscConfig+0x324>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x30c>
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a5e      	ldr	r2, [pc, #376]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a5b      	ldr	r2, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0x324>
 8002e44:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a57      	ldr	r2, [pc, #348]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a54      	ldr	r2, [pc, #336]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe ffca 	bl	8001dfc <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe ffc6 	bl	8001dfc <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0cb      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ee      	beq.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fe ffb4 	bl	8001dfc <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe ffb0 	bl	8001dfc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0b5      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4a38      	ldr	r2, [pc, #224]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a1 	beq.w	8003018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d05c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d141      	bne.n	8002f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe ff84 	bl	8001dfc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe ff80 	bl	8001dfc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e087      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	491b      	ldr	r1, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe ff59 	bl	8001dfc <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe ff55 	bl	8001dfc <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e05c      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x416>
 8002f6c:	e054      	b.n	8003018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe ff42 	bl	8001dfc <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe ff3e 	bl	8001dfc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e045      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
 8002f9a:	e03d      	b.n	8003018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e038      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d028      	beq.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d121      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d111      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d107      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cc      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b68      	ldr	r3, [pc, #416]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d90c      	bls.n	8003064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d044      	beq.n	8003148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e067      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4934      	ldr	r1, [pc, #208]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003118:	f7fe fe70 	bl	8001dfc <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	e00a      	b.n	8003136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7fe fe6c 	bl	8001dfc <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e04f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 020c 	and.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	429a      	cmp	r2, r3
 8003146:	d1eb      	bne.n	8003120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d20c      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fdd0 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	080060a8 	.word	0x080060a8
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b094      	sub	sp, #80	; 0x50
 80031fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003200:	2300      	movs	r3, #0
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003204:	2300      	movs	r3, #0
 8003206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320c:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d00d      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x40>
 8003218:	2b08      	cmp	r3, #8
 800321a:	f200 80e1 	bhi.w	80033e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d003      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x3a>
 8003226:	e0db      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003228:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800322c:	e0db      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322e:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003232:	e0d8      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324a:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	2200      	movs	r2, #0
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
 8003254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
 8003262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f04f 0000 	mov.w	r0, #0
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	0159      	lsls	r1, r3, #5
 8003274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003278:	0150      	lsls	r0, r2, #5
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4621      	mov	r1, r4
 8003280:	1a51      	subs	r1, r2, r1
 8003282:	6139      	str	r1, [r7, #16]
 8003284:	4629      	mov	r1, r5
 8003286:	eb63 0301 	sbc.w	r3, r3, r1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003298:	4659      	mov	r1, fp
 800329a:	018b      	lsls	r3, r1, #6
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a2:	4651      	mov	r1, sl
 80032a4:	018a      	lsls	r2, r1, #6
 80032a6:	4651      	mov	r1, sl
 80032a8:	ebb2 0801 	subs.w	r8, r2, r1
 80032ac:	4659      	mov	r1, fp
 80032ae:	eb63 0901 	sbc.w	r9, r3, r1
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	eb18 0303 	adds.w	r3, r8, r3
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	462b      	mov	r3, r5
 80032d4:	eb49 0303 	adc.w	r3, r9, r3
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032e6:	4629      	mov	r1, r5
 80032e8:	024b      	lsls	r3, r1, #9
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f0:	4621      	mov	r1, r4
 80032f2:	024a      	lsls	r2, r1, #9
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fa:	2200      	movs	r2, #0
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003304:	f7fd fc8a 	bl	8000c1c <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	e058      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	4618      	mov	r0, r3
 800331c:	4611      	mov	r1, r2
 800331e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	0159      	lsls	r1, r3, #5
 800333a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333e:	0150      	lsls	r0, r2, #5
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4641      	mov	r1, r8
 8003346:	ebb2 0a01 	subs.w	sl, r2, r1
 800334a:	4649      	mov	r1, r9
 800334c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800335c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003364:	ebb2 040a 	subs.w	r4, r2, sl
 8003368:	eb63 050b 	sbc.w	r5, r3, fp
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	00eb      	lsls	r3, r5, #3
 8003376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337a:	00e2      	lsls	r2, r4, #3
 800337c:	4614      	mov	r4, r2
 800337e:	461d      	mov	r5, r3
 8003380:	4643      	mov	r3, r8
 8003382:	18e3      	adds	r3, r4, r3
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	464b      	mov	r3, r9
 8003388:	eb45 0303 	adc.w	r3, r5, r3
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339a:	4629      	mov	r1, r5
 800339c:	028b      	lsls	r3, r1, #10
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a4:	4621      	mov	r1, r4
 80033a6:	028a      	lsls	r2, r1, #10
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	61fa      	str	r2, [r7, #28]
 80033b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b8:	f7fd fc30 	bl	8000c1c <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3750      	adds	r7, #80	; 0x50
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	00f42400 	.word	0x00f42400
 80033fc:	007a1200 	.word	0x007a1200

08003400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_RCC_GetHCLKFreq+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800341c:	f7ff fff0 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4903      	ldr	r1, [pc, #12]	; (800343c <HAL_RCC_GetPCLK1Freq+0x24>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	080060b8 	.word	0x080060b8

08003440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003444:	f7ff ffdc 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0b5b      	lsrs	r3, r3, #13
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	080060b8 	.word	0x080060b8

08003468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e041      	b.n	80034fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fa3e 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 fcba 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e03c      	b.n	800359a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_TIM_Base_Start+0xa0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_TIM_Base_Start+0x5c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d013      	beq.n	8003564 <HAL_TIM_Base_Start+0x5c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_TIM_Base_Start+0xa4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start+0x5c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_TIM_Base_Start+0xa8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start+0x5c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_TIM_Base_Start+0xac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start+0x5c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <HAL_TIM_Base_Start+0xb0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d010      	beq.n	8003598 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e007      	b.n	8003598 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40014000 	.word	0x40014000

080035bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d001      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e044      	b.n	800365e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_TIM_Base_Start_IT+0xb0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x6c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d013      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x6c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_TIM_Base_Start_IT+0xb4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x6c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_TIM_Base_Start_IT+0xb8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x6c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_TIM_Base_Start_IT+0xbc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x6c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_TIM_Base_Start_IT+0xc0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d111      	bne.n	800364c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d010      	beq.n	800365c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	e007      	b.n	800365c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40014000 	.word	0x40014000

08003680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e041      	b.n	8003716 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f839 	bl	800371e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fbae 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x24>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x3e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x58>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e068      	b.n	8003878 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x82>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	e013      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x92>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	e00b      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	e003      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fdc0 	bl	800436c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a23      	ldr	r2, [pc, #140]	; (8003880 <HAL_TIM_PWM_Start+0x14c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d107      	bne.n	8003806 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_TIM_PWM_Start+0x14c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <HAL_TIM_PWM_Start+0x10e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d013      	beq.n	8003842 <HAL_TIM_PWM_Start+0x10e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_TIM_PWM_Start+0x150>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIM_PWM_Start+0x10e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_TIM_PWM_Start+0x154>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIM_PWM_Start+0x10e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_TIM_PWM_Start+0x158>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_PWM_Start+0x10e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <HAL_TIM_PWM_Start+0x15c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d010      	beq.n	8003876 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003864:	e007      	b.n	8003876 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000

08003894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0202 	mvn.w	r2, #2
 80038c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa77 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa69 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa7a 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0204 	mvn.w	r2, #4
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa4d 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa3f 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fa50 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0208 	mvn.w	r2, #8
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa23 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa15 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa26 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0210 	mvn.w	r2, #16
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2208      	movs	r2, #8
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9f9 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9eb 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f9fc 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0201 	mvn.w	r2, #1
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fafa 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fd84 	bl	800454c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9c1 	bl	8003df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0220 	mvn.w	r2, #32
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fd4e 	bl	8004538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0ae      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	f200 809f 	bhi.w	8003c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003c11 	.word	0x08003c11
 8003ae0:	08003c11 	.word	0x08003c11
 8003ae4:	08003c11 	.word	0x08003c11
 8003ae8:	08003b4d 	.word	0x08003b4d
 8003aec:	08003c11 	.word	0x08003c11
 8003af0:	08003c11 	.word	0x08003c11
 8003af4:	08003c11 	.word	0x08003c11
 8003af8:	08003b8f 	.word	0x08003b8f
 8003afc:	08003c11 	.word	0x08003c11
 8003b00:	08003c11 	.word	0x08003c11
 8003b04:	08003c11 	.word	0x08003c11
 8003b08:	08003bcf 	.word	0x08003bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fa04 	bl	8003f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6999      	ldr	r1, [r3, #24]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	619a      	str	r2, [r3, #24]
      break;
 8003b4a:	e064      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fa4a 	bl	8003fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6999      	ldr	r1, [r3, #24]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	619a      	str	r2, [r3, #24]
      break;
 8003b8c:	e043      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fa95 	bl	80040c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0208 	orr.w	r2, r2, #8
 8003ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	61da      	str	r2, [r3, #28]
      break;
 8003bcc:	e023      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fadf 	bl	8004198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	021a      	lsls	r2, r3, #8
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	61da      	str	r2, [r3, #28]
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
      break;
 8003c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0b4      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x186>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7c:	d03e      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0xd4>
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c82:	f200 8087 	bhi.w	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8a:	f000 8086 	beq.w	8003d9a <HAL_TIM_ConfigClockSource+0x172>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d87f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d01a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xa6>
 8003c98:	2b70      	cmp	r3, #112	; 0x70
 8003c9a:	d87b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d050      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ca0:	2b60      	cmp	r3, #96	; 0x60
 8003ca2:	d877      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d03c      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ca8:	2b50      	cmp	r3, #80	; 0x50
 8003caa:	d873      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d058      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x13a>
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d86f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d064      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d86b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d060      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d867      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d05a      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	e062      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 fb25 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	609a      	str	r2, [r3, #8]
      break;
 8003cfa:	e04f      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f000 fb0e 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e03c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 fa82 	bl	8004238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2150      	movs	r1, #80	; 0x50
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fadb 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003d40:	e02c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 faa1 	bl	8004296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2160      	movs	r1, #96	; 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 facb 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003d60:	e01c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 fa62 	bl	8004238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fabb 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 fab2 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7f1b      	ldrb	r3, [r3, #28]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <TIM_Base_SetConfig+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a30      	ldr	r2, [pc, #192]	; (8003f0c <TIM_Base_SetConfig+0xec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d017      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <TIM_Base_SetConfig+0xe8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <TIM_Base_SetConfig+0xec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00f      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <TIM_Base_SetConfig+0xf4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <TIM_Base_SetConfig+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <TIM_Base_SetConfig+0xfc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0302 	bic.w	r3, r3, #2
 8003f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <TIM_OC1_SetConfig+0xc8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10c      	bne.n	8003f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0308 	bic.w	r3, r3, #8
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <TIM_OC1_SetConfig+0xc8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40010000 	.word	0x40010000

08003fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0320 	bic.w	r3, r3, #32
 8004036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <TIM_OC2_SetConfig+0xd4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10d      	bne.n	8004068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <TIM_OC2_SetConfig+0xd4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d113      	bne.n	8004098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800407e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000

080040c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <TIM_OC3_SetConfig+0xd0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10d      	bne.n	800413e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <TIM_OC3_SetConfig+0xd0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40010000 	.word	0x40010000

08004198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	031b      	lsls	r3, r3, #12
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a10      	ldr	r2, [pc, #64]	; (8004234 <TIM_OC4_SetConfig+0x9c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d109      	bne.n	800420c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000

08004238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0201 	bic.w	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 030a 	bic.w	r3, r3, #10
 8004274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004296:	b480      	push	{r7}
 8004298:	b087      	sub	sp, #28
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0210 	bic.w	r2, r3, #16
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 0307 	orr.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	431a      	orrs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e050      	b.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d013      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a15      	ldr	r2, [pc, #84]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10c      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4313      	orrs	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e03d      	b.n	800452c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e03f      	b.n	80045f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fd fa6c 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f929 	bl	80047fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08a      	sub	sp, #40	; 0x28
 80045fe:	af02      	add	r7, sp, #8
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	d17c      	bne.n	8004714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_UART_Transmit+0x2c>
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e075      	b.n	8004716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_UART_Transmit+0x3e>
 8004634:	2302      	movs	r3, #2
 8004636:	e06e      	b.n	8004716 <HAL_UART_Transmit+0x11c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464e:	f7fd fbd5 	bl	8001dfc <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004668:	d108      	bne.n	800467c <HAL_UART_Transmit+0x82>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e003      	b.n	8004684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800468c:	e02a      	b.n	80046e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2200      	movs	r2, #0
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f840 	bl	800471e <UART_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e036      	b.n	8004716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3302      	adds	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e007      	b.n	80046d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1cf      	bne.n	800468e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2140      	movs	r1, #64	; 0x40
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f810 	bl	800471e <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e006      	b.n	8004716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b090      	sub	sp, #64	; 0x40
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472e:	e050      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d04c      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0x30>
 800473e:	f7fd fb5d 	bl	8001dfc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474a:	429a      	cmp	r2, r3
 800474c:	d241      	bcs.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800476e:	637a      	str	r2, [r7, #52]	; 0x34
 8004770:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3314      	adds	r3, #20
 8004788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a2:	623a      	str	r2, [r7, #32]
 80047a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d09f      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3740      	adds	r7, #64	; 0x40
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b0c0      	sub	sp, #256	; 0x100
 8004802:	af00      	add	r7, sp, #0
 8004804:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	68d9      	ldr	r1, [r3, #12]
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	ea40 0301 	orr.w	r3, r0, r1
 8004824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004854:	f021 010c 	bic.w	r1, r1, #12
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004862:	430b      	orrs	r3, r1
 8004864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	6999      	ldr	r1, [r3, #24]
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	ea40 0301 	orr.w	r3, r0, r1
 8004882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b8f      	ldr	r3, [pc, #572]	; (8004ac8 <UART_SetConfig+0x2cc>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0xa0>
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b8d      	ldr	r3, [pc, #564]	; (8004acc <UART_SetConfig+0x2d0>)
 8004898:	429a      	cmp	r2, r3
 800489a:	d104      	bne.n	80048a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe fdd0 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 80048a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048a4:	e003      	b.n	80048ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a6:	f7fe fdb7 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 80048aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	f040 810c 	bne.w	8004ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048d6:	415b      	adcs	r3, r3
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048de:	4621      	mov	r1, r4
 80048e0:	eb12 0801 	adds.w	r8, r2, r1
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb43 0901 	adc.w	r9, r3, r1
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fe:	4690      	mov	r8, r2
 8004900:	4699      	mov	r9, r3
 8004902:	4623      	mov	r3, r4
 8004904:	eb18 0303 	adds.w	r3, r8, r3
 8004908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800490c:	462b      	mov	r3, r5
 800490e:	eb49 0303 	adc.w	r3, r9, r3
 8004912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004922:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800492a:	460b      	mov	r3, r1
 800492c:	18db      	adds	r3, r3, r3
 800492e:	653b      	str	r3, [r7, #80]	; 0x50
 8004930:	4613      	mov	r3, r2
 8004932:	eb42 0303 	adc.w	r3, r2, r3
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
 8004938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800493c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004940:	f7fc f96c 	bl	8000c1c <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	011c      	lsls	r4, r3, #4
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800495c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	64b9      	str	r1, [r7, #72]	; 0x48
 800496c:	415b      	adcs	r3, r3
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004974:	4641      	mov	r1, r8
 8004976:	eb12 0a01 	adds.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb43 0b01 	adc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800498c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004994:	4692      	mov	sl, r2
 8004996:	469b      	mov	fp, r3
 8004998:	4643      	mov	r3, r8
 800499a:	eb1a 0303 	adds.w	r3, sl, r3
 800499e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a2:	464b      	mov	r3, r9
 80049a4:	eb4b 0303 	adc.w	r3, fp, r3
 80049a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c0:	460b      	mov	r3, r1
 80049c2:	18db      	adds	r3, r3, r3
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
 80049c6:	4613      	mov	r3, r2
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
 80049ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049d6:	f7fc f921 	bl	8000c1c <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2301 	umull	r2, r3, r3, r1
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2264      	movs	r2, #100	; 0x64
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	1acb      	subs	r3, r1, r3
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <UART_SetConfig+0x2d4>)
 80049f8:	fba3 2302 	umull	r2, r3, r3, r2
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a20:	415b      	adcs	r3, r3
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a92:	f7fc f8c3 	bl	8000c1c <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <UART_SetConfig+0x2d4>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	2164      	movs	r1, #100	; 0x64
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3332      	adds	r3, #50	; 0x32
 8004aae:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <UART_SetConfig+0x2d4>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0207 	and.w	r2, r3, #7
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4422      	add	r2, r4
 8004ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac4:	e105      	b.n	8004cd2 <UART_SetConfig+0x4d6>
 8004ac6:	bf00      	nop
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40011400 	.word	0x40011400
 8004ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ade:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	6239      	str	r1, [r7, #32]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
 8004af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af6:	4641      	mov	r1, r8
 8004af8:	1854      	adds	r4, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0501 	adc.w	r5, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	00eb      	lsls	r3, r5, #3
 8004b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0e:	00e2      	lsls	r2, r4, #3
 8004b10:	4614      	mov	r4, r2
 8004b12:	461d      	mov	r5, r3
 8004b14:	4643      	mov	r3, r8
 8004b16:	18e3      	adds	r3, r4, r3
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	eb45 0303 	adc.w	r3, r5, r3
 8004b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b42:	4629      	mov	r1, r5
 8004b44:	008b      	lsls	r3, r1, #2
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	008a      	lsls	r2, r1, #2
 8004b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b54:	f7fc f862 	bl	8000c1c <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4b60      	ldr	r3, [pc, #384]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	011c      	lsls	r4, r3, #4
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	61b9      	str	r1, [r7, #24]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6139      	str	r1, [r7, #16]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be0:	4649      	mov	r1, r9
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	4641      	mov	r1, r8
 8004be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bea:	4641      	mov	r1, r8
 8004bec:	008a      	lsls	r2, r1, #2
 8004bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bf2:	f7fc f813 	bl	8000c1c <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1a:	441c      	add	r4, r3
 8004c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c20:	2200      	movs	r2, #0
 8004c22:	673b      	str	r3, [r7, #112]	; 0x70
 8004c24:	677a      	str	r2, [r7, #116]	; 0x74
 8004c26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	415b      	adcs	r3, r3
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1851      	adds	r1, r2, r1
 8004c3e:	6039      	str	r1, [r7, #0]
 8004c40:	4649      	mov	r1, r9
 8004c42:	414b      	adcs	r3, r1
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c52:	4659      	mov	r1, fp
 8004c54:	00cb      	lsls	r3, r1, #3
 8004c56:	4651      	mov	r1, sl
 8004c58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	00ca      	lsls	r2, r1, #3
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	4603      	mov	r3, r0
 8004c66:	4642      	mov	r2, r8
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c80:	667a      	str	r2, [r7, #100]	; 0x64
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c8e:	4649      	mov	r1, r9
 8004c90:	008b      	lsls	r3, r1, #2
 8004c92:	4641      	mov	r1, r8
 8004c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c98:	4641      	mov	r1, r8
 8004c9a:	008a      	lsls	r2, r1, #2
 8004c9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca0:	f7fb ffbc 	bl	8000c1c <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004caa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	3332      	adds	r3, #50	; 0x32
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4422      	add	r2, r4
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	51eb851f 	.word	0x51eb851f

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	2000000c 	.word	0x2000000c

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	; (8004d28 <__libc_init_array+0x38>)
 8004cf4:	4c0d      	ldr	r4, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	4d0b      	ldr	r5, [pc, #44]	; (8004d30 <__libc_init_array+0x40>)
 8004d02:	4c0c      	ldr	r4, [pc, #48]	; (8004d34 <__libc_init_array+0x44>)
 8004d04:	f001 f9b6 	bl	8006074 <_init>
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08006190 	.word	0x08006190
 8004d2c:	08006190 	.word	0x08006190
 8004d30:	08006190 	.word	0x08006190
 8004d34:	08006194 	.word	0x08006194

08004d38 <memset>:
 8004d38:	4402      	add	r2, r0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <iprintf>:
 8004d48:	b40f      	push	{r0, r1, r2, r3}
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <iprintf+0x2c>)
 8004d4c:	b513      	push	{r0, r1, r4, lr}
 8004d4e:	681c      	ldr	r4, [r3, #0]
 8004d50:	b124      	cbz	r4, 8004d5c <iprintf+0x14>
 8004d52:	69a3      	ldr	r3, [r4, #24]
 8004d54:	b913      	cbnz	r3, 8004d5c <iprintf+0x14>
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 f866 	bl	8004e28 <__sinit>
 8004d5c:	ab05      	add	r3, sp, #20
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	68a1      	ldr	r1, [r4, #8]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 f9bd 	bl	80050e4 <_vfiprintf_r>
 8004d6a:	b002      	add	sp, #8
 8004d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d70:	b004      	add	sp, #16
 8004d72:	4770      	bx	lr
 8004d74:	2000000c 	.word	0x2000000c

08004d78 <std>:
 8004d78:	2300      	movs	r3, #0
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d86:	6083      	str	r3, [r0, #8]
 8004d88:	8181      	strh	r1, [r0, #12]
 8004d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d8c:	81c2      	strh	r2, [r0, #14]
 8004d8e:	6183      	str	r3, [r0, #24]
 8004d90:	4619      	mov	r1, r3
 8004d92:	2208      	movs	r2, #8
 8004d94:	305c      	adds	r0, #92	; 0x5c
 8004d96:	f7ff ffcf 	bl	8004d38 <memset>
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <std+0x38>)
 8004d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <std+0x3c>)
 8004da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <std+0x40>)
 8004da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <std+0x44>)
 8004da8:	6224      	str	r4, [r4, #32]
 8004daa:	6323      	str	r3, [r4, #48]	; 0x30
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	bf00      	nop
 8004db0:	0800568d 	.word	0x0800568d
 8004db4:	080056af 	.word	0x080056af
 8004db8:	080056e7 	.word	0x080056e7
 8004dbc:	0800570b 	.word	0x0800570b

08004dc0 <_cleanup_r>:
 8004dc0:	4901      	ldr	r1, [pc, #4]	; (8004dc8 <_cleanup_r+0x8>)
 8004dc2:	f000 b8af 	b.w	8004f24 <_fwalk_reent>
 8004dc6:	bf00      	nop
 8004dc8:	080059e5 	.word	0x080059e5

08004dcc <__sfmoreglue>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	2268      	movs	r2, #104	; 0x68
 8004dd0:	1e4d      	subs	r5, r1, #1
 8004dd2:	4355      	muls	r5, r2
 8004dd4:	460e      	mov	r6, r1
 8004dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dda:	f000 f8e5 	bl	8004fa8 <_malloc_r>
 8004dde:	4604      	mov	r4, r0
 8004de0:	b140      	cbz	r0, 8004df4 <__sfmoreglue+0x28>
 8004de2:	2100      	movs	r1, #0
 8004de4:	e9c0 1600 	strd	r1, r6, [r0]
 8004de8:	300c      	adds	r0, #12
 8004dea:	60a0      	str	r0, [r4, #8]
 8004dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004df0:	f7ff ffa2 	bl	8004d38 <memset>
 8004df4:	4620      	mov	r0, r4
 8004df6:	bd70      	pop	{r4, r5, r6, pc}

08004df8 <__sfp_lock_acquire>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__sfp_lock_acquire+0x8>)
 8004dfa:	f000 b8b3 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	200001b5 	.word	0x200001b5

08004e04 <__sfp_lock_release>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__sfp_lock_release+0x8>)
 8004e06:	f000 b8ae 	b.w	8004f66 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	200001b5 	.word	0x200001b5

08004e10 <__sinit_lock_acquire>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__sinit_lock_acquire+0x8>)
 8004e12:	f000 b8a7 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	200001b6 	.word	0x200001b6

08004e1c <__sinit_lock_release>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__sinit_lock_release+0x8>)
 8004e1e:	f000 b8a2 	b.w	8004f66 <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	200001b6 	.word	0x200001b6

08004e28 <__sinit>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	f7ff fff0 	bl	8004e10 <__sinit_lock_acquire>
 8004e30:	69a3      	ldr	r3, [r4, #24]
 8004e32:	b11b      	cbz	r3, 8004e3c <__sinit+0x14>
 8004e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e38:	f7ff bff0 	b.w	8004e1c <__sinit_lock_release>
 8004e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e40:	6523      	str	r3, [r4, #80]	; 0x50
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <__sinit+0x68>)
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <__sinit+0x6c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	bf04      	itt	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	61a3      	streq	r3, [r4, #24]
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f820 	bl	8004e98 <__sfp>
 8004e58:	6060      	str	r0, [r4, #4]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 f81c 	bl	8004e98 <__sfp>
 8004e60:	60a0      	str	r0, [r4, #8]
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f818 	bl	8004e98 <__sfp>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	60e0      	str	r0, [r4, #12]
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	6860      	ldr	r0, [r4, #4]
 8004e70:	f7ff ff82 	bl	8004d78 <std>
 8004e74:	68a0      	ldr	r0, [r4, #8]
 8004e76:	2201      	movs	r2, #1
 8004e78:	2109      	movs	r1, #9
 8004e7a:	f7ff ff7d 	bl	8004d78 <std>
 8004e7e:	68e0      	ldr	r0, [r4, #12]
 8004e80:	2202      	movs	r2, #2
 8004e82:	2112      	movs	r1, #18
 8004e84:	f7ff ff78 	bl	8004d78 <std>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	61a3      	str	r3, [r4, #24]
 8004e8c:	e7d2      	b.n	8004e34 <__sinit+0xc>
 8004e8e:	bf00      	nop
 8004e90:	080060c0 	.word	0x080060c0
 8004e94:	08004dc1 	.word	0x08004dc1

08004e98 <__sfp>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	4607      	mov	r7, r0
 8004e9c:	f7ff ffac 	bl	8004df8 <__sfp_lock_acquire>
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <__sfp+0x84>)
 8004ea2:	681e      	ldr	r6, [r3, #0]
 8004ea4:	69b3      	ldr	r3, [r6, #24]
 8004ea6:	b913      	cbnz	r3, 8004eae <__sfp+0x16>
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7ff ffbd 	bl	8004e28 <__sinit>
 8004eae:	3648      	adds	r6, #72	; 0x48
 8004eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	d503      	bpl.n	8004ec0 <__sfp+0x28>
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	b30b      	cbz	r3, 8004f00 <__sfp+0x68>
 8004ebc:	6836      	ldr	r6, [r6, #0]
 8004ebe:	e7f7      	b.n	8004eb0 <__sfp+0x18>
 8004ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ec4:	b9d5      	cbnz	r5, 8004efc <__sfp+0x64>
 8004ec6:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <__sfp+0x88>)
 8004ec8:	60e3      	str	r3, [r4, #12]
 8004eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ece:	6665      	str	r5, [r4, #100]	; 0x64
 8004ed0:	f000 f847 	bl	8004f62 <__retarget_lock_init_recursive>
 8004ed4:	f7ff ff96 	bl	8004e04 <__sfp_lock_release>
 8004ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ee0:	6025      	str	r5, [r4, #0]
 8004ee2:	61a5      	str	r5, [r4, #24]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eec:	f7ff ff24 	bl	8004d38 <memset>
 8004ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ef8:	4620      	mov	r0, r4
 8004efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efc:	3468      	adds	r4, #104	; 0x68
 8004efe:	e7d9      	b.n	8004eb4 <__sfp+0x1c>
 8004f00:	2104      	movs	r1, #4
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7ff ff62 	bl	8004dcc <__sfmoreglue>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	6030      	str	r0, [r6, #0]
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1d5      	bne.n	8004ebc <__sfp+0x24>
 8004f10:	f7ff ff78 	bl	8004e04 <__sfp_lock_release>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	e7ee      	b.n	8004ef8 <__sfp+0x60>
 8004f1a:	bf00      	nop
 8004f1c:	080060c0 	.word	0x080060c0
 8004f20:	ffff0001 	.word	0xffff0001

08004f24 <_fwalk_reent>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4606      	mov	r6, r0
 8004f2a:	4688      	mov	r8, r1
 8004f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f30:	2700      	movs	r7, #0
 8004f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f36:	f1b9 0901 	subs.w	r9, r9, #1
 8004f3a:	d505      	bpl.n	8004f48 <_fwalk_reent+0x24>
 8004f3c:	6824      	ldr	r4, [r4, #0]
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	d1f7      	bne.n	8004f32 <_fwalk_reent+0xe>
 8004f42:	4638      	mov	r0, r7
 8004f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d907      	bls.n	8004f5e <_fwalk_reent+0x3a>
 8004f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f52:	3301      	adds	r3, #1
 8004f54:	d003      	beq.n	8004f5e <_fwalk_reent+0x3a>
 8004f56:	4629      	mov	r1, r5
 8004f58:	4630      	mov	r0, r6
 8004f5a:	47c0      	blx	r8
 8004f5c:	4307      	orrs	r7, r0
 8004f5e:	3568      	adds	r5, #104	; 0x68
 8004f60:	e7e9      	b.n	8004f36 <_fwalk_reent+0x12>

08004f62 <__retarget_lock_init_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <__retarget_lock_acquire_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_release_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <sbrk_aligned>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0e      	ldr	r6, [pc, #56]	; (8004fa4 <sbrk_aligned+0x3c>)
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	6831      	ldr	r1, [r6, #0]
 8004f70:	4605      	mov	r5, r0
 8004f72:	b911      	cbnz	r1, 8004f7a <sbrk_aligned+0x12>
 8004f74:	f000 fb7a 	bl	800566c <_sbrk_r>
 8004f78:	6030      	str	r0, [r6, #0]
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fb75 	bl	800566c <_sbrk_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d00a      	beq.n	8004f9c <sbrk_aligned+0x34>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d007      	beq.n	8004fa0 <sbrk_aligned+0x38>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 fb6a 	bl	800566c <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d101      	bne.n	8004fa0 <sbrk_aligned+0x38>
 8004f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	200001bc 	.word	0x200001bc

08004fa8 <_malloc_r>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	1ccd      	adds	r5, r1, #3
 8004fae:	f025 0503 	bic.w	r5, r5, #3
 8004fb2:	3508      	adds	r5, #8
 8004fb4:	2d0c      	cmp	r5, #12
 8004fb6:	bf38      	it	cc
 8004fb8:	250c      	movcc	r5, #12
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	db01      	blt.n	8004fc4 <_malloc_r+0x1c>
 8004fc0:	42a9      	cmp	r1, r5
 8004fc2:	d905      	bls.n	8004fd0 <_malloc_r+0x28>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	2600      	movs	r6, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	4e2e      	ldr	r6, [pc, #184]	; (800508c <_malloc_r+0xe4>)
 8004fd2:	f000 fdbb 	bl	8005b4c <__malloc_lock>
 8004fd6:	6833      	ldr	r3, [r6, #0]
 8004fd8:	461c      	mov	r4, r3
 8004fda:	bb34      	cbnz	r4, 800502a <_malloc_r+0x82>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff ffc2 	bl	8004f68 <sbrk_aligned>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	d14d      	bne.n	8005086 <_malloc_r+0xde>
 8004fea:	6834      	ldr	r4, [r6, #0]
 8004fec:	4626      	mov	r6, r4
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d140      	bne.n	8005074 <_malloc_r+0xcc>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	eb04 0803 	add.w	r8, r4, r3
 8004ffc:	f000 fb36 	bl	800566c <_sbrk_r>
 8005000:	4580      	cmp	r8, r0
 8005002:	d13a      	bne.n	800507a <_malloc_r+0xd2>
 8005004:	6821      	ldr	r1, [r4, #0]
 8005006:	3503      	adds	r5, #3
 8005008:	1a6d      	subs	r5, r5, r1
 800500a:	f025 0503 	bic.w	r5, r5, #3
 800500e:	3508      	adds	r5, #8
 8005010:	2d0c      	cmp	r5, #12
 8005012:	bf38      	it	cc
 8005014:	250c      	movcc	r5, #12
 8005016:	4629      	mov	r1, r5
 8005018:	4638      	mov	r0, r7
 800501a:	f7ff ffa5 	bl	8004f68 <sbrk_aligned>
 800501e:	3001      	adds	r0, #1
 8005020:	d02b      	beq.n	800507a <_malloc_r+0xd2>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	442b      	add	r3, r5
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	e00e      	b.n	8005048 <_malloc_r+0xa0>
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	1b52      	subs	r2, r2, r5
 800502e:	d41e      	bmi.n	800506e <_malloc_r+0xc6>
 8005030:	2a0b      	cmp	r2, #11
 8005032:	d916      	bls.n	8005062 <_malloc_r+0xba>
 8005034:	1961      	adds	r1, r4, r5
 8005036:	42a3      	cmp	r3, r4
 8005038:	6025      	str	r5, [r4, #0]
 800503a:	bf18      	it	ne
 800503c:	6059      	strne	r1, [r3, #4]
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	bf08      	it	eq
 8005042:	6031      	streq	r1, [r6, #0]
 8005044:	5162      	str	r2, [r4, r5]
 8005046:	604b      	str	r3, [r1, #4]
 8005048:	4638      	mov	r0, r7
 800504a:	f104 060b 	add.w	r6, r4, #11
 800504e:	f000 fd83 	bl	8005b58 <__malloc_unlock>
 8005052:	f026 0607 	bic.w	r6, r6, #7
 8005056:	1d23      	adds	r3, r4, #4
 8005058:	1af2      	subs	r2, r6, r3
 800505a:	d0b6      	beq.n	8004fca <_malloc_r+0x22>
 800505c:	1b9b      	subs	r3, r3, r6
 800505e:	50a3      	str	r3, [r4, r2]
 8005060:	e7b3      	b.n	8004fca <_malloc_r+0x22>
 8005062:	6862      	ldr	r2, [r4, #4]
 8005064:	42a3      	cmp	r3, r4
 8005066:	bf0c      	ite	eq
 8005068:	6032      	streq	r2, [r6, #0]
 800506a:	605a      	strne	r2, [r3, #4]
 800506c:	e7ec      	b.n	8005048 <_malloc_r+0xa0>
 800506e:	4623      	mov	r3, r4
 8005070:	6864      	ldr	r4, [r4, #4]
 8005072:	e7b2      	b.n	8004fda <_malloc_r+0x32>
 8005074:	4634      	mov	r4, r6
 8005076:	6876      	ldr	r6, [r6, #4]
 8005078:	e7b9      	b.n	8004fee <_malloc_r+0x46>
 800507a:	230c      	movs	r3, #12
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4638      	mov	r0, r7
 8005080:	f000 fd6a 	bl	8005b58 <__malloc_unlock>
 8005084:	e7a1      	b.n	8004fca <_malloc_r+0x22>
 8005086:	6025      	str	r5, [r4, #0]
 8005088:	e7de      	b.n	8005048 <_malloc_r+0xa0>
 800508a:	bf00      	nop
 800508c:	200001b8 	.word	0x200001b8

08005090 <__sfputc_r>:
 8005090:	6893      	ldr	r3, [r2, #8]
 8005092:	3b01      	subs	r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	b410      	push	{r4}
 8005098:	6093      	str	r3, [r2, #8]
 800509a:	da08      	bge.n	80050ae <__sfputc_r+0x1e>
 800509c:	6994      	ldr	r4, [r2, #24]
 800509e:	42a3      	cmp	r3, r4
 80050a0:	db01      	blt.n	80050a6 <__sfputc_r+0x16>
 80050a2:	290a      	cmp	r1, #10
 80050a4:	d103      	bne.n	80050ae <__sfputc_r+0x1e>
 80050a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050aa:	f000 bb33 	b.w	8005714 <__swbuf_r>
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	1c58      	adds	r0, r3, #1
 80050b2:	6010      	str	r0, [r2, #0]
 80050b4:	7019      	strb	r1, [r3, #0]
 80050b6:	4608      	mov	r0, r1
 80050b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050bc:	4770      	bx	lr

080050be <__sfputs_r>:
 80050be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c0:	4606      	mov	r6, r0
 80050c2:	460f      	mov	r7, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	18d5      	adds	r5, r2, r3
 80050c8:	42ac      	cmp	r4, r5
 80050ca:	d101      	bne.n	80050d0 <__sfputs_r+0x12>
 80050cc:	2000      	movs	r0, #0
 80050ce:	e007      	b.n	80050e0 <__sfputs_r+0x22>
 80050d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d4:	463a      	mov	r2, r7
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff ffda 	bl	8005090 <__sfputc_r>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d1f3      	bne.n	80050c8 <__sfputs_r+0xa>
 80050e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050e4 <_vfiprintf_r>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	460d      	mov	r5, r1
 80050ea:	b09d      	sub	sp, #116	; 0x74
 80050ec:	4614      	mov	r4, r2
 80050ee:	4698      	mov	r8, r3
 80050f0:	4606      	mov	r6, r0
 80050f2:	b118      	cbz	r0, 80050fc <_vfiprintf_r+0x18>
 80050f4:	6983      	ldr	r3, [r0, #24]
 80050f6:	b90b      	cbnz	r3, 80050fc <_vfiprintf_r+0x18>
 80050f8:	f7ff fe96 	bl	8004e28 <__sinit>
 80050fc:	4b89      	ldr	r3, [pc, #548]	; (8005324 <_vfiprintf_r+0x240>)
 80050fe:	429d      	cmp	r5, r3
 8005100:	d11b      	bne.n	800513a <_vfiprintf_r+0x56>
 8005102:	6875      	ldr	r5, [r6, #4]
 8005104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005106:	07d9      	lsls	r1, r3, #31
 8005108:	d405      	bmi.n	8005116 <_vfiprintf_r+0x32>
 800510a:	89ab      	ldrh	r3, [r5, #12]
 800510c:	059a      	lsls	r2, r3, #22
 800510e:	d402      	bmi.n	8005116 <_vfiprintf_r+0x32>
 8005110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005112:	f7ff ff27 	bl	8004f64 <__retarget_lock_acquire_recursive>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	071b      	lsls	r3, r3, #28
 800511a:	d501      	bpl.n	8005120 <_vfiprintf_r+0x3c>
 800511c:	692b      	ldr	r3, [r5, #16]
 800511e:	b9eb      	cbnz	r3, 800515c <_vfiprintf_r+0x78>
 8005120:	4629      	mov	r1, r5
 8005122:	4630      	mov	r0, r6
 8005124:	f000 fb5a 	bl	80057dc <__swsetup_r>
 8005128:	b1c0      	cbz	r0, 800515c <_vfiprintf_r+0x78>
 800512a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800512c:	07dc      	lsls	r4, r3, #31
 800512e:	d50e      	bpl.n	800514e <_vfiprintf_r+0x6a>
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	b01d      	add	sp, #116	; 0x74
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	4b7b      	ldr	r3, [pc, #492]	; (8005328 <_vfiprintf_r+0x244>)
 800513c:	429d      	cmp	r5, r3
 800513e:	d101      	bne.n	8005144 <_vfiprintf_r+0x60>
 8005140:	68b5      	ldr	r5, [r6, #8]
 8005142:	e7df      	b.n	8005104 <_vfiprintf_r+0x20>
 8005144:	4b79      	ldr	r3, [pc, #484]	; (800532c <_vfiprintf_r+0x248>)
 8005146:	429d      	cmp	r5, r3
 8005148:	bf08      	it	eq
 800514a:	68f5      	ldreq	r5, [r6, #12]
 800514c:	e7da      	b.n	8005104 <_vfiprintf_r+0x20>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	0598      	lsls	r0, r3, #22
 8005152:	d4ed      	bmi.n	8005130 <_vfiprintf_r+0x4c>
 8005154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005156:	f7ff ff06 	bl	8004f66 <__retarget_lock_release_recursive>
 800515a:	e7e9      	b.n	8005130 <_vfiprintf_r+0x4c>
 800515c:	2300      	movs	r3, #0
 800515e:	9309      	str	r3, [sp, #36]	; 0x24
 8005160:	2320      	movs	r3, #32
 8005162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005166:	f8cd 800c 	str.w	r8, [sp, #12]
 800516a:	2330      	movs	r3, #48	; 0x30
 800516c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005330 <_vfiprintf_r+0x24c>
 8005170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005174:	f04f 0901 	mov.w	r9, #1
 8005178:	4623      	mov	r3, r4
 800517a:	469a      	mov	sl, r3
 800517c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005180:	b10a      	cbz	r2, 8005186 <_vfiprintf_r+0xa2>
 8005182:	2a25      	cmp	r2, #37	; 0x25
 8005184:	d1f9      	bne.n	800517a <_vfiprintf_r+0x96>
 8005186:	ebba 0b04 	subs.w	fp, sl, r4
 800518a:	d00b      	beq.n	80051a4 <_vfiprintf_r+0xc0>
 800518c:	465b      	mov	r3, fp
 800518e:	4622      	mov	r2, r4
 8005190:	4629      	mov	r1, r5
 8005192:	4630      	mov	r0, r6
 8005194:	f7ff ff93 	bl	80050be <__sfputs_r>
 8005198:	3001      	adds	r0, #1
 800519a:	f000 80aa 	beq.w	80052f2 <_vfiprintf_r+0x20e>
 800519e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a0:	445a      	add	r2, fp
 80051a2:	9209      	str	r2, [sp, #36]	; 0x24
 80051a4:	f89a 3000 	ldrb.w	r3, [sl]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a2 	beq.w	80052f2 <_vfiprintf_r+0x20e>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b8:	f10a 0a01 	add.w	sl, sl, #1
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	9307      	str	r3, [sp, #28]
 80051c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c4:	931a      	str	r3, [sp, #104]	; 0x68
 80051c6:	4654      	mov	r4, sl
 80051c8:	2205      	movs	r2, #5
 80051ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ce:	4858      	ldr	r0, [pc, #352]	; (8005330 <_vfiprintf_r+0x24c>)
 80051d0:	f7fb f806 	bl	80001e0 <memchr>
 80051d4:	9a04      	ldr	r2, [sp, #16]
 80051d6:	b9d8      	cbnz	r0, 8005210 <_vfiprintf_r+0x12c>
 80051d8:	06d1      	lsls	r1, r2, #27
 80051da:	bf44      	itt	mi
 80051dc:	2320      	movmi	r3, #32
 80051de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e2:	0713      	lsls	r3, r2, #28
 80051e4:	bf44      	itt	mi
 80051e6:	232b      	movmi	r3, #43	; 0x2b
 80051e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ec:	f89a 3000 	ldrb.w	r3, [sl]
 80051f0:	2b2a      	cmp	r3, #42	; 0x2a
 80051f2:	d015      	beq.n	8005220 <_vfiprintf_r+0x13c>
 80051f4:	9a07      	ldr	r2, [sp, #28]
 80051f6:	4654      	mov	r4, sl
 80051f8:	2000      	movs	r0, #0
 80051fa:	f04f 0c0a 	mov.w	ip, #10
 80051fe:	4621      	mov	r1, r4
 8005200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005204:	3b30      	subs	r3, #48	; 0x30
 8005206:	2b09      	cmp	r3, #9
 8005208:	d94e      	bls.n	80052a8 <_vfiprintf_r+0x1c4>
 800520a:	b1b0      	cbz	r0, 800523a <_vfiprintf_r+0x156>
 800520c:	9207      	str	r2, [sp, #28]
 800520e:	e014      	b.n	800523a <_vfiprintf_r+0x156>
 8005210:	eba0 0308 	sub.w	r3, r0, r8
 8005214:	fa09 f303 	lsl.w	r3, r9, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	46a2      	mov	sl, r4
 800521e:	e7d2      	b.n	80051c6 <_vfiprintf_r+0xe2>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	1d19      	adds	r1, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	9103      	str	r1, [sp, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	bfbb      	ittet	lt
 800522c:	425b      	neglt	r3, r3
 800522e:	f042 0202 	orrlt.w	r2, r2, #2
 8005232:	9307      	strge	r3, [sp, #28]
 8005234:	9307      	strlt	r3, [sp, #28]
 8005236:	bfb8      	it	lt
 8005238:	9204      	strlt	r2, [sp, #16]
 800523a:	7823      	ldrb	r3, [r4, #0]
 800523c:	2b2e      	cmp	r3, #46	; 0x2e
 800523e:	d10c      	bne.n	800525a <_vfiprintf_r+0x176>
 8005240:	7863      	ldrb	r3, [r4, #1]
 8005242:	2b2a      	cmp	r3, #42	; 0x2a
 8005244:	d135      	bne.n	80052b2 <_vfiprintf_r+0x1ce>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	9203      	str	r2, [sp, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfb8      	it	lt
 8005252:	f04f 33ff 	movlt.w	r3, #4294967295
 8005256:	3402      	adds	r4, #2
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005340 <_vfiprintf_r+0x25c>
 800525e:	7821      	ldrb	r1, [r4, #0]
 8005260:	2203      	movs	r2, #3
 8005262:	4650      	mov	r0, sl
 8005264:	f7fa ffbc 	bl	80001e0 <memchr>
 8005268:	b140      	cbz	r0, 800527c <_vfiprintf_r+0x198>
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	eba0 000a 	sub.w	r0, r0, sl
 8005270:	fa03 f000 	lsl.w	r0, r3, r0
 8005274:	9b04      	ldr	r3, [sp, #16]
 8005276:	4303      	orrs	r3, r0
 8005278:	3401      	adds	r4, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005280:	482c      	ldr	r0, [pc, #176]	; (8005334 <_vfiprintf_r+0x250>)
 8005282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005286:	2206      	movs	r2, #6
 8005288:	f7fa ffaa 	bl	80001e0 <memchr>
 800528c:	2800      	cmp	r0, #0
 800528e:	d03f      	beq.n	8005310 <_vfiprintf_r+0x22c>
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <_vfiprintf_r+0x254>)
 8005292:	bb1b      	cbnz	r3, 80052dc <_vfiprintf_r+0x1f8>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	3307      	adds	r3, #7
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	3308      	adds	r3, #8
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	443b      	add	r3, r7
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	e767      	b.n	8005178 <_vfiprintf_r+0x94>
 80052a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ac:	460c      	mov	r4, r1
 80052ae:	2001      	movs	r0, #1
 80052b0:	e7a5      	b.n	80051fe <_vfiprintf_r+0x11a>
 80052b2:	2300      	movs	r3, #0
 80052b4:	3401      	adds	r4, #1
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f04f 0c0a 	mov.w	ip, #10
 80052be:	4620      	mov	r0, r4
 80052c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c4:	3a30      	subs	r2, #48	; 0x30
 80052c6:	2a09      	cmp	r2, #9
 80052c8:	d903      	bls.n	80052d2 <_vfiprintf_r+0x1ee>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0c5      	beq.n	800525a <_vfiprintf_r+0x176>
 80052ce:	9105      	str	r1, [sp, #20]
 80052d0:	e7c3      	b.n	800525a <_vfiprintf_r+0x176>
 80052d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d6:	4604      	mov	r4, r0
 80052d8:	2301      	movs	r3, #1
 80052da:	e7f0      	b.n	80052be <_vfiprintf_r+0x1da>
 80052dc:	ab03      	add	r3, sp, #12
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <_vfiprintf_r+0x258>)
 80052e4:	a904      	add	r1, sp, #16
 80052e6:	4630      	mov	r0, r6
 80052e8:	f3af 8000 	nop.w
 80052ec:	4607      	mov	r7, r0
 80052ee:	1c78      	adds	r0, r7, #1
 80052f0:	d1d6      	bne.n	80052a0 <_vfiprintf_r+0x1bc>
 80052f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f4:	07d9      	lsls	r1, r3, #31
 80052f6:	d405      	bmi.n	8005304 <_vfiprintf_r+0x220>
 80052f8:	89ab      	ldrh	r3, [r5, #12]
 80052fa:	059a      	lsls	r2, r3, #22
 80052fc:	d402      	bmi.n	8005304 <_vfiprintf_r+0x220>
 80052fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005300:	f7ff fe31 	bl	8004f66 <__retarget_lock_release_recursive>
 8005304:	89ab      	ldrh	r3, [r5, #12]
 8005306:	065b      	lsls	r3, r3, #25
 8005308:	f53f af12 	bmi.w	8005130 <_vfiprintf_r+0x4c>
 800530c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800530e:	e711      	b.n	8005134 <_vfiprintf_r+0x50>
 8005310:	ab03      	add	r3, sp, #12
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	462a      	mov	r2, r5
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <_vfiprintf_r+0x258>)
 8005318:	a904      	add	r1, sp, #16
 800531a:	4630      	mov	r0, r6
 800531c:	f000 f880 	bl	8005420 <_printf_i>
 8005320:	e7e4      	b.n	80052ec <_vfiprintf_r+0x208>
 8005322:	bf00      	nop
 8005324:	080060e4 	.word	0x080060e4
 8005328:	08006104 	.word	0x08006104
 800532c:	080060c4 	.word	0x080060c4
 8005330:	08006124 	.word	0x08006124
 8005334:	0800612e 	.word	0x0800612e
 8005338:	00000000 	.word	0x00000000
 800533c:	080050bf 	.word	0x080050bf
 8005340:	0800612a 	.word	0x0800612a

08005344 <_printf_common>:
 8005344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	4616      	mov	r6, r2
 800534a:	4699      	mov	r9, r3
 800534c:	688a      	ldr	r2, [r1, #8]
 800534e:	690b      	ldr	r3, [r1, #16]
 8005350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005354:	4293      	cmp	r3, r2
 8005356:	bfb8      	it	lt
 8005358:	4613      	movlt	r3, r2
 800535a:	6033      	str	r3, [r6, #0]
 800535c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005360:	4607      	mov	r7, r0
 8005362:	460c      	mov	r4, r1
 8005364:	b10a      	cbz	r2, 800536a <_printf_common+0x26>
 8005366:	3301      	adds	r3, #1
 8005368:	6033      	str	r3, [r6, #0]
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	0699      	lsls	r1, r3, #26
 800536e:	bf42      	ittt	mi
 8005370:	6833      	ldrmi	r3, [r6, #0]
 8005372:	3302      	addmi	r3, #2
 8005374:	6033      	strmi	r3, [r6, #0]
 8005376:	6825      	ldr	r5, [r4, #0]
 8005378:	f015 0506 	ands.w	r5, r5, #6
 800537c:	d106      	bne.n	800538c <_printf_common+0x48>
 800537e:	f104 0a19 	add.w	sl, r4, #25
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	6832      	ldr	r2, [r6, #0]
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	42ab      	cmp	r3, r5
 800538a:	dc26      	bgt.n	80053da <_printf_common+0x96>
 800538c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005390:	1e13      	subs	r3, r2, #0
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	bf18      	it	ne
 8005396:	2301      	movne	r3, #1
 8005398:	0692      	lsls	r2, r2, #26
 800539a:	d42b      	bmi.n	80053f4 <_printf_common+0xb0>
 800539c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a0:	4649      	mov	r1, r9
 80053a2:	4638      	mov	r0, r7
 80053a4:	47c0      	blx	r8
 80053a6:	3001      	adds	r0, #1
 80053a8:	d01e      	beq.n	80053e8 <_printf_common+0xa4>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	68e5      	ldr	r5, [r4, #12]
 80053ae:	6832      	ldr	r2, [r6, #0]
 80053b0:	f003 0306 	and.w	r3, r3, #6
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	bf08      	it	eq
 80053b8:	1aad      	subeq	r5, r5, r2
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	bf0c      	ite	eq
 80053c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c4:	2500      	movne	r5, #0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bfc4      	itt	gt
 80053ca:	1a9b      	subgt	r3, r3, r2
 80053cc:	18ed      	addgt	r5, r5, r3
 80053ce:	2600      	movs	r6, #0
 80053d0:	341a      	adds	r4, #26
 80053d2:	42b5      	cmp	r5, r6
 80053d4:	d11a      	bne.n	800540c <_printf_common+0xc8>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e008      	b.n	80053ec <_printf_common+0xa8>
 80053da:	2301      	movs	r3, #1
 80053dc:	4652      	mov	r2, sl
 80053de:	4649      	mov	r1, r9
 80053e0:	4638      	mov	r0, r7
 80053e2:	47c0      	blx	r8
 80053e4:	3001      	adds	r0, #1
 80053e6:	d103      	bne.n	80053f0 <_printf_common+0xac>
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f0:	3501      	adds	r5, #1
 80053f2:	e7c6      	b.n	8005382 <_printf_common+0x3e>
 80053f4:	18e1      	adds	r1, r4, r3
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	2030      	movs	r0, #48	; 0x30
 80053fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053fe:	4422      	add	r2, r4
 8005400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005408:	3302      	adds	r3, #2
 800540a:	e7c7      	b.n	800539c <_printf_common+0x58>
 800540c:	2301      	movs	r3, #1
 800540e:	4622      	mov	r2, r4
 8005410:	4649      	mov	r1, r9
 8005412:	4638      	mov	r0, r7
 8005414:	47c0      	blx	r8
 8005416:	3001      	adds	r0, #1
 8005418:	d0e6      	beq.n	80053e8 <_printf_common+0xa4>
 800541a:	3601      	adds	r6, #1
 800541c:	e7d9      	b.n	80053d2 <_printf_common+0x8e>
	...

08005420 <_printf_i>:
 8005420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	7e0f      	ldrb	r7, [r1, #24]
 8005426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005428:	2f78      	cmp	r7, #120	; 0x78
 800542a:	4691      	mov	r9, r2
 800542c:	4680      	mov	r8, r0
 800542e:	460c      	mov	r4, r1
 8005430:	469a      	mov	sl, r3
 8005432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005436:	d807      	bhi.n	8005448 <_printf_i+0x28>
 8005438:	2f62      	cmp	r7, #98	; 0x62
 800543a:	d80a      	bhi.n	8005452 <_printf_i+0x32>
 800543c:	2f00      	cmp	r7, #0
 800543e:	f000 80d8 	beq.w	80055f2 <_printf_i+0x1d2>
 8005442:	2f58      	cmp	r7, #88	; 0x58
 8005444:	f000 80a3 	beq.w	800558e <_printf_i+0x16e>
 8005448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800544c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005450:	e03a      	b.n	80054c8 <_printf_i+0xa8>
 8005452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005456:	2b15      	cmp	r3, #21
 8005458:	d8f6      	bhi.n	8005448 <_printf_i+0x28>
 800545a:	a101      	add	r1, pc, #4	; (adr r1, 8005460 <_printf_i+0x40>)
 800545c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054cd 	.word	0x080054cd
 8005468:	08005449 	.word	0x08005449
 800546c:	08005449 	.word	0x08005449
 8005470:	08005449 	.word	0x08005449
 8005474:	08005449 	.word	0x08005449
 8005478:	080054cd 	.word	0x080054cd
 800547c:	08005449 	.word	0x08005449
 8005480:	08005449 	.word	0x08005449
 8005484:	08005449 	.word	0x08005449
 8005488:	08005449 	.word	0x08005449
 800548c:	080055d9 	.word	0x080055d9
 8005490:	080054fd 	.word	0x080054fd
 8005494:	080055bb 	.word	0x080055bb
 8005498:	08005449 	.word	0x08005449
 800549c:	08005449 	.word	0x08005449
 80054a0:	080055fb 	.word	0x080055fb
 80054a4:	08005449 	.word	0x08005449
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	08005449 	.word	0x08005449
 80054b0:	08005449 	.word	0x08005449
 80054b4:	080055c3 	.word	0x080055c3
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	602a      	str	r2, [r5, #0]
 80054c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0a3      	b.n	8005614 <_printf_i+0x1f4>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	6829      	ldr	r1, [r5, #0]
 80054d0:	0606      	lsls	r6, r0, #24
 80054d2:	f101 0304 	add.w	r3, r1, #4
 80054d6:	d50a      	bpl.n	80054ee <_printf_i+0xce>
 80054d8:	680e      	ldr	r6, [r1, #0]
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	2e00      	cmp	r6, #0
 80054de:	da03      	bge.n	80054e8 <_printf_i+0xc8>
 80054e0:	232d      	movs	r3, #45	; 0x2d
 80054e2:	4276      	negs	r6, r6
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e8:	485e      	ldr	r0, [pc, #376]	; (8005664 <_printf_i+0x244>)
 80054ea:	230a      	movs	r3, #10
 80054ec:	e019      	b.n	8005522 <_printf_i+0x102>
 80054ee:	680e      	ldr	r6, [r1, #0]
 80054f0:	602b      	str	r3, [r5, #0]
 80054f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054f6:	bf18      	it	ne
 80054f8:	b236      	sxthne	r6, r6
 80054fa:	e7ef      	b.n	80054dc <_printf_i+0xbc>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	6820      	ldr	r0, [r4, #0]
 8005500:	1d19      	adds	r1, r3, #4
 8005502:	6029      	str	r1, [r5, #0]
 8005504:	0601      	lsls	r1, r0, #24
 8005506:	d501      	bpl.n	800550c <_printf_i+0xec>
 8005508:	681e      	ldr	r6, [r3, #0]
 800550a:	e002      	b.n	8005512 <_printf_i+0xf2>
 800550c:	0646      	lsls	r6, r0, #25
 800550e:	d5fb      	bpl.n	8005508 <_printf_i+0xe8>
 8005510:	881e      	ldrh	r6, [r3, #0]
 8005512:	4854      	ldr	r0, [pc, #336]	; (8005664 <_printf_i+0x244>)
 8005514:	2f6f      	cmp	r7, #111	; 0x6f
 8005516:	bf0c      	ite	eq
 8005518:	2308      	moveq	r3, #8
 800551a:	230a      	movne	r3, #10
 800551c:	2100      	movs	r1, #0
 800551e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005522:	6865      	ldr	r5, [r4, #4]
 8005524:	60a5      	str	r5, [r4, #8]
 8005526:	2d00      	cmp	r5, #0
 8005528:	bfa2      	ittt	ge
 800552a:	6821      	ldrge	r1, [r4, #0]
 800552c:	f021 0104 	bicge.w	r1, r1, #4
 8005530:	6021      	strge	r1, [r4, #0]
 8005532:	b90e      	cbnz	r6, 8005538 <_printf_i+0x118>
 8005534:	2d00      	cmp	r5, #0
 8005536:	d04d      	beq.n	80055d4 <_printf_i+0x1b4>
 8005538:	4615      	mov	r5, r2
 800553a:	fbb6 f1f3 	udiv	r1, r6, r3
 800553e:	fb03 6711 	mls	r7, r3, r1, r6
 8005542:	5dc7      	ldrb	r7, [r0, r7]
 8005544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005548:	4637      	mov	r7, r6
 800554a:	42bb      	cmp	r3, r7
 800554c:	460e      	mov	r6, r1
 800554e:	d9f4      	bls.n	800553a <_printf_i+0x11a>
 8005550:	2b08      	cmp	r3, #8
 8005552:	d10b      	bne.n	800556c <_printf_i+0x14c>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	07de      	lsls	r6, r3, #31
 8005558:	d508      	bpl.n	800556c <_printf_i+0x14c>
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4299      	cmp	r1, r3
 8005560:	bfde      	ittt	le
 8005562:	2330      	movle	r3, #48	; 0x30
 8005564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800556c:	1b52      	subs	r2, r2, r5
 800556e:	6122      	str	r2, [r4, #16]
 8005570:	f8cd a000 	str.w	sl, [sp]
 8005574:	464b      	mov	r3, r9
 8005576:	aa03      	add	r2, sp, #12
 8005578:	4621      	mov	r1, r4
 800557a:	4640      	mov	r0, r8
 800557c:	f7ff fee2 	bl	8005344 <_printf_common>
 8005580:	3001      	adds	r0, #1
 8005582:	d14c      	bne.n	800561e <_printf_i+0x1fe>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	b004      	add	sp, #16
 800558a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558e:	4835      	ldr	r0, [pc, #212]	; (8005664 <_printf_i+0x244>)
 8005590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005594:	6829      	ldr	r1, [r5, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f851 6b04 	ldr.w	r6, [r1], #4
 800559c:	6029      	str	r1, [r5, #0]
 800559e:	061d      	lsls	r5, r3, #24
 80055a0:	d514      	bpl.n	80055cc <_printf_i+0x1ac>
 80055a2:	07df      	lsls	r7, r3, #31
 80055a4:	bf44      	itt	mi
 80055a6:	f043 0320 	orrmi.w	r3, r3, #32
 80055aa:	6023      	strmi	r3, [r4, #0]
 80055ac:	b91e      	cbnz	r6, 80055b6 <_printf_i+0x196>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f023 0320 	bic.w	r3, r3, #32
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	2310      	movs	r3, #16
 80055b8:	e7b0      	b.n	800551c <_printf_i+0xfc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	f043 0320 	orr.w	r3, r3, #32
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	2378      	movs	r3, #120	; 0x78
 80055c4:	4828      	ldr	r0, [pc, #160]	; (8005668 <_printf_i+0x248>)
 80055c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ca:	e7e3      	b.n	8005594 <_printf_i+0x174>
 80055cc:	0659      	lsls	r1, r3, #25
 80055ce:	bf48      	it	mi
 80055d0:	b2b6      	uxthmi	r6, r6
 80055d2:	e7e6      	b.n	80055a2 <_printf_i+0x182>
 80055d4:	4615      	mov	r5, r2
 80055d6:	e7bb      	b.n	8005550 <_printf_i+0x130>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	6826      	ldr	r6, [r4, #0]
 80055dc:	6961      	ldr	r1, [r4, #20]
 80055de:	1d18      	adds	r0, r3, #4
 80055e0:	6028      	str	r0, [r5, #0]
 80055e2:	0635      	lsls	r5, r6, #24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0x1cc>
 80055e8:	6019      	str	r1, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0x1d2>
 80055ec:	0670      	lsls	r0, r6, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0x1c8>
 80055f0:	8019      	strh	r1, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	4615      	mov	r5, r2
 80055f8:	e7ba      	b.n	8005570 <_printf_i+0x150>
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	2100      	movs	r1, #0
 8005606:	4628      	mov	r0, r5
 8005608:	f7fa fdea 	bl	80001e0 <memchr>
 800560c:	b108      	cbz	r0, 8005612 <_printf_i+0x1f2>
 800560e:	1b40      	subs	r0, r0, r5
 8005610:	6060      	str	r0, [r4, #4]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	2300      	movs	r3, #0
 8005618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800561c:	e7a8      	b.n	8005570 <_printf_i+0x150>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	462a      	mov	r2, r5
 8005622:	4649      	mov	r1, r9
 8005624:	4640      	mov	r0, r8
 8005626:	47d0      	blx	sl
 8005628:	3001      	adds	r0, #1
 800562a:	d0ab      	beq.n	8005584 <_printf_i+0x164>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	079b      	lsls	r3, r3, #30
 8005630:	d413      	bmi.n	800565a <_printf_i+0x23a>
 8005632:	68e0      	ldr	r0, [r4, #12]
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	4298      	cmp	r0, r3
 8005638:	bfb8      	it	lt
 800563a:	4618      	movlt	r0, r3
 800563c:	e7a4      	b.n	8005588 <_printf_i+0x168>
 800563e:	2301      	movs	r3, #1
 8005640:	4632      	mov	r2, r6
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d09b      	beq.n	8005584 <_printf_i+0x164>
 800564c:	3501      	adds	r5, #1
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	9903      	ldr	r1, [sp, #12]
 8005652:	1a5b      	subs	r3, r3, r1
 8005654:	42ab      	cmp	r3, r5
 8005656:	dcf2      	bgt.n	800563e <_printf_i+0x21e>
 8005658:	e7eb      	b.n	8005632 <_printf_i+0x212>
 800565a:	2500      	movs	r5, #0
 800565c:	f104 0619 	add.w	r6, r4, #25
 8005660:	e7f5      	b.n	800564e <_printf_i+0x22e>
 8005662:	bf00      	nop
 8005664:	08006135 	.word	0x08006135
 8005668:	08006146 	.word	0x08006146

0800566c <_sbrk_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4d06      	ldr	r5, [pc, #24]	; (8005688 <_sbrk_r+0x1c>)
 8005670:	2300      	movs	r3, #0
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	602b      	str	r3, [r5, #0]
 8005678:	f7fc fae8 	bl	8001c4c <_sbrk>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_sbrk_r+0x1a>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_sbrk_r+0x1a>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	200001c0 	.word	0x200001c0

0800568c <__sread>:
 800568c:	b510      	push	{r4, lr}
 800568e:	460c      	mov	r4, r1
 8005690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005694:	f000 fab2 	bl	8005bfc <_read_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	bfab      	itete	ge
 800569c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800569e:	89a3      	ldrhlt	r3, [r4, #12]
 80056a0:	181b      	addge	r3, r3, r0
 80056a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056a6:	bfac      	ite	ge
 80056a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056aa:	81a3      	strhlt	r3, [r4, #12]
 80056ac:	bd10      	pop	{r4, pc}

080056ae <__swrite>:
 80056ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b2:	461f      	mov	r7, r3
 80056b4:	898b      	ldrh	r3, [r1, #12]
 80056b6:	05db      	lsls	r3, r3, #23
 80056b8:	4605      	mov	r5, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	4616      	mov	r6, r2
 80056be:	d505      	bpl.n	80056cc <__swrite+0x1e>
 80056c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c4:	2302      	movs	r3, #2
 80056c6:	2200      	movs	r2, #0
 80056c8:	f000 f9c8 	bl	8005a5c <_lseek_r>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	4632      	mov	r2, r6
 80056da:	463b      	mov	r3, r7
 80056dc:	4628      	mov	r0, r5
 80056de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	f000 b869 	b.w	80057b8 <_write_r>

080056e6 <__sseek>:
 80056e6:	b510      	push	{r4, lr}
 80056e8:	460c      	mov	r4, r1
 80056ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ee:	f000 f9b5 	bl	8005a5c <_lseek_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	bf15      	itete	ne
 80056f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005702:	81a3      	strheq	r3, [r4, #12]
 8005704:	bf18      	it	ne
 8005706:	81a3      	strhne	r3, [r4, #12]
 8005708:	bd10      	pop	{r4, pc}

0800570a <__sclose>:
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 b8d3 	b.w	80058b8 <_close_r>
	...

08005714 <__swbuf_r>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	460e      	mov	r6, r1
 8005718:	4614      	mov	r4, r2
 800571a:	4605      	mov	r5, r0
 800571c:	b118      	cbz	r0, 8005726 <__swbuf_r+0x12>
 800571e:	6983      	ldr	r3, [r0, #24]
 8005720:	b90b      	cbnz	r3, 8005726 <__swbuf_r+0x12>
 8005722:	f7ff fb81 	bl	8004e28 <__sinit>
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <__swbuf_r+0x98>)
 8005728:	429c      	cmp	r4, r3
 800572a:	d12b      	bne.n	8005784 <__swbuf_r+0x70>
 800572c:	686c      	ldr	r4, [r5, #4]
 800572e:	69a3      	ldr	r3, [r4, #24]
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	071a      	lsls	r2, r3, #28
 8005736:	d52f      	bpl.n	8005798 <__swbuf_r+0x84>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	b36b      	cbz	r3, 8005798 <__swbuf_r+0x84>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	1ac0      	subs	r0, r0, r3
 8005742:	6963      	ldr	r3, [r4, #20]
 8005744:	b2f6      	uxtb	r6, r6
 8005746:	4283      	cmp	r3, r0
 8005748:	4637      	mov	r7, r6
 800574a:	dc04      	bgt.n	8005756 <__swbuf_r+0x42>
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f948 	bl	80059e4 <_fflush_r>
 8005754:	bb30      	cbnz	r0, 80057a4 <__swbuf_r+0x90>
 8005756:	68a3      	ldr	r3, [r4, #8]
 8005758:	3b01      	subs	r3, #1
 800575a:	60a3      	str	r3, [r4, #8]
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	701e      	strb	r6, [r3, #0]
 8005764:	6963      	ldr	r3, [r4, #20]
 8005766:	3001      	adds	r0, #1
 8005768:	4283      	cmp	r3, r0
 800576a:	d004      	beq.n	8005776 <__swbuf_r+0x62>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	07db      	lsls	r3, r3, #31
 8005770:	d506      	bpl.n	8005780 <__swbuf_r+0x6c>
 8005772:	2e0a      	cmp	r6, #10
 8005774:	d104      	bne.n	8005780 <__swbuf_r+0x6c>
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 f933 	bl	80059e4 <_fflush_r>
 800577e:	b988      	cbnz	r0, 80057a4 <__swbuf_r+0x90>
 8005780:	4638      	mov	r0, r7
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <__swbuf_r+0x9c>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d101      	bne.n	800578e <__swbuf_r+0x7a>
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	e7cf      	b.n	800572e <__swbuf_r+0x1a>
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <__swbuf_r+0xa0>)
 8005790:	429c      	cmp	r4, r3
 8005792:	bf08      	it	eq
 8005794:	68ec      	ldreq	r4, [r5, #12]
 8005796:	e7ca      	b.n	800572e <__swbuf_r+0x1a>
 8005798:	4621      	mov	r1, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f81e 	bl	80057dc <__swsetup_r>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d0cb      	beq.n	800573c <__swbuf_r+0x28>
 80057a4:	f04f 37ff 	mov.w	r7, #4294967295
 80057a8:	e7ea      	b.n	8005780 <__swbuf_r+0x6c>
 80057aa:	bf00      	nop
 80057ac:	080060e4 	.word	0x080060e4
 80057b0:	08006104 	.word	0x08006104
 80057b4:	080060c4 	.word	0x080060c4

080057b8 <_write_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_write_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fc f9ef 	bl	8001baa <_write>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_write_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_write_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200001c0 	.word	0x200001c0

080057dc <__swsetup_r>:
 80057dc:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <__swsetup_r+0xcc>)
 80057de:	b570      	push	{r4, r5, r6, lr}
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	4606      	mov	r6, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	b125      	cbz	r5, 80057f2 <__swsetup_r+0x16>
 80057e8:	69ab      	ldr	r3, [r5, #24]
 80057ea:	b913      	cbnz	r3, 80057f2 <__swsetup_r+0x16>
 80057ec:	4628      	mov	r0, r5
 80057ee:	f7ff fb1b 	bl	8004e28 <__sinit>
 80057f2:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <__swsetup_r+0xd0>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d10f      	bne.n	8005818 <__swsetup_r+0x3c>
 80057f8:	686c      	ldr	r4, [r5, #4]
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005800:	0719      	lsls	r1, r3, #28
 8005802:	d42c      	bmi.n	800585e <__swsetup_r+0x82>
 8005804:	06dd      	lsls	r5, r3, #27
 8005806:	d411      	bmi.n	800582c <__swsetup_r+0x50>
 8005808:	2309      	movs	r3, #9
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	e03e      	b.n	8005896 <__swsetup_r+0xba>
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <__swsetup_r+0xd4>)
 800581a:	429c      	cmp	r4, r3
 800581c:	d101      	bne.n	8005822 <__swsetup_r+0x46>
 800581e:	68ac      	ldr	r4, [r5, #8]
 8005820:	e7eb      	b.n	80057fa <__swsetup_r+0x1e>
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <__swsetup_r+0xd8>)
 8005824:	429c      	cmp	r4, r3
 8005826:	bf08      	it	eq
 8005828:	68ec      	ldreq	r4, [r5, #12]
 800582a:	e7e6      	b.n	80057fa <__swsetup_r+0x1e>
 800582c:	0758      	lsls	r0, r3, #29
 800582e:	d512      	bpl.n	8005856 <__swsetup_r+0x7a>
 8005830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005832:	b141      	cbz	r1, 8005846 <__swsetup_r+0x6a>
 8005834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <__swsetup_r+0x66>
 800583c:	4630      	mov	r0, r6
 800583e:	f000 f991 	bl	8005b64 <_free_r>
 8005842:	2300      	movs	r3, #0
 8005844:	6363      	str	r3, [r4, #52]	; 0x34
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	2300      	movs	r3, #0
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	b94b      	cbnz	r3, 8005876 <__swsetup_r+0x9a>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d003      	beq.n	8005876 <__swsetup_r+0x9a>
 800586e:	4621      	mov	r1, r4
 8005870:	4630      	mov	r0, r6
 8005872:	f000 f92b 	bl	8005acc <__smakebuf_r>
 8005876:	89a0      	ldrh	r0, [r4, #12]
 8005878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587c:	f010 0301 	ands.w	r3, r0, #1
 8005880:	d00a      	beq.n	8005898 <__swsetup_r+0xbc>
 8005882:	2300      	movs	r3, #0
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	6963      	ldr	r3, [r4, #20]
 8005888:	425b      	negs	r3, r3
 800588a:	61a3      	str	r3, [r4, #24]
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	b943      	cbnz	r3, 80058a2 <__swsetup_r+0xc6>
 8005890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005894:	d1ba      	bne.n	800580c <__swsetup_r+0x30>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	0781      	lsls	r1, r0, #30
 800589a:	bf58      	it	pl
 800589c:	6963      	ldrpl	r3, [r4, #20]
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	e7f4      	b.n	800588c <__swsetup_r+0xb0>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e7f7      	b.n	8005896 <__swsetup_r+0xba>
 80058a6:	bf00      	nop
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	080060e4 	.word	0x080060e4
 80058b0:	08006104 	.word	0x08006104
 80058b4:	080060c4 	.word	0x080060c4

080058b8 <_close_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d06      	ldr	r5, [pc, #24]	; (80058d4 <_close_r+0x1c>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fc f98d 	bl	8001be2 <_close>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_close_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_close_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200001c0 	.word	0x200001c0

080058d8 <__sflush_r>:
 80058d8:	898a      	ldrh	r2, [r1, #12]
 80058da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	0710      	lsls	r0, r2, #28
 80058e2:	460c      	mov	r4, r1
 80058e4:	d458      	bmi.n	8005998 <__sflush_r+0xc0>
 80058e6:	684b      	ldr	r3, [r1, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc05      	bgt.n	80058f8 <__sflush_r+0x20>
 80058ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dc02      	bgt.n	80058f8 <__sflush_r+0x20>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d0f9      	beq.n	80058f2 <__sflush_r+0x1a>
 80058fe:	2300      	movs	r3, #0
 8005900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005904:	682f      	ldr	r7, [r5, #0]
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	d032      	beq.n	8005970 <__sflush_r+0x98>
 800590a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	075a      	lsls	r2, r3, #29
 8005910:	d505      	bpl.n	800591e <__sflush_r+0x46>
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	1ac0      	subs	r0, r0, r3
 8005916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005918:	b10b      	cbz	r3, 800591e <__sflush_r+0x46>
 800591a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800591c:	1ac0      	subs	r0, r0, r3
 800591e:	2300      	movs	r3, #0
 8005920:	4602      	mov	r2, r0
 8005922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005924:	6a21      	ldr	r1, [r4, #32]
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	d106      	bne.n	800593e <__sflush_r+0x66>
 8005930:	6829      	ldr	r1, [r5, #0]
 8005932:	291d      	cmp	r1, #29
 8005934:	d82c      	bhi.n	8005990 <__sflush_r+0xb8>
 8005936:	4a2a      	ldr	r2, [pc, #168]	; (80059e0 <__sflush_r+0x108>)
 8005938:	40ca      	lsrs	r2, r1
 800593a:	07d6      	lsls	r6, r2, #31
 800593c:	d528      	bpl.n	8005990 <__sflush_r+0xb8>
 800593e:	2200      	movs	r2, #0
 8005940:	6062      	str	r2, [r4, #4]
 8005942:	04d9      	lsls	r1, r3, #19
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	d504      	bpl.n	8005954 <__sflush_r+0x7c>
 800594a:	1c42      	adds	r2, r0, #1
 800594c:	d101      	bne.n	8005952 <__sflush_r+0x7a>
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	b903      	cbnz	r3, 8005954 <__sflush_r+0x7c>
 8005952:	6560      	str	r0, [r4, #84]	; 0x54
 8005954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005956:	602f      	str	r7, [r5, #0]
 8005958:	2900      	cmp	r1, #0
 800595a:	d0ca      	beq.n	80058f2 <__sflush_r+0x1a>
 800595c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005960:	4299      	cmp	r1, r3
 8005962:	d002      	beq.n	800596a <__sflush_r+0x92>
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f8fd 	bl	8005b64 <_free_r>
 800596a:	2000      	movs	r0, #0
 800596c:	6360      	str	r0, [r4, #52]	; 0x34
 800596e:	e7c1      	b.n	80058f4 <__sflush_r+0x1c>
 8005970:	6a21      	ldr	r1, [r4, #32]
 8005972:	2301      	movs	r3, #1
 8005974:	4628      	mov	r0, r5
 8005976:	47b0      	blx	r6
 8005978:	1c41      	adds	r1, r0, #1
 800597a:	d1c7      	bne.n	800590c <__sflush_r+0x34>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0c4      	beq.n	800590c <__sflush_r+0x34>
 8005982:	2b1d      	cmp	r3, #29
 8005984:	d001      	beq.n	800598a <__sflush_r+0xb2>
 8005986:	2b16      	cmp	r3, #22
 8005988:	d101      	bne.n	800598e <__sflush_r+0xb6>
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	e7b1      	b.n	80058f2 <__sflush_r+0x1a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	e7ad      	b.n	80058f4 <__sflush_r+0x1c>
 8005998:	690f      	ldr	r7, [r1, #16]
 800599a:	2f00      	cmp	r7, #0
 800599c:	d0a9      	beq.n	80058f2 <__sflush_r+0x1a>
 800599e:	0793      	lsls	r3, r2, #30
 80059a0:	680e      	ldr	r6, [r1, #0]
 80059a2:	bf08      	it	eq
 80059a4:	694b      	ldreq	r3, [r1, #20]
 80059a6:	600f      	str	r7, [r1, #0]
 80059a8:	bf18      	it	ne
 80059aa:	2300      	movne	r3, #0
 80059ac:	eba6 0807 	sub.w	r8, r6, r7
 80059b0:	608b      	str	r3, [r1, #8]
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	dd9c      	ble.n	80058f2 <__sflush_r+0x1a>
 80059b8:	6a21      	ldr	r1, [r4, #32]
 80059ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059bc:	4643      	mov	r3, r8
 80059be:	463a      	mov	r2, r7
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b0      	blx	r6
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dc06      	bgt.n	80059d6 <__sflush_r+0xfe>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	e78e      	b.n	80058f4 <__sflush_r+0x1c>
 80059d6:	4407      	add	r7, r0
 80059d8:	eba8 0800 	sub.w	r8, r8, r0
 80059dc:	e7e9      	b.n	80059b2 <__sflush_r+0xda>
 80059de:	bf00      	nop
 80059e0:	20400001 	.word	0x20400001

080059e4 <_fflush_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	690b      	ldr	r3, [r1, #16]
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b913      	cbnz	r3, 80059f4 <_fflush_r+0x10>
 80059ee:	2500      	movs	r5, #0
 80059f0:	4628      	mov	r0, r5
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	b118      	cbz	r0, 80059fe <_fflush_r+0x1a>
 80059f6:	6983      	ldr	r3, [r0, #24]
 80059f8:	b90b      	cbnz	r3, 80059fe <_fflush_r+0x1a>
 80059fa:	f7ff fa15 	bl	8004e28 <__sinit>
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <_fflush_r+0x6c>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	d11b      	bne.n	8005a3c <_fflush_r+0x58>
 8005a04:	686c      	ldr	r4, [r5, #4]
 8005a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ef      	beq.n	80059ee <_fflush_r+0xa>
 8005a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a10:	07d0      	lsls	r0, r2, #31
 8005a12:	d404      	bmi.n	8005a1e <_fflush_r+0x3a>
 8005a14:	0599      	lsls	r1, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_fflush_r+0x3a>
 8005a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1a:	f7ff faa3 	bl	8004f64 <__retarget_lock_acquire_recursive>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	4621      	mov	r1, r4
 8005a22:	f7ff ff59 	bl	80058d8 <__sflush_r>
 8005a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a28:	07da      	lsls	r2, r3, #31
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	d4e0      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	059b      	lsls	r3, r3, #22
 8005a32:	d4dd      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a36:	f7ff fa96 	bl	8004f66 <__retarget_lock_release_recursive>
 8005a3a:	e7d9      	b.n	80059f0 <_fflush_r+0xc>
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <_fflush_r+0x70>)
 8005a3e:	429c      	cmp	r4, r3
 8005a40:	d101      	bne.n	8005a46 <_fflush_r+0x62>
 8005a42:	68ac      	ldr	r4, [r5, #8]
 8005a44:	e7df      	b.n	8005a06 <_fflush_r+0x22>
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <_fflush_r+0x74>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	bf08      	it	eq
 8005a4c:	68ec      	ldreq	r4, [r5, #12]
 8005a4e:	e7da      	b.n	8005a06 <_fflush_r+0x22>
 8005a50:	080060e4 	.word	0x080060e4
 8005a54:	08006104 	.word	0x08006104
 8005a58:	080060c4 	.word	0x080060c4

08005a5c <_lseek_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	; (8005a7c <_lseek_r+0x20>)
 8005a60:	4604      	mov	r4, r0
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fc f8e0 	bl	8001c30 <_lseek>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_lseek_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_lseek_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	200001c0 	.word	0x200001c0

08005a80 <__swhatbuf_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	b096      	sub	sp, #88	; 0x58
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	461d      	mov	r5, r3
 8005a90:	da08      	bge.n	8005aa4 <__swhatbuf_r+0x24>
 8005a92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	061a      	lsls	r2, r3, #24
 8005a9c:	d410      	bmi.n	8005ac0 <__swhatbuf_r+0x40>
 8005a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa2:	e00e      	b.n	8005ac2 <__swhatbuf_r+0x42>
 8005aa4:	466a      	mov	r2, sp
 8005aa6:	f000 f8bb 	bl	8005c20 <_fstat_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	dbf1      	blt.n	8005a92 <__swhatbuf_r+0x12>
 8005aae:	9a01      	ldr	r2, [sp, #4]
 8005ab0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ab4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ab8:	425a      	negs	r2, r3
 8005aba:	415a      	adcs	r2, r3
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	e7ee      	b.n	8005a9e <__swhatbuf_r+0x1e>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	b016      	add	sp, #88	; 0x58
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005acc <__smakebuf_r>:
 8005acc:	898b      	ldrh	r3, [r1, #12]
 8005ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad0:	079d      	lsls	r5, r3, #30
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	d507      	bpl.n	8005ae8 <__smakebuf_r+0x1c>
 8005ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	6163      	str	r3, [r4, #20]
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	ab01      	add	r3, sp, #4
 8005aea:	466a      	mov	r2, sp
 8005aec:	f7ff ffc8 	bl	8005a80 <__swhatbuf_r>
 8005af0:	9900      	ldr	r1, [sp, #0]
 8005af2:	4605      	mov	r5, r0
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff fa57 	bl	8004fa8 <_malloc_r>
 8005afa:	b948      	cbnz	r0, 8005b10 <__smakebuf_r+0x44>
 8005afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b00:	059a      	lsls	r2, r3, #22
 8005b02:	d4ef      	bmi.n	8005ae4 <__smakebuf_r+0x18>
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	e7e3      	b.n	8005ad8 <__smakebuf_r+0xc>
 8005b10:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <__smakebuf_r+0x7c>)
 8005b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	6020      	str	r0, [r4, #0]
 8005b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	9b00      	ldr	r3, [sp, #0]
 8005b20:	6163      	str	r3, [r4, #20]
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	6120      	str	r0, [r4, #16]
 8005b26:	b15b      	cbz	r3, 8005b40 <__smakebuf_r+0x74>
 8005b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 f889 	bl	8005c44 <_isatty_r>
 8005b32:	b128      	cbz	r0, 8005b40 <__smakebuf_r+0x74>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	89a0      	ldrh	r0, [r4, #12]
 8005b42:	4305      	orrs	r5, r0
 8005b44:	81a5      	strh	r5, [r4, #12]
 8005b46:	e7cd      	b.n	8005ae4 <__smakebuf_r+0x18>
 8005b48:	08004dc1 	.word	0x08004dc1

08005b4c <__malloc_lock>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <__malloc_lock+0x8>)
 8005b4e:	f7ff ba09 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8005b52:	bf00      	nop
 8005b54:	200001b4 	.word	0x200001b4

08005b58 <__malloc_unlock>:
 8005b58:	4801      	ldr	r0, [pc, #4]	; (8005b60 <__malloc_unlock+0x8>)
 8005b5a:	f7ff ba04 	b.w	8004f66 <__retarget_lock_release_recursive>
 8005b5e:	bf00      	nop
 8005b60:	200001b4 	.word	0x200001b4

08005b64 <_free_r>:
 8005b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d044      	beq.n	8005bf4 <_free_r+0x90>
 8005b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6e:	9001      	str	r0, [sp, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f1a1 0404 	sub.w	r4, r1, #4
 8005b76:	bfb8      	it	lt
 8005b78:	18e4      	addlt	r4, r4, r3
 8005b7a:	f7ff ffe7 	bl	8005b4c <__malloc_lock>
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <_free_r+0x94>)
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x30>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b90:	f7ff bfe2 	b.w	8005b58 <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x46>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x22>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x50>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x46>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1855      	adds	r5, r2, r1
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x70>
 8005bbc:	6824      	ldr	r4, [r4, #0]
 8005bbe:	4421      	add	r1, r4
 8005bc0:	1854      	adds	r4, r2, r1
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x26>
 8005bc8:	681c      	ldr	r4, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	4421      	add	r1, r4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x26>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x78>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x26>
 8005bdc:	6825      	ldr	r5, [r4, #0]
 8005bde:	1961      	adds	r1, r4, r5
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x26>
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
 8005bf8:	200001b8 	.word	0x200001b8

08005bfc <_read_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	; (8005c1c <_read_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fb ffb0 	bl	8001b70 <_read>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_read_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_read_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200001c0 	.word	0x200001c0

08005c20 <_fstat_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d07      	ldr	r5, [pc, #28]	; (8005c40 <_fstat_r+0x20>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	f7fb ffe4 	bl	8001bfa <_fstat>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d102      	bne.n	8005c3c <_fstat_r+0x1c>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	b103      	cbz	r3, 8005c3c <_fstat_r+0x1c>
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	200001c0 	.word	0x200001c0

08005c44 <_isatty_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	; (8005c60 <_isatty_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb ffe3 	bl	8001c1a <_isatty>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_isatty_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_isatty_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200001c0 	.word	0x200001c0
 8005c64:	00000000 	.word	0x00000000

08005c68 <exp>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	ed2d 8b02 	vpush	{d8}
 8005c6e:	ec55 4b10 	vmov	r4, r5, d0
 8005c72:	f000 f841 	bl	8005cf8 <__ieee754_exp>
 8005c76:	eeb0 8a40 	vmov.f32	s16, s0
 8005c7a:	eef0 8a60 	vmov.f32	s17, s1
 8005c7e:	ec45 4b10 	vmov	d0, r4, r5
 8005c82:	f000 f9eb 	bl	800605c <finite>
 8005c86:	b168      	cbz	r0, 8005ca4 <exp+0x3c>
 8005c88:	a317      	add	r3, pc, #92	; (adr r3, 8005ce8 <exp+0x80>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8005c96:	b160      	cbz	r0, 8005cb2 <exp+0x4a>
 8005c98:	f7ff f824 	bl	8004ce4 <__errno>
 8005c9c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8005cd8 <exp+0x70>
 8005ca0:	2322      	movs	r3, #34	; 0x22
 8005ca2:	6003      	str	r3, [r0, #0]
 8005ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ca8:	eef0 0a68 	vmov.f32	s1, s17
 8005cac:	ecbd 8b02 	vpop	{d8}
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	a30f      	add	r3, pc, #60	; (adr r3, 8005cf0 <exp+0x88>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa ff0e 	bl	8000adc <__aeabi_dcmplt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0ef      	beq.n	8005ca4 <exp+0x3c>
 8005cc4:	f7ff f80e 	bl	8004ce4 <__errno>
 8005cc8:	2322      	movs	r3, #34	; 0x22
 8005cca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8005ce0 <exp+0x78>
 8005cce:	6003      	str	r3, [r0, #0]
 8005cd0:	e7e8      	b.n	8005ca4 <exp+0x3c>
 8005cd2:	bf00      	nop
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	7ff00000 	.word	0x7ff00000
	...
 8005ce8:	fefa39ef 	.word	0xfefa39ef
 8005cec:	40862e42 	.word	0x40862e42
 8005cf0:	d52d3051 	.word	0xd52d3051
 8005cf4:	c0874910 	.word	0xc0874910

08005cf8 <__ieee754_exp>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	ec55 4b10 	vmov	r4, r5, d0
 8005d00:	49b5      	ldr	r1, [pc, #724]	; (8005fd8 <__ieee754_exp+0x2e0>)
 8005d02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d06:	428b      	cmp	r3, r1
 8005d08:	ed2d 8b04 	vpush	{d8-d9}
 8005d0c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005d10:	d93d      	bls.n	8005d8e <__ieee754_exp+0x96>
 8005d12:	49b2      	ldr	r1, [pc, #712]	; (8005fdc <__ieee754_exp+0x2e4>)
 8005d14:	428b      	cmp	r3, r1
 8005d16:	d918      	bls.n	8005d4a <__ieee754_exp+0x52>
 8005d18:	ee10 3a10 	vmov	r3, s0
 8005d1c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8005d20:	4313      	orrs	r3, r2
 8005d22:	d009      	beq.n	8005d38 <__ieee754_exp+0x40>
 8005d24:	ee10 2a10 	vmov	r2, s0
 8005d28:	462b      	mov	r3, r5
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa faad 	bl	800028c <__adddf3>
 8005d32:	4604      	mov	r4, r0
 8005d34:	460d      	mov	r5, r1
 8005d36:	e002      	b.n	8005d3e <__ieee754_exp+0x46>
 8005d38:	b10e      	cbz	r6, 8005d3e <__ieee754_exp+0x46>
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	ecbd 8b04 	vpop	{d8-d9}
 8005d42:	ec45 4b10 	vmov	d0, r4, r5
 8005d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4a:	a38d      	add	r3, pc, #564	; (adr r3, 8005f80 <__ieee754_exp+0x288>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	ee10 0a10 	vmov	r0, s0
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fedf 	bl	8000b18 <__aeabi_dcmpgt>
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	b130      	cbz	r0, 8005d6c <__ieee754_exp+0x74>
 8005d5e:	ecbd 8b04 	vpop	{d8-d9}
 8005d62:	2000      	movs	r0, #0
 8005d64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	f000 b96f 	b.w	800604a <__math_oflow>
 8005d6c:	a386      	add	r3, pc, #536	; (adr r3, 8005f88 <__ieee754_exp+0x290>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa feb1 	bl	8000adc <__aeabi_dcmplt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f000 808b 	beq.w	8005e96 <__ieee754_exp+0x19e>
 8005d80:	ecbd 8b04 	vpop	{d8-d9}
 8005d84:	4638      	mov	r0, r7
 8005d86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8a:	f000 b955 	b.w	8006038 <__math_uflow>
 8005d8e:	4a94      	ldr	r2, [pc, #592]	; (8005fe0 <__ieee754_exp+0x2e8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f240 80ac 	bls.w	8005eee <__ieee754_exp+0x1f6>
 8005d96:	4a93      	ldr	r2, [pc, #588]	; (8005fe4 <__ieee754_exp+0x2ec>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d87c      	bhi.n	8005e96 <__ieee754_exp+0x19e>
 8005d9c:	4b92      	ldr	r3, [pc, #584]	; (8005fe8 <__ieee754_exp+0x2f0>)
 8005d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	ee10 0a10 	vmov	r0, s0
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fa6c 	bl	8000288 <__aeabi_dsub>
 8005db0:	4b8e      	ldr	r3, [pc, #568]	; (8005fec <__ieee754_exp+0x2f4>)
 8005db2:	00f7      	lsls	r7, r6, #3
 8005db4:	443b      	add	r3, r7
 8005db6:	ed93 7b00 	vldr	d7, [r3]
 8005dba:	f1c6 0a01 	rsb	sl, r6, #1
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	ebaa 0a06 	sub.w	sl, sl, r6
 8005dc6:	eeb0 8a47 	vmov.f32	s16, s14
 8005dca:	eef0 8a67 	vmov.f32	s17, s15
 8005dce:	ec53 2b18 	vmov	r2, r3, d8
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	4604      	mov	r4, r0
 8005ddc:	460d      	mov	r5, r1
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	f7fa fc07 	bl	80005f8 <__aeabi_dmul>
 8005dea:	a369      	add	r3, pc, #420	; (adr r3, 8005f90 <__ieee754_exp+0x298>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	a367      	add	r3, pc, #412	; (adr r3, 8005f98 <__ieee754_exp+0x2a0>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f7fa fa43 	bl	8000288 <__aeabi_dsub>
 8005e02:	4632      	mov	r2, r6
 8005e04:	463b      	mov	r3, r7
 8005e06:	f7fa fbf7 	bl	80005f8 <__aeabi_dmul>
 8005e0a:	a365      	add	r3, pc, #404	; (adr r3, 8005fa0 <__ieee754_exp+0x2a8>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fa3c 	bl	800028c <__adddf3>
 8005e14:	4632      	mov	r2, r6
 8005e16:	463b      	mov	r3, r7
 8005e18:	f7fa fbee 	bl	80005f8 <__aeabi_dmul>
 8005e1c:	a362      	add	r3, pc, #392	; (adr r3, 8005fa8 <__ieee754_exp+0x2b0>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa fa31 	bl	8000288 <__aeabi_dsub>
 8005e26:	4632      	mov	r2, r6
 8005e28:	463b      	mov	r3, r7
 8005e2a:	f7fa fbe5 	bl	80005f8 <__aeabi_dmul>
 8005e2e:	a360      	add	r3, pc, #384	; (adr r3, 8005fb0 <__ieee754_exp+0x2b8>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa fa2a 	bl	800028c <__adddf3>
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	f7fa fbdc 	bl	80005f8 <__aeabi_dmul>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fa1e 	bl	8000288 <__aeabi_dsub>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fbce 	bl	80005f8 <__aeabi_dmul>
 8005e5c:	ec41 0b19 	vmov	d9, r0, r1
 8005e60:	f1ba 0f00 	cmp.w	sl, #0
 8005e64:	d15d      	bne.n	8005f22 <__ieee754_exp+0x22a>
 8005e66:	2200      	movs	r2, #0
 8005e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	ec51 0b19 	vmov	r0, r1, d9
 8005e7c:	f7fa fce6 	bl	800084c <__aeabi_ddiv>
 8005e80:	4622      	mov	r2, r4
 8005e82:	462b      	mov	r3, r5
 8005e84:	f7fa fa00 	bl	8000288 <__aeabi_dsub>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4958      	ldr	r1, [pc, #352]	; (8005ff0 <__ieee754_exp+0x2f8>)
 8005e90:	f7fa f9fa 	bl	8000288 <__aeabi_dsub>
 8005e94:	e74d      	b.n	8005d32 <__ieee754_exp+0x3a>
 8005e96:	4857      	ldr	r0, [pc, #348]	; (8005ff4 <__ieee754_exp+0x2fc>)
 8005e98:	a347      	add	r3, pc, #284	; (adr r3, 8005fb8 <__ieee754_exp+0x2c0>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7fa fba7 	bl	80005f8 <__aeabi_dmul>
 8005eaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005eae:	f7fa f9ed 	bl	800028c <__adddf3>
 8005eb2:	f7fa fe3b 	bl	8000b2c <__aeabi_d2iz>
 8005eb6:	4682      	mov	sl, r0
 8005eb8:	f7fa fb34 	bl	8000524 <__aeabi_i2d>
 8005ebc:	a340      	add	r3, pc, #256	; (adr r3, 8005fc0 <__ieee754_exp+0x2c8>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	f7fa fb97 	bl	80005f8 <__aeabi_dmul>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fa f9d9 	bl	8000288 <__aeabi_dsub>
 8005ed6:	a33c      	add	r3, pc, #240	; (adr r3, 8005fc8 <__ieee754_exp+0x2d0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	ec41 0b18 	vmov	d8, r0, r1
 8005eec:	e76f      	b.n	8005dce <__ieee754_exp+0xd6>
 8005eee:	4a42      	ldr	r2, [pc, #264]	; (8005ff8 <__ieee754_exp+0x300>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d811      	bhi.n	8005f18 <__ieee754_exp+0x220>
 8005ef4:	a336      	add	r3, pc, #216	; (adr r3, 8005fd0 <__ieee754_exp+0x2d8>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	ee10 0a10 	vmov	r0, s0
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa f9c4 	bl	800028c <__adddf3>
 8005f04:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <__ieee754_exp+0x2f8>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	f7fa fe06 	bl	8000b18 <__aeabi_dcmpgt>
 8005f0c:	b138      	cbz	r0, 8005f1e <__ieee754_exp+0x226>
 8005f0e:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <__ieee754_exp+0x2f8>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	4620      	mov	r0, r4
 8005f14:	4629      	mov	r1, r5
 8005f16:	e70a      	b.n	8005d2e <__ieee754_exp+0x36>
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	e75f      	b.n	8005dde <__ieee754_exp+0xe6>
 8005f1e:	4682      	mov	sl, r0
 8005f20:	e75d      	b.n	8005dde <__ieee754_exp+0xe6>
 8005f22:	4632      	mov	r2, r6
 8005f24:	463b      	mov	r3, r7
 8005f26:	2000      	movs	r0, #0
 8005f28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f2c:	f7fa f9ac 	bl	8000288 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	ec51 0b19 	vmov	r0, r1, d9
 8005f38:	f7fa fc88 	bl	800084c <__aeabi_ddiv>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	ec51 0b18 	vmov	r0, r1, d8
 8005f44:	f7fa f9a0 	bl	8000288 <__aeabi_dsub>
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	f7fa f99c 	bl	8000288 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	2000      	movs	r0, #0
 8005f56:	4926      	ldr	r1, [pc, #152]	; (8005ff0 <__ieee754_exp+0x2f8>)
 8005f58:	f7fa f996 	bl	8000288 <__aeabi_dsub>
 8005f5c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005f60:	4592      	cmp	sl, r2
 8005f62:	db02      	blt.n	8005f6a <__ieee754_exp+0x272>
 8005f64:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005f68:	e6e3      	b.n	8005d32 <__ieee754_exp+0x3a>
 8005f6a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8005f6e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005f72:	2200      	movs	r2, #0
 8005f74:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8005f78:	f7fa fb3e 	bl	80005f8 <__aeabi_dmul>
 8005f7c:	e6d9      	b.n	8005d32 <__ieee754_exp+0x3a>
 8005f7e:	bf00      	nop
 8005f80:	fefa39ef 	.word	0xfefa39ef
 8005f84:	40862e42 	.word	0x40862e42
 8005f88:	d52d3051 	.word	0xd52d3051
 8005f8c:	c0874910 	.word	0xc0874910
 8005f90:	72bea4d0 	.word	0x72bea4d0
 8005f94:	3e663769 	.word	0x3e663769
 8005f98:	c5d26bf1 	.word	0xc5d26bf1
 8005f9c:	3ebbbd41 	.word	0x3ebbbd41
 8005fa0:	af25de2c 	.word	0xaf25de2c
 8005fa4:	3f11566a 	.word	0x3f11566a
 8005fa8:	16bebd93 	.word	0x16bebd93
 8005fac:	3f66c16c 	.word	0x3f66c16c
 8005fb0:	5555553e 	.word	0x5555553e
 8005fb4:	3fc55555 	.word	0x3fc55555
 8005fb8:	652b82fe 	.word	0x652b82fe
 8005fbc:	3ff71547 	.word	0x3ff71547
 8005fc0:	fee00000 	.word	0xfee00000
 8005fc4:	3fe62e42 	.word	0x3fe62e42
 8005fc8:	35793c76 	.word	0x35793c76
 8005fcc:	3dea39ef 	.word	0x3dea39ef
 8005fd0:	8800759c 	.word	0x8800759c
 8005fd4:	7e37e43c 	.word	0x7e37e43c
 8005fd8:	40862e41 	.word	0x40862e41
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	3fd62e42 	.word	0x3fd62e42
 8005fe4:	3ff0a2b1 	.word	0x3ff0a2b1
 8005fe8:	08006168 	.word	0x08006168
 8005fec:	08006178 	.word	0x08006178
 8005ff0:	3ff00000 	.word	0x3ff00000
 8005ff4:	08006158 	.word	0x08006158
 8005ff8:	3defffff 	.word	0x3defffff

08005ffc <with_errno>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	4616      	mov	r6, r2
 8006004:	f7fe fe6e 	bl	8004ce4 <__errno>
 8006008:	4629      	mov	r1, r5
 800600a:	6006      	str	r6, [r0, #0]
 800600c:	4620      	mov	r0, r4
 800600e:	bd70      	pop	{r4, r5, r6, pc}

08006010 <xflow>:
 8006010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006012:	4614      	mov	r4, r2
 8006014:	461d      	mov	r5, r3
 8006016:	b108      	cbz	r0, 800601c <xflow+0xc>
 8006018:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800601c:	e9cd 2300 	strd	r2, r3, [sp]
 8006020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	2222      	movs	r2, #34	; 0x22
 800602e:	b003      	add	sp, #12
 8006030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006034:	f7ff bfe2 	b.w	8005ffc <with_errno>

08006038 <__math_uflow>:
 8006038:	b508      	push	{r3, lr}
 800603a:	2200      	movs	r2, #0
 800603c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006040:	f7ff ffe6 	bl	8006010 <xflow>
 8006044:	ec41 0b10 	vmov	d0, r0, r1
 8006048:	bd08      	pop	{r3, pc}

0800604a <__math_oflow>:
 800604a:	b508      	push	{r3, lr}
 800604c:	2200      	movs	r2, #0
 800604e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006052:	f7ff ffdd 	bl	8006010 <xflow>
 8006056:	ec41 0b10 	vmov	d0, r0, r1
 800605a:	bd08      	pop	{r3, pc}

0800605c <finite>:
 800605c:	b082      	sub	sp, #8
 800605e:	ed8d 0b00 	vstr	d0, [sp]
 8006062:	9801      	ldr	r0, [sp, #4]
 8006064:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006068:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800606c:	0fc0      	lsrs	r0, r0, #31
 800606e:	b002      	add	sp, #8
 8006070:	4770      	bx	lr
	...

08006074 <_init>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr

08006080 <_fini>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr
