
PBL4_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006658  08006658  00016658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006758  08006758  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006760  08006760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  080067d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080067d8  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f404  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002021  00000000  00000000  0002f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000314c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c21  00000000  00000000  00032ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d8b  00000000  00000000  0004ac11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bca3  00000000  00000000  0005b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f763f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000f7690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800663c 	.word	0x0800663c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800663c 	.word	0x0800663c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__io_putchar>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d102      	bne.n	8000f34 <__io_putchar+0x14>
    __io_putchar('\r');
 8000f2e:	200d      	movs	r0, #13
 8000f30:	f7ff fff6 	bl	8000f20 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f34:	1d39      	adds	r1, r7, #4
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <__io_putchar+0x2c>)
 8000f3e:	f003 fe40 	bl	8004bc2 <HAL_UART_Transmit>

  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001c4 	.word	0x200001c4

08000f50 <calc_pwm>:

/*
 * Aby zlinearyzować działanie układu, możemy przeliczyć jasność na wypełnienie PWM poniższą funkcją
 */
float calc_pwm(float val)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a01 	vstr	s0, [r7, #4]
	if (val>100) val=100;
 8000f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ff8 <calc_pwm+0xa8>
 8000f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	dd01      	ble.n	8000f70 <calc_pwm+0x20>
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <calc_pwm+0xac>)
 8000f6e:	607b      	str	r3, [r7, #4]
	if (val<0) val=0;
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	d502      	bpl.n	8000f84 <calc_pwm+0x34>
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
    const float k = 0.13f;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <calc_pwm+0xb0>)
 8000f86:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <calc_pwm+0xb4>)
 8000f8a:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f90:	eeb1 7a67 	vneg.f32	s14, s15
 8000f94:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ec43 2b10 	vmov	d0, r2, r3
 8000fb4:	f005 f93c 	bl	8006230 <exp>
 8000fb8:	ec51 0b10 	vmov	r0, r1, d0
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <calc_pwm+0xb8>)
 8000fc2:	f7ff f963 	bl	800028c <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	a109      	add	r1, pc, #36	; (adr r1, 8000ff0 <calc_pwm+0xa0>)
 8000fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fd0:	f7ff fc3c 	bl	800084c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdce 	bl	8000b7c <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	ee07 3a90 	vmov	s15, r3
}
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40c38800 	.word	0x40c38800
 8000ff8:	42c80000 	.word	0x42c80000
 8000ffc:	42c80000 	.word	0x42c80000
 8001000:	3e051eb8 	.word	0x3e051eb8
 8001004:	428c0000 	.word	0x428c0000
 8001008:	3ff00000 	.word	0x3ff00000

0800100c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) // TIM3 TO BEDZIE TAKI ZMIENIACZ DIÓD I BUZZERA
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a5d      	ldr	r2, [pc, #372]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80b0 	bne.w	800117e <HAL_TIM_PeriodElapsedCallback+0x172>
	{
		signalPower%=100; // EVERY 1 SEC
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001020:	f993 3000 	ldrsb.w	r3, [r3]
 8001024:	4a5b      	ldr	r2, [pc, #364]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1151      	asrs	r1, r2, #5
 800102c:	17da      	asrs	r2, r3, #31
 800102e:	1a8a      	subs	r2, r1, r2
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	fb01 f202 	mul.w	r2, r1, r2
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	b25a      	sxtb	r2, r3
 800103a:	4b55      	ldr	r3, [pc, #340]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800103c:	701a      	strb	r2, [r3, #0]
		signalPower+=2;
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001040:	f993 3000 	ldrsb.w	r3, [r3]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3302      	adds	r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b25a      	sxtb	r2, r3
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800104e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, calc_pwm((signalPower*5)));
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001052:	f993 3000 	ldrsb.w	r3, [r3]
 8001056:	461a      	mov	r2, r3
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f7ff ff71 	bl	8000f50 <calc_pwm>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 2a90 	vmov	r2, s15
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pwm((signalPower-20)*5));
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	f1a3 0214 	sub.w	r2, r3, #20
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	f7ff ff58 	bl	8000f50 <calc_pwm>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, calc_pwm((signalPower-40)*5));
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f7ff ff3f 	bl	8000f50 <calc_pwm>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010de:	ee17 2a90 	vmov	r2, s15
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm((signalPower-60)*5));
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010e6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ea:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	f7ff ff26 	bl	8000f50 <calc_pwm>
 8001104:	eef0 7a40 	vmov.f32	s15, s0
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, calc_pwm((signalPower-80)*5));
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001118:	f993 3000 	ldrsb.w	r3, [r3]
 800111c:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f7ff ff0d 	bl	8000f50 <calc_pwm>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 2a90 	vmov	r2, s15
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
	    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800114a:	f003 f940 	bl	80043ce <HAL_TIM_GetActiveChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b04      	cmp	r3, #4
 8001152:	d116      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x176>
	      case HAL_TIM_ACTIVE_CHANNEL_3:
	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(todo));
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001156:	f993 3000 	ldrsb.w	r3, [r3]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f7ff fef3 	bl	8000f50 <calc_pwm>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001176:	ee17 2a90 	vmov	r2, s15
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
	        break;
 800117c:	e002      	b.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x178>
	      default:
	        break;
	    }
	}
 800117e:	bf00      	nop
 8001180:	e000      	b.n	8001184 <HAL_TIM_PeriodElapsedCallback+0x178>
	        break;
 8001182:	bf00      	nop
		  default:
			break;
		}

	}*/
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000017c 	.word	0x2000017c
 8001190:	20000208 	.word	0x20000208
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	20000134 	.word	0x20000134
 800119c:	20000209 	.word	0x20000209

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f000 fe1f 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f893 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 faed 	bl	800178c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 faa1 	bl	80016f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011b6:	f000 f957 	bl	8001468 <MX_TIM1_Init>
  MX_DMA_Init();
 80011ba:	f000 fac7 	bl	800174c <MX_DMA_Init>
  MX_ADC1_Init();
 80011be:	f000 f8f3 	bl	80013a8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80011c2:	f000 fa17 	bl	80015f4 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim1);
 80011c6:	483d      	ldr	r0, [pc, #244]	; (80012bc <main+0x11c>)
 80011c8:	f002 fce4 	bl	8003b94 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011cc:	2100      	movs	r1, #0
 80011ce:	483b      	ldr	r0, [pc, #236]	; (80012bc <main+0x11c>)
 80011d0:	f002 fd94 	bl	8003cfc <HAL_TIM_PWM_Start>
/*	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(1000);*/
	  //__WFI();
	  uint32_t value[2];

	   HAL_ADC_Start(&hadc1);
 80011d4:	483a      	ldr	r0, [pc, #232]	; (80012c0 <main+0x120>)
 80011d6:	f000 fee1 	bl	8001f9c <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011da:	f04f 31ff 	mov.w	r1, #4294967295
 80011de:	4838      	ldr	r0, [pc, #224]	; (80012c0 <main+0x120>)
 80011e0:	f000 ff90 	bl	8002104 <HAL_ADC_PollForConversion>
	   value[0] = HAL_ADC_GetValue(&hadc1);
 80011e4:	4836      	ldr	r0, [pc, #216]	; (80012c0 <main+0x120>)
 80011e6:	f001 f818 	bl	800221a <HAL_ADC_GetValue>
 80011ea:	4603      	mov	r3, r0
 80011ec:	603b      	str	r3, [r7, #0]

	   HAL_ADC_Start(&hadc1);
 80011ee:	4834      	ldr	r0, [pc, #208]	; (80012c0 <main+0x120>)
 80011f0:	f000 fed4 	bl	8001f9c <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	4831      	ldr	r0, [pc, #196]	; (80012c0 <main+0x120>)
 80011fa:	f000 ff83 	bl	8002104 <HAL_ADC_PollForConversion>
	   value[1] = HAL_ADC_GetValue(&hadc1);
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <main+0x120>)
 8001200:	f001 f80b 	bl	800221a <HAL_ADC_GetValue>
 8001204:	4603      	mov	r3, r0
 8001206:	607b      	str	r3, [r7, #4]


	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (int)(value[0]*100.0f/4096.0f));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001212:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80012c4 <main+0x124>
 8001216:	ee27 7a87 	vmul.f32	s14, s15, s14
 800121a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80012c8 <main+0x128>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <main+0x11c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SET_PRESCALER(&htim1,(int)((value[1]*1560/4096.0f)+120));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a21 	vldr	s13, [pc, #132]	; 80012c8 <main+0x128>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012cc <main+0x12c>
 800124e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <main+0x11c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	ee17 2a90 	vmov	r2, s15
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
	   printf("value1=%lu, value2=%lu\n", (int)((value[1]*1560/4096.0f)+120), (int)(value[0]*100.0f/4096.0f));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001272:	eddf 6a15 	vldr	s13, [pc, #84]	; 80012c8 <main+0x128>
 8001276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012cc <main+0x12c>
 800127e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001282:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80012c4 <main+0x124>
 8001294:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001298:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012c8 <main+0x128>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	ee16 1a10 	vmov	r1, s12
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <main+0x130>)
 80012ae:	f004 f82f 	bl	8005310 <iprintf>
	   HAL_Delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f000 fe0a 	bl	8001ecc <HAL_Delay>
  {
 80012b8:	e78c      	b.n	80011d4 <main+0x34>
 80012ba:	bf00      	nop
 80012bc:	20000134 	.word	0x20000134
 80012c0:	2000008c 	.word	0x2000008c
 80012c4:	42c80000 	.word	0x42c80000
 80012c8:	45800000 	.word	0x45800000
 80012cc:	42f00000 	.word	0x42f00000
 80012d0:	08006658 	.word	0x08006658

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 f80c 	bl	8005300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <SystemClock_Config+0xcc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <SystemClock_Config+0xcc>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <SystemClock_Config+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <SystemClock_Config+0xd0>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001338:	2310      	movs	r3, #16
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001344:	2310      	movs	r3, #16
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001348:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800134e:	2304      	movs	r3, #4
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001352:	2304      	movs	r3, #4
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f001 ff32 	bl	80031c4 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001366:	f000 fa7f 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f994 	bl	80036b4 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001392:	f000 fa69 	bl	8001868 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3750      	adds	r7, #80	; 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_ADC1_Init+0xb4>)
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <MX_ADC1_Init+0xb8>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_ADC1_Init+0xb4>)
 80013c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_ADC1_Init+0xb4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_ADC1_Init+0xb4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_ADC1_Init+0xb4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_ADC1_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_ADC1_Init+0xb4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_ADC1_Init+0xb4>)
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <MX_ADC1_Init+0xbc>)
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_ADC1_Init+0xb4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_ADC1_Init+0xb4>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_ADC1_Init+0xb4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_ADC1_Init+0xb4>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_ADC1_Init+0xb4>)
 800140a:	f000 fd83 	bl	8001f14 <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fa28 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001418:	2301      	movs	r3, #1
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001420:	2304      	movs	r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ADC1_Init+0xb4>)
 800142a:	f000 ff03 	bl	8002234 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001434:	f000 fa18 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800143c:	2302      	movs	r3, #2
 800143e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_ADC1_Init+0xb4>)
 8001446:	f000 fef5 	bl	8002234 <HAL_ADC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001450:	f000 fa0a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000008c 	.word	0x2000008c
 8001460:	40012000 	.word	0x40012000
 8001464:	0f000001 	.word	0x0f000001

08001468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2220      	movs	r2, #32
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 ff2d 	bl	8005300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <MX_TIM1_Init+0x184>)
 80014a8:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <MX_TIM1_Init+0x188>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <MX_TIM1_Init+0x184>)
 80014ae:	f240 3247 	movw	r2, #839	; 0x347
 80014b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <MX_TIM1_Init+0x184>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <MX_TIM1_Init+0x184>)
 80014bc:	2263      	movs	r2, #99	; 0x63
 80014be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <MX_TIM1_Init+0x184>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <MX_TIM1_Init+0x184>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b47      	ldr	r3, [pc, #284]	; (80015ec <MX_TIM1_Init+0x184>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d2:	4846      	ldr	r0, [pc, #280]	; (80015ec <MX_TIM1_Init+0x184>)
 80014d4:	f002 fb0e 	bl	8003af4 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014de:	f000 f9c3 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ec:	4619      	mov	r1, r3
 80014ee:	483f      	ldr	r0, [pc, #252]	; (80015ec <MX_TIM1_Init+0x184>)
 80014f0:	f002 fe7e 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014fa:	f000 f9b5 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fe:	483b      	ldr	r0, [pc, #236]	; (80015ec <MX_TIM1_Init+0x184>)
 8001500:	f002 fba2 	bl	8003c48 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800150a:	f000 f9ad 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001516:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800151a:	4619      	mov	r1, r3
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <MX_TIM1_Init+0x184>)
 800151e:	f003 fa2f 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001528:	f000 f99e 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 20;
 8001530:	2314      	movs	r3, #20
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	4826      	ldr	r0, [pc, #152]	; (80015ec <MX_TIM1_Init+0x184>)
 8001552:	f002 fd8b 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800155c:	f000 f984 	bl	8001868 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	2204      	movs	r2, #4
 800156a:	4619      	mov	r1, r3
 800156c:	481f      	ldr	r0, [pc, #124]	; (80015ec <MX_TIM1_Init+0x184>)
 800156e:	f002 fd7d 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001578:	f000 f976 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	2208      	movs	r2, #8
 8001582:	4619      	mov	r1, r3
 8001584:	4819      	ldr	r0, [pc, #100]	; (80015ec <MX_TIM1_Init+0x184>)
 8001586:	f002 fd71 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001590:	f000 f96a 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	220c      	movs	r2, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_TIM1_Init+0x184>)
 800159e:	f002 fd65 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015a8:	f000 f95e 	bl	8001868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM1_Init+0x184>)
 80015d0:	f003 fa44 	bl	8004a5c <HAL_TIMEx_ConfigBreakDeadTime>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 80015da:	f000 f945 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM1_Init+0x184>)
 80015e0:	f000 fa2e 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3758      	adds	r7, #88	; 0x58
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000134 	.word	0x20000134
 80015f0:	40010000 	.word	0x40010000

080015f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <MX_TIM3_Init+0xfc>)
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <MX_TIM3_Init+0x100>)
 8001628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <MX_TIM3_Init+0xfc>)
 800162c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <MX_TIM3_Init+0xfc>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <MX_TIM3_Init+0xfc>)
 800163a:	f242 720f 	movw	r2, #9999	; 0x270f
 800163e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <MX_TIM3_Init+0xfc>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <MX_TIM3_Init+0xfc>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164c:	4828      	ldr	r0, [pc, #160]	; (80016f0 <MX_TIM3_Init+0xfc>)
 800164e:	f002 fa51 	bl	8003af4 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001658:	f000 f906 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_TIM3_Init+0xfc>)
 800166a:	f002 fdc1 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001674:	f000 f8f8 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001678:	481d      	ldr	r0, [pc, #116]	; (80016f0 <MX_TIM3_Init+0xfc>)
 800167a:	f002 fae5 	bl	8003c48 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001684:	f000 f8f0 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4619      	mov	r1, r3
 8001696:	4816      	ldr	r0, [pc, #88]	; (80016f0 <MX_TIM3_Init+0xfc>)
 8001698:	f003 f972 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016a2:	f000 f8e1 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM3_Init+0xfc>)
 80016be:	f002 fcd5 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016c8:	f000 f8ce 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	220c      	movs	r2, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM3_Init+0xfc>)
 80016d4:	f002 fcca 	bl	800406c <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80016de:	f000 f8c3 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e2:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM3_Init+0xfc>)
 80016e4:	f000 f9ac 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80016e8:	bf00      	nop
 80016ea:	3738      	adds	r7, #56	; 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000017c 	.word	0x2000017c
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART2_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001730:	f003 f9fa 	bl	8004b28 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 f895 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001c4 	.word	0x200001c4
 8001748:	40004400 	.word	0x40004400

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_DMA_Init+0x3c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <MX_DMA_Init+0x3c>)
 800175c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_DMA_Init+0x3c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2038      	movs	r0, #56	; 0x38
 8001774:	f001 f867 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001778:	2038      	movs	r0, #56	; 0x38
 800177a:	f001 f880 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <MX_GPIO_Init+0xd0>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_GPIO_Init+0xd0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <MX_GPIO_Init+0xd0>)
 80017c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <MX_GPIO_Init+0xd0>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_GPIO_Init+0xd0>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <MX_GPIO_Init+0xd4>)
 8001818:	f001 fcba 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001822:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_GPIO_Init+0xd8>)
 8001834:	f001 fb28 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001838:	2320      	movs	r3, #32
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_GPIO_Init+0xd4>)
 8001850:	f001 fb1a 	bl	8002e88 <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020800 	.word	0x40020800

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_MspInit+0x4c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b2:	2007      	movs	r0, #7
 80018b4:	f000 ffbc 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_ADC_MspInit+0xdc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d157      	bne.n	8001996 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_ADC_MspInit+0xe0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191e:	2303      	movs	r3, #3
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	481d      	ldr	r0, [pc, #116]	; (80019a8 <HAL_ADC_MspInit+0xe4>)
 8001932:	f001 faa9 	bl	8002e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_ADC_MspInit+0xec>)
 800193a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001954:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800195c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001964:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 800197c:	f000 ff9a 	bl	80028b4 <HAL_DMA_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001986:	f7ff ff6f 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <HAL_ADC_MspInit+0xe8>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	200000d4 	.word	0x200000d4
 80019b0:	40026410 	.word	0x40026410

080019b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_TIM_Base_MspInit+0x80>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d116      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2019      	movs	r0, #25
 80019e8:	f000 ff2d 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019ec:	2019      	movs	r0, #25
 80019ee:	f000 ff46 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019f2:	e01a      	b.n	8001a2a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_TIM_Base_MspInit+0x88>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d115      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201d      	movs	r0, #29
 8001a20:	f000 ff11 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a24:	201d      	movs	r0, #29
 8001a26:	f000 ff2a 	bl	800287e <HAL_NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40000400 	.word	0x40000400

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <HAL_TIM_MspPostInit+0xb4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11f      	bne.n	8001aa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BUZZER_Pin|TIM1_CH2_LD3_Pin|TIM1_CH3_LD2_Pin|TIM1_CH4_LD1_Pin;
 8001a7e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001a9c:	f001 f9f4 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aa0:	e023      	b.n	8001aea <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <HAL_TIM_MspPostInit+0xc0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d11e      	bne.n	8001aea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH3_LD5_Pin|TIM3_CH4_LD4_Pin;
 8001ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <HAL_TIM_MspPostInit+0xc4>)
 8001ae6:	f001 f9cf 	bl	8002e88 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40020800 	.word	0x40020800

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_UART_MspInit+0x84>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12b      	bne.n	8001b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0x8c>)
 8001b7e:	f001 f983 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f952 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bf2:	f002 f933 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000134 	.word	0x20000134

08001c00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM3_IRQHandler+0x10>)
 8001c06:	f002 f929 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000017c 	.word	0x2000017c

08001c14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA2_Stream0_IRQHandler+0x10>)
 8001c1a:	f000 fef9 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200000d4 	.word	0x200000d4

08001c28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
	}

return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f94f 	bl	8000f20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
	}
	return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f003 faba 	bl	80052ac <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20020000 	.word	0x20020000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	2000020c 	.word	0x2000020c
 8001d6c:	20000228 	.word	0x20000228

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff ffd7 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f003 fa79 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff f9eb 	bl	80011a0 <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dd8:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 8001ddc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001de0:	20000224 	.word	0x20000224

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fd0d 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fd2a 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fd25 	bl	800289a <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 fced 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20000210 	.word	0x20000210

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000210 	.word	0x20000210

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008

08001f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e033      	b.n	8001f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fcc6 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f5a:	f023 0302 	bic.w	r3, r3, #2
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa96 	bl	8002498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
 8001f82:	e001      	b.n	8001f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Start+0x1a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e097      	b.n	80020e6 <HAL_ADC_Start+0x14a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d018      	beq.n	8001ffe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fdc:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <HAL_ADC_Start+0x158>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_ADC_Start+0x15c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9a      	lsrs	r2, r3, #18
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d15f      	bne.n	80020cc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002036:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	d106      	bne.n	800205a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f023 0206 	bic.w	r2, r3, #6
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
 8002058:	e002      	b.n	8002060 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_ADC_Start+0x160>)
 800206a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002074:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d129      	bne.n	80020e4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	e020      	b.n	80020e4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_ADC_Start+0x164>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d11b      	bne.n	80020e4 <HAL_ADC_Start+0x148>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	e00b      	b.n	80020e4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000

08002104 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d113      	bne.n	800214a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800212c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002130:	d10b      	bne.n	800214a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e063      	b.n	8002212 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800214a:	f7ff feb3 	bl	8001eb4 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002150:	e021      	b.n	8002196 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d01d      	beq.n	8002196 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_ADC_PollForConversion+0x6c>
 8002160:	f7ff fea8 	bl	8001eb4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d212      	bcs.n	8002196 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d00b      	beq.n	8002196 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0204 	orr.w	r2, r3, #4
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e03d      	b.n	8002212 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d1d6      	bne.n	8002152 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0212 	mvn.w	r2, #18
 80021ac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d123      	bne.n	8002210 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11f      	bne.n	8002210 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1c>
 800224c:	2302      	movs	r3, #2
 800224e:	e113      	b.n	8002478 <HAL_ADC_ConfigChannel+0x244>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d925      	bls.n	80022ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	3b1e      	subs	r3, #30
 8002276:	2207      	movs	r2, #7
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43da      	mvns	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68d9      	ldr	r1, [r3, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	4603      	mov	r3, r0
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4403      	add	r3, r0
 800229e:	3b1e      	subs	r3, #30
 80022a0:	409a      	lsls	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e022      	b.n	80022f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	2207      	movs	r2, #7
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4403      	add	r3, r0
 80022e8:	409a      	lsls	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d824      	bhi.n	8002344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b05      	subs	r3, #5
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b05      	subs	r3, #5
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
 8002342:	e04c      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d824      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	3b23      	subs	r3, #35	; 0x23
 800235e:	221f      	movs	r2, #31
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b23      	subs	r3, #35	; 0x23
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	e023      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b41      	subs	r3, #65	; 0x41
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b41      	subs	r3, #65	; 0x41
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_ADC_ConfigChannel+0x250>)
 80023e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10f      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x1f4>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b11      	cmp	r3, #17
 8002426:	d122      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_ConfigChannel+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_ADC_ConfigChannel+0x260>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9a      	lsrs	r2, r3, #18
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40012300 	.word	0x40012300
 8002488:	40012000 	.word	0x40012000
 800248c:	10000012 	.word	0x10000012
 8002490:	20000000 	.word	0x20000000
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <ADC_Init+0x1f0>)
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	021a      	lsls	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <ADC_Init+0x1f4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e00f      	b.n	8002596 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0202 	bic.w	r2, r2, #2
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	3b01      	subs	r3, #1
 80025f0:	035a      	lsls	r2, r3, #13
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	3b01      	subs	r3, #1
 8002628:	051a      	lsls	r2, r3, #20
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	025a      	lsls	r2, r3, #9
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	029a      	lsls	r2, r3, #10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	0f000001 	.word	0x0f000001

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff faf8 	bl	8001eb4 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e099      	b.n	8002a04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f0:	e00f      	b.n	8002912 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f2:	f7ff fadf 	bl	8001eb4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d908      	bls.n	8002912 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e078      	b.n	8002a04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e8      	bne.n	80028f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_DMA_Init+0x158>)
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2b04      	cmp	r3, #4
 800296a:	d107      	bne.n	800297c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4313      	orrs	r3, r2
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d117      	bne.n	80029d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9e9 	bl	8002d90 <DMA_CheckFifoParam>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029d2:	2301      	movs	r3, #1
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9a0 	bl	8002d24 <DMA_CalcBaseAndBitshift>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	f010803f 	.word	0xf010803f

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a1c:	4b8e      	ldr	r3, [pc, #568]	; (8002c58 <HAL_DMA_IRQHandler+0x248>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a8e      	ldr	r2, [pc, #568]	; (8002c5c <HAL_DMA_IRQHandler+0x24c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2208      	movs	r2, #8
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2210      	movs	r2, #16
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d043      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03c      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d024      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e01f      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2220      	movs	r2, #32
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808f 	beq.w	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8087 	beq.w	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d136      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_IRQHandler+0x1da>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07e      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
        }
        return;
 8002c26:	e079      	b.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d031      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e02c      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
 8002c56:	bf00      	nop
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
 8002c70:	e01e      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0210 	bic.w	r2, r2, #16
 8002c8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d032      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d022      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2205      	movs	r2, #5
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d307      	bcc.n	8002cf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f2      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x2cc>
 8002cf6:	e000      	b.n	8002cfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
 8002d1a:	e000      	b.n	8002d1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d1c:	bf00      	nop
    }
  }
}
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	3b10      	subs	r3, #16
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <DMA_CalcBaseAndBitshift+0x64>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <DMA_CalcBaseAndBitshift+0x68>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d909      	bls.n	8002d66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58
 8002d64:	e007      	b.n	8002d76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	aaaaaaab 	.word	0xaaaaaaab
 8002d8c:	08006688 	.word	0x08006688

08002d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11f      	bne.n	8002dea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d856      	bhi.n	8002e5e <DMA_CheckFifoParam+0xce>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <DMA_CheckFifoParam+0x28>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002ddb 	.word	0x08002ddb
 8002dc0:	08002dc9 	.word	0x08002dc9
 8002dc4:	08002e5f 	.word	0x08002e5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d046      	beq.n	8002e62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e043      	b.n	8002e62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de2:	d140      	bne.n	8002e66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de8:	e03d      	b.n	8002e66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	d121      	bne.n	8002e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d837      	bhi.n	8002e6a <DMA_CheckFifoParam+0xda>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <DMA_CheckFifoParam+0x70>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e17 	.word	0x08002e17
 8002e08:	08002e11 	.word	0x08002e11
 8002e0c:	08002e29 	.word	0x08002e29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e030      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d025      	beq.n	8002e6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e26:	e022      	b.n	8002e6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e30:	d11f      	bne.n	8002e72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e36:	e01c      	b.n	8002e72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d903      	bls.n	8002e46 <DMA_CheckFifoParam+0xb6>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d003      	beq.n	8002e4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e44:	e018      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4a:	e015      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e00b      	b.n	8002e76 <DMA_CheckFifoParam+0xe6>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e00a      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
 8002e64:	e008      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e006      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e76:	bf00      	nop
    }
  } 
  
  return status; 
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e159      	b.n	8003158 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 8148 	bne.w	8003152 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d005      	beq.n	8002eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d130      	bne.n	8002f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 0201 	and.w	r2, r3, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d017      	beq.n	8002f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d123      	bne.n	8002fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0203 	and.w	r2, r3, #3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a2 	beq.w	8003152 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_GPIO_Init+0x2e8>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_GPIO_Init+0x2e8>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_GPIO_Init+0x2e8>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_GPIO_Init+0x2ec>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a49      	ldr	r2, [pc, #292]	; (8003178 <HAL_GPIO_Init+0x2f0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_Init+0x202>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a48      	ldr	r2, [pc, #288]	; (800317c <HAL_GPIO_Init+0x2f4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x1fe>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a47      	ldr	r2, [pc, #284]	; (8003180 <HAL_GPIO_Init+0x2f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x1fa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a46      	ldr	r2, [pc, #280]	; (8003184 <HAL_GPIO_Init+0x2fc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x1f6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a45      	ldr	r2, [pc, #276]	; (8003188 <HAL_GPIO_Init+0x300>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x1f2>
 8003076:	2304      	movs	r3, #4
 8003078:	e008      	b.n	800308c <HAL_GPIO_Init+0x204>
 800307a:	2307      	movs	r3, #7
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x204>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_Init+0x204>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_Init+0x204>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x204>
 800308a:	2300      	movs	r3, #0
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800309c:	4935      	ldr	r1, [pc, #212]	; (8003174 <HAL_GPIO_Init+0x2ec>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030aa:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_GPIO_Init+0x304>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <HAL_GPIO_Init+0x304>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_GPIO_Init+0x304>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f8:	4a24      	ldr	r2, [pc, #144]	; (800318c <HAL_GPIO_Init+0x304>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_GPIO_Init+0x304>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_GPIO_Init+0x304>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_GPIO_Init+0x304>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <HAL_GPIO_Init+0x304>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3301      	adds	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	f67f aea2 	bls.w	8002ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40013800 	.word	0x40013800
 8003178:	40020000 	.word	0x40020000
 800317c:	40020400 	.word	0x40020400
 8003180:	40020800 	.word	0x40020800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	40021000 	.word	0x40021000
 800318c:	40013c00 	.word	0x40013c00

08003190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031ac:	e003      	b.n	80031b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	041a      	lsls	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e267      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d075      	beq.n	80032ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d00c      	beq.n	8003208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d112      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003206:	d10b      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	4b7e      	ldr	r3, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05b      	beq.n	80032cc <HAL_RCC_OscConfig+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d157      	bne.n	80032cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e242      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x74>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6f      	ldr	r2, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 800325c:	4b69      	ldr	r3, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a68      	ldr	r2, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fe1a 	bl	8001eb4 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fe16 	bl	8001eb4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e207      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xc0>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fe06 	bl	8001eb4 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fe02 	bl	8001eb4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1f3      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0xe8>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1c7      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4937      	ldr	r1, [pc, #220]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x244>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fdbb 	bl	8001eb4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fdb7 	bl	8001eb4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1a8      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4925      	ldr	r1, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x244>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fd9a 	bl	8001eb4 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fd96 	bl	8001eb4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e187      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d036      	beq.n	800341c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x248>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe fd7a 	bl	8001eb4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe fd76 	bl	8001eb4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e167      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x200>
 80033e2:	e01b      	b.n	800341c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x248>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fd63 	bl	8001eb4 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e00e      	b.n	8003410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe fd5f 	bl	8001eb4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d907      	bls.n	8003410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e150      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
 800340c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ea      	bne.n	80033f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8097 	beq.w	8003558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b7d      	ldr	r3, [pc, #500]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a7c      	ldr	r2, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b77      	ldr	r3, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b74      	ldr	r3, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a73      	ldr	r2, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe fd1f 	bl	8001eb4 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe fd1b 	bl	8001eb4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e10c      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x2ea>
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x324>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x30c>
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a5e      	ldr	r2, [pc, #376]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5b      	ldr	r2, [pc, #364]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x324>
 80034d0:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a54      	ldr	r2, [pc, #336]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fce0 	bl	8001eb4 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fcdc 	bl	8001eb4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0cb      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RCC_OscConfig+0x334>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351c:	f7fe fcca 	bl	8001eb4 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fcc6 	bl	8001eb4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0b5      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a1 	beq.w	80036a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b08      	cmp	r3, #8
 800356c:	d05c      	beq.n	8003628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d141      	bne.n	80035fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_OscConfig+0x478>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fc9a 	bl	8001eb4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fc96 	bl	8001eb4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e087      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	491b      	ldr	r1, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x478>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fe fc6f 	bl	8001eb4 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe fc6b 	bl	8001eb4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e05c      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x416>
 80035f8:	e054      	b.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_OscConfig+0x478>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe fc58 	bl	8001eb4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fc54 	bl	8001eb4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e045      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x444>
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e038      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	40007000 	.word	0x40007000
 800363c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x4ec>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d028      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d121      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11a      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0cc      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d90c      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d044      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	2b03      	cmp	r3, #3
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e067      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4934      	ldr	r1, [pc, #208]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a4:	f7fe fb86 	bl	8001eb4 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fe fb82 	bl	8001eb4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d20c      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fae6 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	08006670 	.word	0x08006670
 8003878:	20000000 	.word	0x20000000
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b094      	sub	sp, #80	; 0x50
 8003886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	647b      	str	r3, [r7, #68]	; 0x44
 800388c:	2300      	movs	r3, #0
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	2300      	movs	r3, #0
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003898:	4b79      	ldr	r3, [pc, #484]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x40>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	f200 80e1 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x3a>
 80038b2:	e0db      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038b8:	e0db      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038be:	e0d8      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	2200      	movs	r2, #0
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
 80038ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038f2:	4622      	mov	r2, r4
 80038f4:	462b      	mov	r3, r5
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003904:	0150      	lsls	r0, r2, #5
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4621      	mov	r1, r4
 800390c:	1a51      	subs	r1, r2, r1
 800390e:	6139      	str	r1, [r7, #16]
 8003910:	4629      	mov	r1, r5
 8003912:	eb63 0301 	sbc.w	r3, r3, r1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003924:	4659      	mov	r1, fp
 8003926:	018b      	lsls	r3, r1, #6
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800392e:	4651      	mov	r1, sl
 8003930:	018a      	lsls	r2, r1, #6
 8003932:	4651      	mov	r1, sl
 8003934:	ebb2 0801 	subs.w	r8, r2, r1
 8003938:	4659      	mov	r1, fp
 800393a:	eb63 0901 	sbc.w	r9, r3, r1
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800394e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003952:	4690      	mov	r8, r2
 8003954:	4699      	mov	r9, r3
 8003956:	4623      	mov	r3, r4
 8003958:	eb18 0303 	adds.w	r3, r8, r3
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	462b      	mov	r3, r5
 8003960:	eb49 0303 	adc.w	r3, r9, r3
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003972:	4629      	mov	r1, r5
 8003974:	024b      	lsls	r3, r1, #9
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800397c:	4621      	mov	r1, r4
 800397e:	024a      	lsls	r2, r1, #9
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003986:	2200      	movs	r2, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
 800398a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003990:	f7fd f944 	bl	8000c1c <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	e058      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	4611      	mov	r1, r2
 80039aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	f04f 0000 	mov.w	r0, #0
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	0159      	lsls	r1, r3, #5
 80039c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ca:	0150      	lsls	r0, r2, #5
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4641      	mov	r1, r8
 80039d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f0:	ebb2 040a 	subs.w	r4, r2, sl
 80039f4:	eb63 050b 	sbc.w	r5, r3, fp
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	00eb      	lsls	r3, r5, #3
 8003a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a06:	00e2      	lsls	r2, r4, #3
 8003a08:	4614      	mov	r4, r2
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	18e3      	adds	r3, r4, r3
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	464b      	mov	r3, r9
 8003a14:	eb45 0303 	adc.w	r3, r5, r3
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	61fa      	str	r2, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	f7fd f8ea 	bl	8000c1c <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3750      	adds	r7, #80	; 0x50
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	00f42400 	.word	0x00f42400
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000000 	.word	0x20000000

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa8:	f7ff fff0 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0a9b      	lsrs	r3, r3, #10
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08006680 	.word	0x08006680

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffdc 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0b5b      	lsrs	r3, r3, #13
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	08006680 	.word	0x08006680

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e041      	b.n	8003b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd ff4a 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fc58 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e03c      	b.n	8003c26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <HAL_TIM_Base_Start+0xa0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x5c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d013      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x5c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIM_Base_Start+0xa4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x5c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_TIM_Base_Start+0xa8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x5c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_TIM_Base_Start+0xac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x5c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <HAL_TIM_Base_Start+0xb0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d010      	beq.n	8003c24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	e007      	b.n	8003c24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000

08003c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e041      	b.n	8003cde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f839 	bl	8003ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fbae 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_PWM_Start+0x24>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e022      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d109      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x3e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e015      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d109      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x58>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e008      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e068      	b.n	8003e40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x82>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x92>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fdc0 	bl	8004934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_TIM_PWM_Start+0x14c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_TIM_PWM_Start+0x14c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d013      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIM_PWM_Start+0x150>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_TIM_PWM_Start+0x154>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIM_PWM_Start+0x158>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIM_PWM_Start+0x15c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d010      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2c:	e007      	b.n	8003e3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000

08003e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0202 	mvn.w	r2, #2
 8003e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa77 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa69 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fa7a 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0204 	mvn.w	r2, #4
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fa4d 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa3f 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fa50 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0208 	mvn.w	r2, #8
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2204      	movs	r2, #4
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa23 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa15 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa26 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0210 	mvn.w	r2, #16
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9f9 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9eb 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f9fc 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0201 	mvn.w	r2, #1
 8003fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd f816 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b80      	cmp	r3, #128	; 0x80
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fd84 	bl	8004b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f9c1 	bl	80043ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d10e      	bne.n	8004064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d107      	bne.n	8004064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0220 	mvn.w	r2, #32
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fd4e 	bl	8004b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004086:	2302      	movs	r3, #2
 8004088:	e0ae      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	f200 809f 	bhi.w	80041d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080041d9 	.word	0x080041d9
 80040a8:	080041d9 	.word	0x080041d9
 80040ac:	080041d9 	.word	0x080041d9
 80040b0:	08004115 	.word	0x08004115
 80040b4:	080041d9 	.word	0x080041d9
 80040b8:	080041d9 	.word	0x080041d9
 80040bc:	080041d9 	.word	0x080041d9
 80040c0:	08004157 	.word	0x08004157
 80040c4:	080041d9 	.word	0x080041d9
 80040c8:	080041d9 	.word	0x080041d9
 80040cc:	080041d9 	.word	0x080041d9
 80040d0:	08004197 	.word	0x08004197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa04 	bl	80044e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
      break;
 8004112:	e064      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa4a 	bl	80045b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	619a      	str	r2, [r3, #24]
      break;
 8004154:	e043      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa95 	bl	800468c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0204 	bic.w	r2, r2, #4
 8004180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69d9      	ldr	r1, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
      break;
 8004194:	e023      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fadf 	bl	8004760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	61da      	str	r2, [r3, #28]
      break;
 80041d6:	e002      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
      break;
 80041dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x1c>
 8004208:	2302      	movs	r3, #2
 800420a:	e0b4      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x186>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004244:	d03e      	beq.n	80042c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424a:	f200 8087 	bhi.w	800435c <HAL_TIM_ConfigClockSource+0x16c>
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	f000 8086 	beq.w	8004362 <HAL_TIM_ConfigClockSource+0x172>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	d87f      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b70      	cmp	r3, #112	; 0x70
 800425e:	d01a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0xa6>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d87b      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d050      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x11a>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d877      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d03c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0xfa>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d873      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d058      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x13a>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d86f      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d064      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x15a>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d86b      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d060      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x15a>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d867      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d05c      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x15a>
 8004290:	2b10      	cmp	r3, #16
 8004292:	d05a      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x15a>
 8004294:	e062      	b.n	800435c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f000 fb25 	bl	80048f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	609a      	str	r2, [r3, #8]
      break;
 80042c2:	e04f      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f000 fb0e 	bl	80048f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e6:	609a      	str	r2, [r3, #8]
      break;
 80042e8:	e03c      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fa82 	bl	8004800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2150      	movs	r1, #80	; 0x50
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fadb 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004308:	e02c      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6859      	ldr	r1, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	461a      	mov	r2, r3
 8004318:	f000 faa1 	bl	800485e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2160      	movs	r1, #96	; 0x60
 8004322:	4618      	mov	r0, r3
 8004324:	f000 facb 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004328:	e01c      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	461a      	mov	r2, r3
 8004338:	f000 fa62 	bl	8004800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fabb 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004348:	e00c      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 fab2 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 800435a:	e003      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      break;
 8004360:	e000      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	7f1b      	ldrb	r3, [r3, #28]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a34      	ldr	r2, [pc, #208]	; (80044cc <TIM_Base_SetConfig+0xe4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <TIM_Base_SetConfig+0xe8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <TIM_Base_SetConfig+0xec>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <TIM_Base_SetConfig+0xf0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a25      	ldr	r2, [pc, #148]	; (80044cc <TIM_Base_SetConfig+0xe4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01b      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d017      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <TIM_Base_SetConfig+0xe8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <TIM_Base_SetConfig+0xec>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <TIM_Base_SetConfig+0xf0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <TIM_Base_SetConfig+0xf4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <TIM_Base_SetConfig+0xf8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <TIM_Base_SetConfig+0xfc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a08      	ldr	r2, [pc, #32]	; (80044cc <TIM_Base_SetConfig+0xe4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d103      	bne.n	80044b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	615a      	str	r2, [r3, #20]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800

080044e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0302 	bic.w	r3, r3, #2
 8004530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <TIM_OC1_SetConfig+0xc8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0308 	bic.w	r3, r3, #8
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <TIM_OC1_SetConfig+0xc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d111      	bne.n	800458a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40010000 	.word	0x40010000

080045b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0320 	bic.w	r3, r3, #32
 80045fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <TIM_OC2_SetConfig+0xd4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10d      	bne.n	8004630 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <TIM_OC2_SetConfig+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d113      	bne.n	8004660 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800463e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000

0800468c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <TIM_OC3_SetConfig+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10d      	bne.n	8004706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <TIM_OC3_SetConfig+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d113      	bne.n	8004736 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40010000 	.word	0x40010000

08004760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	031b      	lsls	r3, r3, #12
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <TIM_OC4_SetConfig+0x9c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d109      	bne.n	80047d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000

08004800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 030a 	bic.w	r3, r3, #10
 800483c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485e:	b480      	push	{r7}
 8004860:	b087      	sub	sp, #28
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f023 0210 	bic.w	r2, r3, #16
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	031b      	lsls	r3, r3, #12
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800489a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f043 0307 	orr.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	021a      	lsls	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	431a      	orrs	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4313      	orrs	r3, r2
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2201      	movs	r2, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e050      	b.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d013      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10c      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40014000 	.word	0x40014000

08004a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e03d      	b.n	8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e03f      	b.n	8004bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc ffda 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	; 0x24
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f929 	bl	8004dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b08a      	sub	sp, #40	; 0x28
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d17c      	bne.n	8004cdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UART_Transmit+0x2c>
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e075      	b.n	8004cde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Transmit+0x3e>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e06e      	b.n	8004cde <HAL_UART_Transmit+0x11c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2221      	movs	r2, #33	; 0x21
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c16:	f7fd f94d 	bl	8001eb4 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Transmit+0x82>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c54:	e02a      	b.n	8004cac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f840 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e036      	b.n	8004cde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e007      	b.n	8004c9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1cf      	bne.n	8004c56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2140      	movs	r1, #64	; 0x40
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f810 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e006      	b.n	8004cde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b090      	sub	sp, #64	; 0x40
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf6:	e050      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d04c      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d06:	f7fd f8d5 	bl	8001eb4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d241      	bcs.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d36:	637a      	str	r2, [r7, #52]	; 0x34
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6a:	623a      	str	r2, [r7, #32]
 8004d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	69f9      	ldr	r1, [r7, #28]
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e5      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00f      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d09f      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3740      	adds	r7, #64	; 0x40
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b0c0      	sub	sp, #256	; 0x100
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	ea40 0301 	orr.w	r3, r0, r1
 8004dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e1c:	f021 010c 	bic.w	r1, r1, #12
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	ea40 0301 	orr.w	r3, r0, r1
 8004e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b8f      	ldr	r3, [pc, #572]	; (8005090 <UART_SetConfig+0x2cc>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d005      	beq.n	8004e64 <UART_SetConfig+0xa0>
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <UART_SetConfig+0x2d0>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d104      	bne.n	8004e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe fe32 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8004e68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e6c:	e003      	b.n	8004e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6e:	f7fe fe19 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 8004e72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e80:	f040 810c 	bne.w	800509c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	eb12 0801 	adds.w	r8, r2, r1
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb43 0901 	adc.w	r9, r3, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	4699      	mov	r9, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	eb18 0303 	adds.w	r3, r8, r3
 8004ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	eb49 0303 	adc.w	r3, r9, r3
 8004eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	18db      	adds	r3, r3, r3
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef8:	4613      	mov	r3, r2
 8004efa:	eb42 0303 	adc.w	r3, r2, r3
 8004efe:	657b      	str	r3, [r7, #84]	; 0x54
 8004f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f08:	f7fb fe88 	bl	8000c1c <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4b61      	ldr	r3, [pc, #388]	; (8005098 <UART_SetConfig+0x2d4>)
 8004f12:	fba3 2302 	umull	r2, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	011c      	lsls	r4, r3, #4
 8004f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f34:	415b      	adcs	r3, r3
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f42:	4649      	mov	r1, r9
 8004f44:	eb43 0b01 	adc.w	fp, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f5c:	4692      	mov	sl, r2
 8004f5e:	469b      	mov	fp, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	eb1a 0303 	adds.w	r3, sl, r3
 8004f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	18db      	adds	r3, r3, r3
 8004f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8e:	4613      	mov	r3, r2
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f9e:	f7fb fe3d 	bl	8000c1c <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <UART_SetConfig+0x2d4>)
 8004faa:	fba3 2301 	umull	r2, r3, r3, r1
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	1acb      	subs	r3, r1, r3
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <UART_SetConfig+0x2d4>)
 8004fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005024:	464b      	mov	r3, r9
 8005026:	460a      	mov	r2, r1
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800503c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800505a:	f7fb fddf 	bl	8000c1c <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <UART_SetConfig+0x2d4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <UART_SetConfig+0x2d4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4422      	add	r2, r4
 800508a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800508c:	e105      	b.n	800529a <UART_SetConfig+0x4d6>
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ae:	4642      	mov	r2, r8
 80050b0:	464b      	mov	r3, r9
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	6239      	str	r1, [r7, #32]
 80050b6:	415b      	adcs	r3, r3
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050be:	4641      	mov	r1, r8
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb43 0501 	adc.w	r5, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	00eb      	lsls	r3, r5, #3
 80050d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d6:	00e2      	lsls	r2, r4, #3
 80050d8:	4614      	mov	r4, r2
 80050da:	461d      	mov	r5, r3
 80050dc:	4643      	mov	r3, r8
 80050de:	18e3      	adds	r3, r4, r3
 80050e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e4:	464b      	mov	r3, r9
 80050e6:	eb45 0303 	adc.w	r3, r5, r3
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800510a:	4629      	mov	r1, r5
 800510c:	008b      	lsls	r3, r1, #2
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005114:	4621      	mov	r1, r4
 8005116:	008a      	lsls	r2, r1, #2
 8005118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800511c:	f7fb fd7e 	bl	8000c1c <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b60      	ldr	r3, [pc, #384]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800513c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	61b9      	str	r1, [r7, #24]
 8005148:	415b      	adcs	r3, r3
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6139      	str	r1, [r7, #16]
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005184:	464b      	mov	r3, r9
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	67bb      	str	r3, [r7, #120]	; 0x78
 800519a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ba:	f7fb fd2f 	bl	8000c1c <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <UART_SetConfig+0x4e4>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <UART_SetConfig+0x4e4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e2:	441c      	add	r4, r3
 80051e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e8:	2200      	movs	r2, #0
 80051ea:	673b      	str	r3, [r7, #112]	; 0x70
 80051ec:	677a      	str	r2, [r7, #116]	; 0x74
 80051ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	1891      	adds	r1, r2, r2
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	415b      	adcs	r3, r3
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005202:	4641      	mov	r1, r8
 8005204:	1851      	adds	r1, r2, r1
 8005206:	6039      	str	r1, [r7, #0]
 8005208:	4649      	mov	r1, r9
 800520a:	414b      	adcs	r3, r1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800521a:	4659      	mov	r1, fp
 800521c:	00cb      	lsls	r3, r1, #3
 800521e:	4651      	mov	r1, sl
 8005220:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005224:	4651      	mov	r1, sl
 8005226:	00ca      	lsls	r2, r1, #3
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	4603      	mov	r3, r0
 800522e:	4642      	mov	r2, r8
 8005230:	189b      	adds	r3, r3, r2
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
 8005234:	464b      	mov	r3, r9
 8005236:	460a      	mov	r2, r1
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	663b      	str	r3, [r7, #96]	; 0x60
 8005248:	667a      	str	r2, [r7, #100]	; 0x64
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005256:	4649      	mov	r1, r9
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	4641      	mov	r1, r8
 800525c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005260:	4641      	mov	r1, r8
 8005262:	008a      	lsls	r2, r1, #2
 8005264:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005268:	f7fb fcd8 	bl	8000c1c <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005272:	fba3 1302 	umull	r1, r3, r3, r2
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	2164      	movs	r1, #100	; 0x64
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	3332      	adds	r3, #50	; 0x32
 8005284:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <UART_SetConfig+0x4e4>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	f003 020f 	and.w	r2, r3, #15
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4422      	add	r2, r4
 8005298:	609a      	str	r2, [r3, #8]
}
 800529a:	bf00      	nop
 800529c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	51eb851f 	.word	0x51eb851f

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000000c 	.word	0x2000000c

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f001 f9b6 	bl	800663c <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08006760 	.word	0x08006760
 80052f4:	08006760 	.word	0x08006760
 80052f8:	08006760 	.word	0x08006760
 80052fc:	08006764 	.word	0x08006764

08005300 <memset>:
 8005300:	4402      	add	r2, r0
 8005302:	4603      	mov	r3, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	d100      	bne.n	800530a <memset+0xa>
 8005308:	4770      	bx	lr
 800530a:	f803 1b01 	strb.w	r1, [r3], #1
 800530e:	e7f9      	b.n	8005304 <memset+0x4>

08005310 <iprintf>:
 8005310:	b40f      	push	{r0, r1, r2, r3}
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <iprintf+0x2c>)
 8005314:	b513      	push	{r0, r1, r4, lr}
 8005316:	681c      	ldr	r4, [r3, #0]
 8005318:	b124      	cbz	r4, 8005324 <iprintf+0x14>
 800531a:	69a3      	ldr	r3, [r4, #24]
 800531c:	b913      	cbnz	r3, 8005324 <iprintf+0x14>
 800531e:	4620      	mov	r0, r4
 8005320:	f000 f866 	bl	80053f0 <__sinit>
 8005324:	ab05      	add	r3, sp, #20
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	4620      	mov	r0, r4
 800532e:	f000 f9bd 	bl	80056ac <_vfiprintf_r>
 8005332:	b002      	add	sp, #8
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c

08005340 <std>:
 8005340:	2300      	movs	r3, #0
 8005342:	b510      	push	{r4, lr}
 8005344:	4604      	mov	r4, r0
 8005346:	e9c0 3300 	strd	r3, r3, [r0]
 800534a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800534e:	6083      	str	r3, [r0, #8]
 8005350:	8181      	strh	r1, [r0, #12]
 8005352:	6643      	str	r3, [r0, #100]	; 0x64
 8005354:	81c2      	strh	r2, [r0, #14]
 8005356:	6183      	str	r3, [r0, #24]
 8005358:	4619      	mov	r1, r3
 800535a:	2208      	movs	r2, #8
 800535c:	305c      	adds	r0, #92	; 0x5c
 800535e:	f7ff ffcf 	bl	8005300 <memset>
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <std+0x38>)
 8005364:	6263      	str	r3, [r4, #36]	; 0x24
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <std+0x3c>)
 8005368:	62a3      	str	r3, [r4, #40]	; 0x28
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <std+0x40>)
 800536c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <std+0x44>)
 8005370:	6224      	str	r4, [r4, #32]
 8005372:	6323      	str	r3, [r4, #48]	; 0x30
 8005374:	bd10      	pop	{r4, pc}
 8005376:	bf00      	nop
 8005378:	08005c55 	.word	0x08005c55
 800537c:	08005c77 	.word	0x08005c77
 8005380:	08005caf 	.word	0x08005caf
 8005384:	08005cd3 	.word	0x08005cd3

08005388 <_cleanup_r>:
 8005388:	4901      	ldr	r1, [pc, #4]	; (8005390 <_cleanup_r+0x8>)
 800538a:	f000 b8af 	b.w	80054ec <_fwalk_reent>
 800538e:	bf00      	nop
 8005390:	08005fad 	.word	0x08005fad

08005394 <__sfmoreglue>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	2268      	movs	r2, #104	; 0x68
 8005398:	1e4d      	subs	r5, r1, #1
 800539a:	4355      	muls	r5, r2
 800539c:	460e      	mov	r6, r1
 800539e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053a2:	f000 f8e5 	bl	8005570 <_malloc_r>
 80053a6:	4604      	mov	r4, r0
 80053a8:	b140      	cbz	r0, 80053bc <__sfmoreglue+0x28>
 80053aa:	2100      	movs	r1, #0
 80053ac:	e9c0 1600 	strd	r1, r6, [r0]
 80053b0:	300c      	adds	r0, #12
 80053b2:	60a0      	str	r0, [r4, #8]
 80053b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053b8:	f7ff ffa2 	bl	8005300 <memset>
 80053bc:	4620      	mov	r0, r4
 80053be:	bd70      	pop	{r4, r5, r6, pc}

080053c0 <__sfp_lock_acquire>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__sfp_lock_acquire+0x8>)
 80053c2:	f000 b8b3 	b.w	800552c <__retarget_lock_acquire_recursive>
 80053c6:	bf00      	nop
 80053c8:	20000215 	.word	0x20000215

080053cc <__sfp_lock_release>:
 80053cc:	4801      	ldr	r0, [pc, #4]	; (80053d4 <__sfp_lock_release+0x8>)
 80053ce:	f000 b8ae 	b.w	800552e <__retarget_lock_release_recursive>
 80053d2:	bf00      	nop
 80053d4:	20000215 	.word	0x20000215

080053d8 <__sinit_lock_acquire>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__sinit_lock_acquire+0x8>)
 80053da:	f000 b8a7 	b.w	800552c <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	20000216 	.word	0x20000216

080053e4 <__sinit_lock_release>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__sinit_lock_release+0x8>)
 80053e6:	f000 b8a2 	b.w	800552e <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	20000216 	.word	0x20000216

080053f0 <__sinit>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4604      	mov	r4, r0
 80053f4:	f7ff fff0 	bl	80053d8 <__sinit_lock_acquire>
 80053f8:	69a3      	ldr	r3, [r4, #24]
 80053fa:	b11b      	cbz	r3, 8005404 <__sinit+0x14>
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005400:	f7ff bff0 	b.w	80053e4 <__sinit_lock_release>
 8005404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005408:	6523      	str	r3, [r4, #80]	; 0x50
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <__sinit+0x68>)
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <__sinit+0x6c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	62a2      	str	r2, [r4, #40]	; 0x28
 8005412:	42a3      	cmp	r3, r4
 8005414:	bf04      	itt	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	61a3      	streq	r3, [r4, #24]
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f820 	bl	8005460 <__sfp>
 8005420:	6060      	str	r0, [r4, #4]
 8005422:	4620      	mov	r0, r4
 8005424:	f000 f81c 	bl	8005460 <__sfp>
 8005428:	60a0      	str	r0, [r4, #8]
 800542a:	4620      	mov	r0, r4
 800542c:	f000 f818 	bl	8005460 <__sfp>
 8005430:	2200      	movs	r2, #0
 8005432:	60e0      	str	r0, [r4, #12]
 8005434:	2104      	movs	r1, #4
 8005436:	6860      	ldr	r0, [r4, #4]
 8005438:	f7ff ff82 	bl	8005340 <std>
 800543c:	68a0      	ldr	r0, [r4, #8]
 800543e:	2201      	movs	r2, #1
 8005440:	2109      	movs	r1, #9
 8005442:	f7ff ff7d 	bl	8005340 <std>
 8005446:	68e0      	ldr	r0, [r4, #12]
 8005448:	2202      	movs	r2, #2
 800544a:	2112      	movs	r1, #18
 800544c:	f7ff ff78 	bl	8005340 <std>
 8005450:	2301      	movs	r3, #1
 8005452:	61a3      	str	r3, [r4, #24]
 8005454:	e7d2      	b.n	80053fc <__sinit+0xc>
 8005456:	bf00      	nop
 8005458:	08006690 	.word	0x08006690
 800545c:	08005389 	.word	0x08005389

08005460 <__sfp>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	4607      	mov	r7, r0
 8005464:	f7ff ffac 	bl	80053c0 <__sfp_lock_acquire>
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <__sfp+0x84>)
 800546a:	681e      	ldr	r6, [r3, #0]
 800546c:	69b3      	ldr	r3, [r6, #24]
 800546e:	b913      	cbnz	r3, 8005476 <__sfp+0x16>
 8005470:	4630      	mov	r0, r6
 8005472:	f7ff ffbd 	bl	80053f0 <__sinit>
 8005476:	3648      	adds	r6, #72	; 0x48
 8005478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800547c:	3b01      	subs	r3, #1
 800547e:	d503      	bpl.n	8005488 <__sfp+0x28>
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	b30b      	cbz	r3, 80054c8 <__sfp+0x68>
 8005484:	6836      	ldr	r6, [r6, #0]
 8005486:	e7f7      	b.n	8005478 <__sfp+0x18>
 8005488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800548c:	b9d5      	cbnz	r5, 80054c4 <__sfp+0x64>
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <__sfp+0x88>)
 8005490:	60e3      	str	r3, [r4, #12]
 8005492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005496:	6665      	str	r5, [r4, #100]	; 0x64
 8005498:	f000 f847 	bl	800552a <__retarget_lock_init_recursive>
 800549c:	f7ff ff96 	bl	80053cc <__sfp_lock_release>
 80054a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054a8:	6025      	str	r5, [r4, #0]
 80054aa:	61a5      	str	r5, [r4, #24]
 80054ac:	2208      	movs	r2, #8
 80054ae:	4629      	mov	r1, r5
 80054b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054b4:	f7ff ff24 	bl	8005300 <memset>
 80054b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054c0:	4620      	mov	r0, r4
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c4:	3468      	adds	r4, #104	; 0x68
 80054c6:	e7d9      	b.n	800547c <__sfp+0x1c>
 80054c8:	2104      	movs	r1, #4
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff ff62 	bl	8005394 <__sfmoreglue>
 80054d0:	4604      	mov	r4, r0
 80054d2:	6030      	str	r0, [r6, #0]
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d1d5      	bne.n	8005484 <__sfp+0x24>
 80054d8:	f7ff ff78 	bl	80053cc <__sfp_lock_release>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	e7ee      	b.n	80054c0 <__sfp+0x60>
 80054e2:	bf00      	nop
 80054e4:	08006690 	.word	0x08006690
 80054e8:	ffff0001 	.word	0xffff0001

080054ec <_fwalk_reent>:
 80054ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f0:	4606      	mov	r6, r0
 80054f2:	4688      	mov	r8, r1
 80054f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054f8:	2700      	movs	r7, #0
 80054fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005502:	d505      	bpl.n	8005510 <_fwalk_reent+0x24>
 8005504:	6824      	ldr	r4, [r4, #0]
 8005506:	2c00      	cmp	r4, #0
 8005508:	d1f7      	bne.n	80054fa <_fwalk_reent+0xe>
 800550a:	4638      	mov	r0, r7
 800550c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005510:	89ab      	ldrh	r3, [r5, #12]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d907      	bls.n	8005526 <_fwalk_reent+0x3a>
 8005516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800551a:	3301      	adds	r3, #1
 800551c:	d003      	beq.n	8005526 <_fwalk_reent+0x3a>
 800551e:	4629      	mov	r1, r5
 8005520:	4630      	mov	r0, r6
 8005522:	47c0      	blx	r8
 8005524:	4307      	orrs	r7, r0
 8005526:	3568      	adds	r5, #104	; 0x68
 8005528:	e7e9      	b.n	80054fe <_fwalk_reent+0x12>

0800552a <__retarget_lock_init_recursive>:
 800552a:	4770      	bx	lr

0800552c <__retarget_lock_acquire_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_release_recursive>:
 800552e:	4770      	bx	lr

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fb7a 	bl	8005c34 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fb75 	bl	8005c34 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fb6a 	bl	8005c34 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	2000021c 	.word	0x2000021c

08005570 <_malloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	2600      	movs	r6, #0
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	4e2e      	ldr	r6, [pc, #184]	; (8005654 <_malloc_r+0xe4>)
 800559a:	f000 fdbb 	bl	8006114 <__malloc_lock>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb34      	cbnz	r4, 80055f2 <_malloc_r+0x82>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc2 	bl	8005530 <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d14d      	bne.n	800564e <_malloc_r+0xde>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	4626      	mov	r6, r4
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d140      	bne.n	800563c <_malloc_r+0xcc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4631      	mov	r1, r6
 80055be:	4638      	mov	r0, r7
 80055c0:	eb04 0803 	add.w	r8, r4, r3
 80055c4:	f000 fb36 	bl	8005c34 <_sbrk_r>
 80055c8:	4580      	cmp	r8, r0
 80055ca:	d13a      	bne.n	8005642 <_malloc_r+0xd2>
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	3503      	adds	r5, #3
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa5 	bl	8005530 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d02b      	beq.n	8005642 <_malloc_r+0xd2>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	e00e      	b.n	8005610 <_malloc_r+0xa0>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	1b52      	subs	r2, r2, r5
 80055f6:	d41e      	bmi.n	8005636 <_malloc_r+0xc6>
 80055f8:	2a0b      	cmp	r2, #11
 80055fa:	d916      	bls.n	800562a <_malloc_r+0xba>
 80055fc:	1961      	adds	r1, r4, r5
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	bf18      	it	ne
 8005604:	6059      	strne	r1, [r3, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	bf08      	it	eq
 800560a:	6031      	streq	r1, [r6, #0]
 800560c:	5162      	str	r2, [r4, r5]
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	4638      	mov	r0, r7
 8005612:	f104 060b 	add.w	r6, r4, #11
 8005616:	f000 fd83 	bl	8006120 <__malloc_unlock>
 800561a:	f026 0607 	bic.w	r6, r6, #7
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	1af2      	subs	r2, r6, r3
 8005622:	d0b6      	beq.n	8005592 <_malloc_r+0x22>
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	50a3      	str	r3, [r4, r2]
 8005628:	e7b3      	b.n	8005592 <_malloc_r+0x22>
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	42a3      	cmp	r3, r4
 800562e:	bf0c      	ite	eq
 8005630:	6032      	streq	r2, [r6, #0]
 8005632:	605a      	strne	r2, [r3, #4]
 8005634:	e7ec      	b.n	8005610 <_malloc_r+0xa0>
 8005636:	4623      	mov	r3, r4
 8005638:	6864      	ldr	r4, [r4, #4]
 800563a:	e7b2      	b.n	80055a2 <_malloc_r+0x32>
 800563c:	4634      	mov	r4, r6
 800563e:	6876      	ldr	r6, [r6, #4]
 8005640:	e7b9      	b.n	80055b6 <_malloc_r+0x46>
 8005642:	230c      	movs	r3, #12
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4638      	mov	r0, r7
 8005648:	f000 fd6a 	bl	8006120 <__malloc_unlock>
 800564c:	e7a1      	b.n	8005592 <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7de      	b.n	8005610 <_malloc_r+0xa0>
 8005652:	bf00      	nop
 8005654:	20000218 	.word	0x20000218

08005658 <__sfputc_r>:
 8005658:	6893      	ldr	r3, [r2, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	b410      	push	{r4}
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	da08      	bge.n	8005676 <__sfputc_r+0x1e>
 8005664:	6994      	ldr	r4, [r2, #24]
 8005666:	42a3      	cmp	r3, r4
 8005668:	db01      	blt.n	800566e <__sfputc_r+0x16>
 800566a:	290a      	cmp	r1, #10
 800566c:	d103      	bne.n	8005676 <__sfputc_r+0x1e>
 800566e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005672:	f000 bb33 	b.w	8005cdc <__swbuf_r>
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	1c58      	adds	r0, r3, #1
 800567a:	6010      	str	r0, [r2, #0]
 800567c:	7019      	strb	r1, [r3, #0]
 800567e:	4608      	mov	r0, r1
 8005680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005684:	4770      	bx	lr

08005686 <__sfputs_r>:
 8005686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	4614      	mov	r4, r2
 800568e:	18d5      	adds	r5, r2, r3
 8005690:	42ac      	cmp	r4, r5
 8005692:	d101      	bne.n	8005698 <__sfputs_r+0x12>
 8005694:	2000      	movs	r0, #0
 8005696:	e007      	b.n	80056a8 <__sfputs_r+0x22>
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	463a      	mov	r2, r7
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff ffda 	bl	8005658 <__sfputc_r>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d1f3      	bne.n	8005690 <__sfputs_r+0xa>
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056ac <_vfiprintf_r>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	b09d      	sub	sp, #116	; 0x74
 80056b4:	4614      	mov	r4, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	4606      	mov	r6, r0
 80056ba:	b118      	cbz	r0, 80056c4 <_vfiprintf_r+0x18>
 80056bc:	6983      	ldr	r3, [r0, #24]
 80056be:	b90b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x18>
 80056c0:	f7ff fe96 	bl	80053f0 <__sinit>
 80056c4:	4b89      	ldr	r3, [pc, #548]	; (80058ec <_vfiprintf_r+0x240>)
 80056c6:	429d      	cmp	r5, r3
 80056c8:	d11b      	bne.n	8005702 <_vfiprintf_r+0x56>
 80056ca:	6875      	ldr	r5, [r6, #4]
 80056cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ce:	07d9      	lsls	r1, r3, #31
 80056d0:	d405      	bmi.n	80056de <_vfiprintf_r+0x32>
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	059a      	lsls	r2, r3, #22
 80056d6:	d402      	bmi.n	80056de <_vfiprintf_r+0x32>
 80056d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056da:	f7ff ff27 	bl	800552c <__retarget_lock_acquire_recursive>
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	071b      	lsls	r3, r3, #28
 80056e2:	d501      	bpl.n	80056e8 <_vfiprintf_r+0x3c>
 80056e4:	692b      	ldr	r3, [r5, #16]
 80056e6:	b9eb      	cbnz	r3, 8005724 <_vfiprintf_r+0x78>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 fb5a 	bl	8005da4 <__swsetup_r>
 80056f0:	b1c0      	cbz	r0, 8005724 <_vfiprintf_r+0x78>
 80056f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f4:	07dc      	lsls	r4, r3, #31
 80056f6:	d50e      	bpl.n	8005716 <_vfiprintf_r+0x6a>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	b01d      	add	sp, #116	; 0x74
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	4b7b      	ldr	r3, [pc, #492]	; (80058f0 <_vfiprintf_r+0x244>)
 8005704:	429d      	cmp	r5, r3
 8005706:	d101      	bne.n	800570c <_vfiprintf_r+0x60>
 8005708:	68b5      	ldr	r5, [r6, #8]
 800570a:	e7df      	b.n	80056cc <_vfiprintf_r+0x20>
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <_vfiprintf_r+0x248>)
 800570e:	429d      	cmp	r5, r3
 8005710:	bf08      	it	eq
 8005712:	68f5      	ldreq	r5, [r6, #12]
 8005714:	e7da      	b.n	80056cc <_vfiprintf_r+0x20>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	0598      	lsls	r0, r3, #22
 800571a:	d4ed      	bmi.n	80056f8 <_vfiprintf_r+0x4c>
 800571c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571e:	f7ff ff06 	bl	800552e <__retarget_lock_release_recursive>
 8005722:	e7e9      	b.n	80056f8 <_vfiprintf_r+0x4c>
 8005724:	2300      	movs	r3, #0
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	2320      	movs	r3, #32
 800572a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005732:	2330      	movs	r3, #48	; 0x30
 8005734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058f8 <_vfiprintf_r+0x24c>
 8005738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800573c:	f04f 0901 	mov.w	r9, #1
 8005740:	4623      	mov	r3, r4
 8005742:	469a      	mov	sl, r3
 8005744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005748:	b10a      	cbz	r2, 800574e <_vfiprintf_r+0xa2>
 800574a:	2a25      	cmp	r2, #37	; 0x25
 800574c:	d1f9      	bne.n	8005742 <_vfiprintf_r+0x96>
 800574e:	ebba 0b04 	subs.w	fp, sl, r4
 8005752:	d00b      	beq.n	800576c <_vfiprintf_r+0xc0>
 8005754:	465b      	mov	r3, fp
 8005756:	4622      	mov	r2, r4
 8005758:	4629      	mov	r1, r5
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ff93 	bl	8005686 <__sfputs_r>
 8005760:	3001      	adds	r0, #1
 8005762:	f000 80aa 	beq.w	80058ba <_vfiprintf_r+0x20e>
 8005766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005768:	445a      	add	r2, fp
 800576a:	9209      	str	r2, [sp, #36]	; 0x24
 800576c:	f89a 3000 	ldrb.w	r3, [sl]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80a2 	beq.w	80058ba <_vfiprintf_r+0x20e>
 8005776:	2300      	movs	r3, #0
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005780:	f10a 0a01 	add.w	sl, sl, #1
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	9307      	str	r3, [sp, #28]
 8005788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800578c:	931a      	str	r3, [sp, #104]	; 0x68
 800578e:	4654      	mov	r4, sl
 8005790:	2205      	movs	r2, #5
 8005792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005796:	4858      	ldr	r0, [pc, #352]	; (80058f8 <_vfiprintf_r+0x24c>)
 8005798:	f7fa fd22 	bl	80001e0 <memchr>
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	b9d8      	cbnz	r0, 80057d8 <_vfiprintf_r+0x12c>
 80057a0:	06d1      	lsls	r1, r2, #27
 80057a2:	bf44      	itt	mi
 80057a4:	2320      	movmi	r3, #32
 80057a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057aa:	0713      	lsls	r3, r2, #28
 80057ac:	bf44      	itt	mi
 80057ae:	232b      	movmi	r3, #43	; 0x2b
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b4:	f89a 3000 	ldrb.w	r3, [sl]
 80057b8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ba:	d015      	beq.n	80057e8 <_vfiprintf_r+0x13c>
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	4654      	mov	r4, sl
 80057c0:	2000      	movs	r0, #0
 80057c2:	f04f 0c0a 	mov.w	ip, #10
 80057c6:	4621      	mov	r1, r4
 80057c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057cc:	3b30      	subs	r3, #48	; 0x30
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d94e      	bls.n	8005870 <_vfiprintf_r+0x1c4>
 80057d2:	b1b0      	cbz	r0, 8005802 <_vfiprintf_r+0x156>
 80057d4:	9207      	str	r2, [sp, #28]
 80057d6:	e014      	b.n	8005802 <_vfiprintf_r+0x156>
 80057d8:	eba0 0308 	sub.w	r3, r0, r8
 80057dc:	fa09 f303 	lsl.w	r3, r9, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	46a2      	mov	sl, r4
 80057e6:	e7d2      	b.n	800578e <_vfiprintf_r+0xe2>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	1d19      	adds	r1, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	9103      	str	r1, [sp, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bfbb      	ittet	lt
 80057f4:	425b      	neglt	r3, r3
 80057f6:	f042 0202 	orrlt.w	r2, r2, #2
 80057fa:	9307      	strge	r3, [sp, #28]
 80057fc:	9307      	strlt	r3, [sp, #28]
 80057fe:	bfb8      	it	lt
 8005800:	9204      	strlt	r2, [sp, #16]
 8005802:	7823      	ldrb	r3, [r4, #0]
 8005804:	2b2e      	cmp	r3, #46	; 0x2e
 8005806:	d10c      	bne.n	8005822 <_vfiprintf_r+0x176>
 8005808:	7863      	ldrb	r3, [r4, #1]
 800580a:	2b2a      	cmp	r3, #42	; 0x2a
 800580c:	d135      	bne.n	800587a <_vfiprintf_r+0x1ce>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d1a      	adds	r2, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9203      	str	r2, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfb8      	it	lt
 800581a:	f04f 33ff 	movlt.w	r3, #4294967295
 800581e:	3402      	adds	r4, #2
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005908 <_vfiprintf_r+0x25c>
 8005826:	7821      	ldrb	r1, [r4, #0]
 8005828:	2203      	movs	r2, #3
 800582a:	4650      	mov	r0, sl
 800582c:	f7fa fcd8 	bl	80001e0 <memchr>
 8005830:	b140      	cbz	r0, 8005844 <_vfiprintf_r+0x198>
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	eba0 000a 	sub.w	r0, r0, sl
 8005838:	fa03 f000 	lsl.w	r0, r3, r0
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	4303      	orrs	r3, r0
 8005840:	3401      	adds	r4, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	482c      	ldr	r0, [pc, #176]	; (80058fc <_vfiprintf_r+0x250>)
 800584a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584e:	2206      	movs	r2, #6
 8005850:	f7fa fcc6 	bl	80001e0 <memchr>
 8005854:	2800      	cmp	r0, #0
 8005856:	d03f      	beq.n	80058d8 <_vfiprintf_r+0x22c>
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <_vfiprintf_r+0x254>)
 800585a:	bb1b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x1f8>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	3307      	adds	r3, #7
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	3308      	adds	r3, #8
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	443b      	add	r3, r7
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	e767      	b.n	8005740 <_vfiprintf_r+0x94>
 8005870:	fb0c 3202 	mla	r2, ip, r2, r3
 8005874:	460c      	mov	r4, r1
 8005876:	2001      	movs	r0, #1
 8005878:	e7a5      	b.n	80057c6 <_vfiprintf_r+0x11a>
 800587a:	2300      	movs	r3, #0
 800587c:	3401      	adds	r4, #1
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	4619      	mov	r1, r3
 8005882:	f04f 0c0a 	mov.w	ip, #10
 8005886:	4620      	mov	r0, r4
 8005888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800588c:	3a30      	subs	r2, #48	; 0x30
 800588e:	2a09      	cmp	r2, #9
 8005890:	d903      	bls.n	800589a <_vfiprintf_r+0x1ee>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0c5      	beq.n	8005822 <_vfiprintf_r+0x176>
 8005896:	9105      	str	r1, [sp, #20]
 8005898:	e7c3      	b.n	8005822 <_vfiprintf_r+0x176>
 800589a:	fb0c 2101 	mla	r1, ip, r1, r2
 800589e:	4604      	mov	r4, r0
 80058a0:	2301      	movs	r3, #1
 80058a2:	e7f0      	b.n	8005886 <_vfiprintf_r+0x1da>
 80058a4:	ab03      	add	r3, sp, #12
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <_vfiprintf_r+0x258>)
 80058ac:	a904      	add	r1, sp, #16
 80058ae:	4630      	mov	r0, r6
 80058b0:	f3af 8000 	nop.w
 80058b4:	4607      	mov	r7, r0
 80058b6:	1c78      	adds	r0, r7, #1
 80058b8:	d1d6      	bne.n	8005868 <_vfiprintf_r+0x1bc>
 80058ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058bc:	07d9      	lsls	r1, r3, #31
 80058be:	d405      	bmi.n	80058cc <_vfiprintf_r+0x220>
 80058c0:	89ab      	ldrh	r3, [r5, #12]
 80058c2:	059a      	lsls	r2, r3, #22
 80058c4:	d402      	bmi.n	80058cc <_vfiprintf_r+0x220>
 80058c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c8:	f7ff fe31 	bl	800552e <__retarget_lock_release_recursive>
 80058cc:	89ab      	ldrh	r3, [r5, #12]
 80058ce:	065b      	lsls	r3, r3, #25
 80058d0:	f53f af12 	bmi.w	80056f8 <_vfiprintf_r+0x4c>
 80058d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d6:	e711      	b.n	80056fc <_vfiprintf_r+0x50>
 80058d8:	ab03      	add	r3, sp, #12
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	462a      	mov	r2, r5
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <_vfiprintf_r+0x258>)
 80058e0:	a904      	add	r1, sp, #16
 80058e2:	4630      	mov	r0, r6
 80058e4:	f000 f880 	bl	80059e8 <_printf_i>
 80058e8:	e7e4      	b.n	80058b4 <_vfiprintf_r+0x208>
 80058ea:	bf00      	nop
 80058ec:	080066b4 	.word	0x080066b4
 80058f0:	080066d4 	.word	0x080066d4
 80058f4:	08006694 	.word	0x08006694
 80058f8:	080066f4 	.word	0x080066f4
 80058fc:	080066fe 	.word	0x080066fe
 8005900:	00000000 	.word	0x00000000
 8005904:	08005687 	.word	0x08005687
 8005908:	080066fa 	.word	0x080066fa

0800590c <_printf_common>:
 800590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	4616      	mov	r6, r2
 8005912:	4699      	mov	r9, r3
 8005914:	688a      	ldr	r2, [r1, #8]
 8005916:	690b      	ldr	r3, [r1, #16]
 8005918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800591c:	4293      	cmp	r3, r2
 800591e:	bfb8      	it	lt
 8005920:	4613      	movlt	r3, r2
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005928:	4607      	mov	r7, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b10a      	cbz	r2, 8005932 <_printf_common+0x26>
 800592e:	3301      	adds	r3, #1
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	0699      	lsls	r1, r3, #26
 8005936:	bf42      	ittt	mi
 8005938:	6833      	ldrmi	r3, [r6, #0]
 800593a:	3302      	addmi	r3, #2
 800593c:	6033      	strmi	r3, [r6, #0]
 800593e:	6825      	ldr	r5, [r4, #0]
 8005940:	f015 0506 	ands.w	r5, r5, #6
 8005944:	d106      	bne.n	8005954 <_printf_common+0x48>
 8005946:	f104 0a19 	add.w	sl, r4, #25
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	6832      	ldr	r2, [r6, #0]
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc26      	bgt.n	80059a2 <_printf_common+0x96>
 8005954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005958:	1e13      	subs	r3, r2, #0
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	bf18      	it	ne
 800595e:	2301      	movne	r3, #1
 8005960:	0692      	lsls	r2, r2, #26
 8005962:	d42b      	bmi.n	80059bc <_printf_common+0xb0>
 8005964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005968:	4649      	mov	r1, r9
 800596a:	4638      	mov	r0, r7
 800596c:	47c0      	blx	r8
 800596e:	3001      	adds	r0, #1
 8005970:	d01e      	beq.n	80059b0 <_printf_common+0xa4>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	68e5      	ldr	r5, [r4, #12]
 8005976:	6832      	ldr	r2, [r6, #0]
 8005978:	f003 0306 	and.w	r3, r3, #6
 800597c:	2b04      	cmp	r3, #4
 800597e:	bf08      	it	eq
 8005980:	1aad      	subeq	r5, r5, r2
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	bf0c      	ite	eq
 8005988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800598c:	2500      	movne	r5, #0
 800598e:	4293      	cmp	r3, r2
 8005990:	bfc4      	itt	gt
 8005992:	1a9b      	subgt	r3, r3, r2
 8005994:	18ed      	addgt	r5, r5, r3
 8005996:	2600      	movs	r6, #0
 8005998:	341a      	adds	r4, #26
 800599a:	42b5      	cmp	r5, r6
 800599c:	d11a      	bne.n	80059d4 <_printf_common+0xc8>
 800599e:	2000      	movs	r0, #0
 80059a0:	e008      	b.n	80059b4 <_printf_common+0xa8>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4649      	mov	r1, r9
 80059a8:	4638      	mov	r0, r7
 80059aa:	47c0      	blx	r8
 80059ac:	3001      	adds	r0, #1
 80059ae:	d103      	bne.n	80059b8 <_printf_common+0xac>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	3501      	adds	r5, #1
 80059ba:	e7c6      	b.n	800594a <_printf_common+0x3e>
 80059bc:	18e1      	adds	r1, r4, r3
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	2030      	movs	r0, #48	; 0x30
 80059c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059c6:	4422      	add	r2, r4
 80059c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d0:	3302      	adds	r3, #2
 80059d2:	e7c7      	b.n	8005964 <_printf_common+0x58>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4622      	mov	r2, r4
 80059d8:	4649      	mov	r1, r9
 80059da:	4638      	mov	r0, r7
 80059dc:	47c0      	blx	r8
 80059de:	3001      	adds	r0, #1
 80059e0:	d0e6      	beq.n	80059b0 <_printf_common+0xa4>
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7d9      	b.n	800599a <_printf_common+0x8e>
	...

080059e8 <_printf_i>:
 80059e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	7e0f      	ldrb	r7, [r1, #24]
 80059ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f0:	2f78      	cmp	r7, #120	; 0x78
 80059f2:	4691      	mov	r9, r2
 80059f4:	4680      	mov	r8, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	469a      	mov	sl, r3
 80059fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059fe:	d807      	bhi.n	8005a10 <_printf_i+0x28>
 8005a00:	2f62      	cmp	r7, #98	; 0x62
 8005a02:	d80a      	bhi.n	8005a1a <_printf_i+0x32>
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	f000 80d8 	beq.w	8005bba <_printf_i+0x1d2>
 8005a0a:	2f58      	cmp	r7, #88	; 0x58
 8005a0c:	f000 80a3 	beq.w	8005b56 <_printf_i+0x16e>
 8005a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a18:	e03a      	b.n	8005a90 <_printf_i+0xa8>
 8005a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a1e:	2b15      	cmp	r3, #21
 8005a20:	d8f6      	bhi.n	8005a10 <_printf_i+0x28>
 8005a22:	a101      	add	r1, pc, #4	; (adr r1, 8005a28 <_printf_i+0x40>)
 8005a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a11 	.word	0x08005a11
 8005a34:	08005a11 	.word	0x08005a11
 8005a38:	08005a11 	.word	0x08005a11
 8005a3c:	08005a11 	.word	0x08005a11
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	08005a11 	.word	0x08005a11
 8005a48:	08005a11 	.word	0x08005a11
 8005a4c:	08005a11 	.word	0x08005a11
 8005a50:	08005a11 	.word	0x08005a11
 8005a54:	08005ba1 	.word	0x08005ba1
 8005a58:	08005ac5 	.word	0x08005ac5
 8005a5c:	08005b83 	.word	0x08005b83
 8005a60:	08005a11 	.word	0x08005a11
 8005a64:	08005a11 	.word	0x08005a11
 8005a68:	08005bc3 	.word	0x08005bc3
 8005a6c:	08005a11 	.word	0x08005a11
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005a11 	.word	0x08005a11
 8005a78:	08005a11 	.word	0x08005a11
 8005a7c:	08005b8b 	.word	0x08005b8b
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	602a      	str	r2, [r5, #0]
 8005a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0a3      	b.n	8005bdc <_printf_i+0x1f4>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	6829      	ldr	r1, [r5, #0]
 8005a98:	0606      	lsls	r6, r0, #24
 8005a9a:	f101 0304 	add.w	r3, r1, #4
 8005a9e:	d50a      	bpl.n	8005ab6 <_printf_i+0xce>
 8005aa0:	680e      	ldr	r6, [r1, #0]
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	da03      	bge.n	8005ab0 <_printf_i+0xc8>
 8005aa8:	232d      	movs	r3, #45	; 0x2d
 8005aaa:	4276      	negs	r6, r6
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab0:	485e      	ldr	r0, [pc, #376]	; (8005c2c <_printf_i+0x244>)
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	e019      	b.n	8005aea <_printf_i+0x102>
 8005ab6:	680e      	ldr	r6, [r1, #0]
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005abe:	bf18      	it	ne
 8005ac0:	b236      	sxthne	r6, r6
 8005ac2:	e7ef      	b.n	8005aa4 <_printf_i+0xbc>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	6029      	str	r1, [r5, #0]
 8005acc:	0601      	lsls	r1, r0, #24
 8005ace:	d501      	bpl.n	8005ad4 <_printf_i+0xec>
 8005ad0:	681e      	ldr	r6, [r3, #0]
 8005ad2:	e002      	b.n	8005ada <_printf_i+0xf2>
 8005ad4:	0646      	lsls	r6, r0, #25
 8005ad6:	d5fb      	bpl.n	8005ad0 <_printf_i+0xe8>
 8005ad8:	881e      	ldrh	r6, [r3, #0]
 8005ada:	4854      	ldr	r0, [pc, #336]	; (8005c2c <_printf_i+0x244>)
 8005adc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ade:	bf0c      	ite	eq
 8005ae0:	2308      	moveq	r3, #8
 8005ae2:	230a      	movne	r3, #10
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aea:	6865      	ldr	r5, [r4, #4]
 8005aec:	60a5      	str	r5, [r4, #8]
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	bfa2      	ittt	ge
 8005af2:	6821      	ldrge	r1, [r4, #0]
 8005af4:	f021 0104 	bicge.w	r1, r1, #4
 8005af8:	6021      	strge	r1, [r4, #0]
 8005afa:	b90e      	cbnz	r6, 8005b00 <_printf_i+0x118>
 8005afc:	2d00      	cmp	r5, #0
 8005afe:	d04d      	beq.n	8005b9c <_printf_i+0x1b4>
 8005b00:	4615      	mov	r5, r2
 8005b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b06:	fb03 6711 	mls	r7, r3, r1, r6
 8005b0a:	5dc7      	ldrb	r7, [r0, r7]
 8005b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b10:	4637      	mov	r7, r6
 8005b12:	42bb      	cmp	r3, r7
 8005b14:	460e      	mov	r6, r1
 8005b16:	d9f4      	bls.n	8005b02 <_printf_i+0x11a>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d10b      	bne.n	8005b34 <_printf_i+0x14c>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07de      	lsls	r6, r3, #31
 8005b20:	d508      	bpl.n	8005b34 <_printf_i+0x14c>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	6861      	ldr	r1, [r4, #4]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	bfde      	ittt	le
 8005b2a:	2330      	movle	r3, #48	; 0x30
 8005b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b34:	1b52      	subs	r2, r2, r5
 8005b36:	6122      	str	r2, [r4, #16]
 8005b38:	f8cd a000 	str.w	sl, [sp]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	aa03      	add	r2, sp, #12
 8005b40:	4621      	mov	r1, r4
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fee2 	bl	800590c <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d14c      	bne.n	8005be6 <_printf_i+0x1fe>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b004      	add	sp, #16
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	4835      	ldr	r0, [pc, #212]	; (8005c2c <_printf_i+0x244>)
 8005b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b5c:	6829      	ldr	r1, [r5, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b64:	6029      	str	r1, [r5, #0]
 8005b66:	061d      	lsls	r5, r3, #24
 8005b68:	d514      	bpl.n	8005b94 <_printf_i+0x1ac>
 8005b6a:	07df      	lsls	r7, r3, #31
 8005b6c:	bf44      	itt	mi
 8005b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b72:	6023      	strmi	r3, [r4, #0]
 8005b74:	b91e      	cbnz	r6, 8005b7e <_printf_i+0x196>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	f023 0320 	bic.w	r3, r3, #32
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	2310      	movs	r3, #16
 8005b80:	e7b0      	b.n	8005ae4 <_printf_i+0xfc>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	f043 0320 	orr.w	r3, r3, #32
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	2378      	movs	r3, #120	; 0x78
 8005b8c:	4828      	ldr	r0, [pc, #160]	; (8005c30 <_printf_i+0x248>)
 8005b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b92:	e7e3      	b.n	8005b5c <_printf_i+0x174>
 8005b94:	0659      	lsls	r1, r3, #25
 8005b96:	bf48      	it	mi
 8005b98:	b2b6      	uxthmi	r6, r6
 8005b9a:	e7e6      	b.n	8005b6a <_printf_i+0x182>
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	e7bb      	b.n	8005b18 <_printf_i+0x130>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6826      	ldr	r6, [r4, #0]
 8005ba4:	6961      	ldr	r1, [r4, #20]
 8005ba6:	1d18      	adds	r0, r3, #4
 8005ba8:	6028      	str	r0, [r5, #0]
 8005baa:	0635      	lsls	r5, r6, #24
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	d501      	bpl.n	8005bb4 <_printf_i+0x1cc>
 8005bb0:	6019      	str	r1, [r3, #0]
 8005bb2:	e002      	b.n	8005bba <_printf_i+0x1d2>
 8005bb4:	0670      	lsls	r0, r6, #25
 8005bb6:	d5fb      	bpl.n	8005bb0 <_printf_i+0x1c8>
 8005bb8:	8019      	strh	r1, [r3, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	4615      	mov	r5, r2
 8005bc0:	e7ba      	b.n	8005b38 <_printf_i+0x150>
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	1d1a      	adds	r2, r3, #4
 8005bc6:	602a      	str	r2, [r5, #0]
 8005bc8:	681d      	ldr	r5, [r3, #0]
 8005bca:	6862      	ldr	r2, [r4, #4]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7fa fb06 	bl	80001e0 <memchr>
 8005bd4:	b108      	cbz	r0, 8005bda <_printf_i+0x1f2>
 8005bd6:	1b40      	subs	r0, r0, r5
 8005bd8:	6060      	str	r0, [r4, #4]
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	2300      	movs	r3, #0
 8005be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be4:	e7a8      	b.n	8005b38 <_printf_i+0x150>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	462a      	mov	r2, r5
 8005bea:	4649      	mov	r1, r9
 8005bec:	4640      	mov	r0, r8
 8005bee:	47d0      	blx	sl
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d0ab      	beq.n	8005b4c <_printf_i+0x164>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	079b      	lsls	r3, r3, #30
 8005bf8:	d413      	bmi.n	8005c22 <_printf_i+0x23a>
 8005bfa:	68e0      	ldr	r0, [r4, #12]
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	bfb8      	it	lt
 8005c02:	4618      	movlt	r0, r3
 8005c04:	e7a4      	b.n	8005b50 <_printf_i+0x168>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4632      	mov	r2, r6
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	47d0      	blx	sl
 8005c10:	3001      	adds	r0, #1
 8005c12:	d09b      	beq.n	8005b4c <_printf_i+0x164>
 8005c14:	3501      	adds	r5, #1
 8005c16:	68e3      	ldr	r3, [r4, #12]
 8005c18:	9903      	ldr	r1, [sp, #12]
 8005c1a:	1a5b      	subs	r3, r3, r1
 8005c1c:	42ab      	cmp	r3, r5
 8005c1e:	dcf2      	bgt.n	8005c06 <_printf_i+0x21e>
 8005c20:	e7eb      	b.n	8005bfa <_printf_i+0x212>
 8005c22:	2500      	movs	r5, #0
 8005c24:	f104 0619 	add.w	r6, r4, #25
 8005c28:	e7f5      	b.n	8005c16 <_printf_i+0x22e>
 8005c2a:	bf00      	nop
 8005c2c:	08006705 	.word	0x08006705
 8005c30:	08006716 	.word	0x08006716

08005c34 <_sbrk_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_sbrk_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc f860 	bl	8001d04 <_sbrk>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_sbrk_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_sbrk_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000220 	.word	0x20000220

08005c54 <__sread>:
 8005c54:	b510      	push	{r4, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	f000 fab2 	bl	80061c4 <_read_r>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	bfab      	itete	ge
 8005c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c66:	89a3      	ldrhlt	r3, [r4, #12]
 8005c68:	181b      	addge	r3, r3, r0
 8005c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c6e:	bfac      	ite	ge
 8005c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c72:	81a3      	strhlt	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__swrite>:
 8005c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	461f      	mov	r7, r3
 8005c7c:	898b      	ldrh	r3, [r1, #12]
 8005c7e:	05db      	lsls	r3, r3, #23
 8005c80:	4605      	mov	r5, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4616      	mov	r6, r2
 8005c86:	d505      	bpl.n	8005c94 <__swrite+0x1e>
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f000 f9c8 	bl	8006024 <_lseek_r>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	f000 b869 	b.w	8005d80 <_write_r>

08005cae <__sseek>:
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb6:	f000 f9b5 	bl	8006024 <_lseek_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	bf15      	itete	ne
 8005cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cca:	81a3      	strheq	r3, [r4, #12]
 8005ccc:	bf18      	it	ne
 8005cce:	81a3      	strhne	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__sclose>:
 8005cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd6:	f000 b8d3 	b.w	8005e80 <_close_r>
	...

08005cdc <__swbuf_r>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	460e      	mov	r6, r1
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	b118      	cbz	r0, 8005cee <__swbuf_r+0x12>
 8005ce6:	6983      	ldr	r3, [r0, #24]
 8005ce8:	b90b      	cbnz	r3, 8005cee <__swbuf_r+0x12>
 8005cea:	f7ff fb81 	bl	80053f0 <__sinit>
 8005cee:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <__swbuf_r+0x98>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	d12b      	bne.n	8005d4c <__swbuf_r+0x70>
 8005cf4:	686c      	ldr	r4, [r5, #4]
 8005cf6:	69a3      	ldr	r3, [r4, #24]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	071a      	lsls	r2, r3, #28
 8005cfe:	d52f      	bpl.n	8005d60 <__swbuf_r+0x84>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	b36b      	cbz	r3, 8005d60 <__swbuf_r+0x84>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	1ac0      	subs	r0, r0, r3
 8005d0a:	6963      	ldr	r3, [r4, #20]
 8005d0c:	b2f6      	uxtb	r6, r6
 8005d0e:	4283      	cmp	r3, r0
 8005d10:	4637      	mov	r7, r6
 8005d12:	dc04      	bgt.n	8005d1e <__swbuf_r+0x42>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 f948 	bl	8005fac <_fflush_r>
 8005d1c:	bb30      	cbnz	r0, 8005d6c <__swbuf_r+0x90>
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	701e      	strb	r6, [r3, #0]
 8005d2c:	6963      	ldr	r3, [r4, #20]
 8005d2e:	3001      	adds	r0, #1
 8005d30:	4283      	cmp	r3, r0
 8005d32:	d004      	beq.n	8005d3e <__swbuf_r+0x62>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d506      	bpl.n	8005d48 <__swbuf_r+0x6c>
 8005d3a:	2e0a      	cmp	r6, #10
 8005d3c:	d104      	bne.n	8005d48 <__swbuf_r+0x6c>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 f933 	bl	8005fac <_fflush_r>
 8005d46:	b988      	cbnz	r0, 8005d6c <__swbuf_r+0x90>
 8005d48:	4638      	mov	r0, r7
 8005d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <__swbuf_r+0x9c>)
 8005d4e:	429c      	cmp	r4, r3
 8005d50:	d101      	bne.n	8005d56 <__swbuf_r+0x7a>
 8005d52:	68ac      	ldr	r4, [r5, #8]
 8005d54:	e7cf      	b.n	8005cf6 <__swbuf_r+0x1a>
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <__swbuf_r+0xa0>)
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	bf08      	it	eq
 8005d5c:	68ec      	ldreq	r4, [r5, #12]
 8005d5e:	e7ca      	b.n	8005cf6 <__swbuf_r+0x1a>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f81e 	bl	8005da4 <__swsetup_r>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d0cb      	beq.n	8005d04 <__swbuf_r+0x28>
 8005d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d70:	e7ea      	b.n	8005d48 <__swbuf_r+0x6c>
 8005d72:	bf00      	nop
 8005d74:	080066b4 	.word	0x080066b4
 8005d78:	080066d4 	.word	0x080066d4
 8005d7c:	08006694 	.word	0x08006694

08005d80 <_write_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	; (8005da0 <_write_r+0x20>)
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fb ff67 	bl	8001c62 <_write>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_write_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_write_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20000220 	.word	0x20000220

08005da4 <__swsetup_r>:
 8005da4:	4b32      	ldr	r3, [pc, #200]	; (8005e70 <__swsetup_r+0xcc>)
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	681d      	ldr	r5, [r3, #0]
 8005daa:	4606      	mov	r6, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	b125      	cbz	r5, 8005dba <__swsetup_r+0x16>
 8005db0:	69ab      	ldr	r3, [r5, #24]
 8005db2:	b913      	cbnz	r3, 8005dba <__swsetup_r+0x16>
 8005db4:	4628      	mov	r0, r5
 8005db6:	f7ff fb1b 	bl	80053f0 <__sinit>
 8005dba:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <__swsetup_r+0xd0>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	d10f      	bne.n	8005de0 <__swsetup_r+0x3c>
 8005dc0:	686c      	ldr	r4, [r5, #4]
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dc8:	0719      	lsls	r1, r3, #28
 8005dca:	d42c      	bmi.n	8005e26 <__swsetup_r+0x82>
 8005dcc:	06dd      	lsls	r5, r3, #27
 8005dce:	d411      	bmi.n	8005df4 <__swsetup_r+0x50>
 8005dd0:	2309      	movs	r3, #9
 8005dd2:	6033      	str	r3, [r6, #0]
 8005dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295
 8005dde:	e03e      	b.n	8005e5e <__swsetup_r+0xba>
 8005de0:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <__swsetup_r+0xd4>)
 8005de2:	429c      	cmp	r4, r3
 8005de4:	d101      	bne.n	8005dea <__swsetup_r+0x46>
 8005de6:	68ac      	ldr	r4, [r5, #8]
 8005de8:	e7eb      	b.n	8005dc2 <__swsetup_r+0x1e>
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <__swsetup_r+0xd8>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	bf08      	it	eq
 8005df0:	68ec      	ldreq	r4, [r5, #12]
 8005df2:	e7e6      	b.n	8005dc2 <__swsetup_r+0x1e>
 8005df4:	0758      	lsls	r0, r3, #29
 8005df6:	d512      	bpl.n	8005e1e <__swsetup_r+0x7a>
 8005df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfa:	b141      	cbz	r1, 8005e0e <__swsetup_r+0x6a>
 8005dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e00:	4299      	cmp	r1, r3
 8005e02:	d002      	beq.n	8005e0a <__swsetup_r+0x66>
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 f991 	bl	800612c <_free_r>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	2300      	movs	r3, #0
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f043 0308 	orr.w	r3, r3, #8
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	b94b      	cbnz	r3, 8005e3e <__swsetup_r+0x9a>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e34:	d003      	beq.n	8005e3e <__swsetup_r+0x9a>
 8005e36:	4621      	mov	r1, r4
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 f92b 	bl	8006094 <__smakebuf_r>
 8005e3e:	89a0      	ldrh	r0, [r4, #12]
 8005e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e44:	f010 0301 	ands.w	r3, r0, #1
 8005e48:	d00a      	beq.n	8005e60 <__swsetup_r+0xbc>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60a3      	str	r3, [r4, #8]
 8005e4e:	6963      	ldr	r3, [r4, #20]
 8005e50:	425b      	negs	r3, r3
 8005e52:	61a3      	str	r3, [r4, #24]
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	b943      	cbnz	r3, 8005e6a <__swsetup_r+0xc6>
 8005e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e5c:	d1ba      	bne.n	8005dd4 <__swsetup_r+0x30>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	0781      	lsls	r1, r0, #30
 8005e62:	bf58      	it	pl
 8005e64:	6963      	ldrpl	r3, [r4, #20]
 8005e66:	60a3      	str	r3, [r4, #8]
 8005e68:	e7f4      	b.n	8005e54 <__swsetup_r+0xb0>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e7f7      	b.n	8005e5e <__swsetup_r+0xba>
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c
 8005e74:	080066b4 	.word	0x080066b4
 8005e78:	080066d4 	.word	0x080066d4
 8005e7c:	08006694 	.word	0x08006694

08005e80 <_close_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d06      	ldr	r5, [pc, #24]	; (8005e9c <_close_r+0x1c>)
 8005e84:	2300      	movs	r3, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	f7fb ff05 	bl	8001c9a <_close>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_close_r+0x1a>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_close_r+0x1a>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20000220 	.word	0x20000220

08005ea0 <__sflush_r>:
 8005ea0:	898a      	ldrh	r2, [r1, #12]
 8005ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	0710      	lsls	r0, r2, #28
 8005eaa:	460c      	mov	r4, r1
 8005eac:	d458      	bmi.n	8005f60 <__sflush_r+0xc0>
 8005eae:	684b      	ldr	r3, [r1, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dc05      	bgt.n	8005ec0 <__sflush_r+0x20>
 8005eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dc02      	bgt.n	8005ec0 <__sflush_r+0x20>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d0f9      	beq.n	8005eba <__sflush_r+0x1a>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ecc:	682f      	ldr	r7, [r5, #0]
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	d032      	beq.n	8005f38 <__sflush_r+0x98>
 8005ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	075a      	lsls	r2, r3, #29
 8005ed8:	d505      	bpl.n	8005ee6 <__sflush_r+0x46>
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee0:	b10b      	cbz	r3, 8005ee6 <__sflush_r+0x46>
 8005ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee4:	1ac0      	subs	r0, r0, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eec:	6a21      	ldr	r1, [r4, #32]
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b0      	blx	r6
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	d106      	bne.n	8005f06 <__sflush_r+0x66>
 8005ef8:	6829      	ldr	r1, [r5, #0]
 8005efa:	291d      	cmp	r1, #29
 8005efc:	d82c      	bhi.n	8005f58 <__sflush_r+0xb8>
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <__sflush_r+0x108>)
 8005f00:	40ca      	lsrs	r2, r1
 8005f02:	07d6      	lsls	r6, r2, #31
 8005f04:	d528      	bpl.n	8005f58 <__sflush_r+0xb8>
 8005f06:	2200      	movs	r2, #0
 8005f08:	6062      	str	r2, [r4, #4]
 8005f0a:	04d9      	lsls	r1, r3, #19
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	d504      	bpl.n	8005f1c <__sflush_r+0x7c>
 8005f12:	1c42      	adds	r2, r0, #1
 8005f14:	d101      	bne.n	8005f1a <__sflush_r+0x7a>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b903      	cbnz	r3, 8005f1c <__sflush_r+0x7c>
 8005f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1e:	602f      	str	r7, [r5, #0]
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d0ca      	beq.n	8005eba <__sflush_r+0x1a>
 8005f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	d002      	beq.n	8005f32 <__sflush_r+0x92>
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 f8fd 	bl	800612c <_free_r>
 8005f32:	2000      	movs	r0, #0
 8005f34:	6360      	str	r0, [r4, #52]	; 0x34
 8005f36:	e7c1      	b.n	8005ebc <__sflush_r+0x1c>
 8005f38:	6a21      	ldr	r1, [r4, #32]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b0      	blx	r6
 8005f40:	1c41      	adds	r1, r0, #1
 8005f42:	d1c7      	bne.n	8005ed4 <__sflush_r+0x34>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c4      	beq.n	8005ed4 <__sflush_r+0x34>
 8005f4a:	2b1d      	cmp	r3, #29
 8005f4c:	d001      	beq.n	8005f52 <__sflush_r+0xb2>
 8005f4e:	2b16      	cmp	r3, #22
 8005f50:	d101      	bne.n	8005f56 <__sflush_r+0xb6>
 8005f52:	602f      	str	r7, [r5, #0]
 8005f54:	e7b1      	b.n	8005eba <__sflush_r+0x1a>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7ad      	b.n	8005ebc <__sflush_r+0x1c>
 8005f60:	690f      	ldr	r7, [r1, #16]
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d0a9      	beq.n	8005eba <__sflush_r+0x1a>
 8005f66:	0793      	lsls	r3, r2, #30
 8005f68:	680e      	ldr	r6, [r1, #0]
 8005f6a:	bf08      	it	eq
 8005f6c:	694b      	ldreq	r3, [r1, #20]
 8005f6e:	600f      	str	r7, [r1, #0]
 8005f70:	bf18      	it	ne
 8005f72:	2300      	movne	r3, #0
 8005f74:	eba6 0807 	sub.w	r8, r6, r7
 8005f78:	608b      	str	r3, [r1, #8]
 8005f7a:	f1b8 0f00 	cmp.w	r8, #0
 8005f7e:	dd9c      	ble.n	8005eba <__sflush_r+0x1a>
 8005f80:	6a21      	ldr	r1, [r4, #32]
 8005f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f84:	4643      	mov	r3, r8
 8005f86:	463a      	mov	r2, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b0      	blx	r6
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	dc06      	bgt.n	8005f9e <__sflush_r+0xfe>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e78e      	b.n	8005ebc <__sflush_r+0x1c>
 8005f9e:	4407      	add	r7, r0
 8005fa0:	eba8 0800 	sub.w	r8, r8, r0
 8005fa4:	e7e9      	b.n	8005f7a <__sflush_r+0xda>
 8005fa6:	bf00      	nop
 8005fa8:	20400001 	.word	0x20400001

08005fac <_fflush_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b913      	cbnz	r3, 8005fbc <_fflush_r+0x10>
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	4628      	mov	r0, r5
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	b118      	cbz	r0, 8005fc6 <_fflush_r+0x1a>
 8005fbe:	6983      	ldr	r3, [r0, #24]
 8005fc0:	b90b      	cbnz	r3, 8005fc6 <_fflush_r+0x1a>
 8005fc2:	f7ff fa15 	bl	80053f0 <__sinit>
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <_fflush_r+0x6c>)
 8005fc8:	429c      	cmp	r4, r3
 8005fca:	d11b      	bne.n	8006004 <_fflush_r+0x58>
 8005fcc:	686c      	ldr	r4, [r5, #4]
 8005fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0ef      	beq.n	8005fb6 <_fflush_r+0xa>
 8005fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fd8:	07d0      	lsls	r0, r2, #31
 8005fda:	d404      	bmi.n	8005fe6 <_fflush_r+0x3a>
 8005fdc:	0599      	lsls	r1, r3, #22
 8005fde:	d402      	bmi.n	8005fe6 <_fflush_r+0x3a>
 8005fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe2:	f7ff faa3 	bl	800552c <__retarget_lock_acquire_recursive>
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	4621      	mov	r1, r4
 8005fea:	f7ff ff59 	bl	8005ea0 <__sflush_r>
 8005fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ff0:	07da      	lsls	r2, r3, #31
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	d4e0      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	059b      	lsls	r3, r3, #22
 8005ffa:	d4dd      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffe:	f7ff fa96 	bl	800552e <__retarget_lock_release_recursive>
 8006002:	e7d9      	b.n	8005fb8 <_fflush_r+0xc>
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <_fflush_r+0x70>)
 8006006:	429c      	cmp	r4, r3
 8006008:	d101      	bne.n	800600e <_fflush_r+0x62>
 800600a:	68ac      	ldr	r4, [r5, #8]
 800600c:	e7df      	b.n	8005fce <_fflush_r+0x22>
 800600e:	4b04      	ldr	r3, [pc, #16]	; (8006020 <_fflush_r+0x74>)
 8006010:	429c      	cmp	r4, r3
 8006012:	bf08      	it	eq
 8006014:	68ec      	ldreq	r4, [r5, #12]
 8006016:	e7da      	b.n	8005fce <_fflush_r+0x22>
 8006018:	080066b4 	.word	0x080066b4
 800601c:	080066d4 	.word	0x080066d4
 8006020:	08006694 	.word	0x08006694

08006024 <_lseek_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d07      	ldr	r5, [pc, #28]	; (8006044 <_lseek_r+0x20>)
 8006028:	4604      	mov	r4, r0
 800602a:	4608      	mov	r0, r1
 800602c:	4611      	mov	r1, r2
 800602e:	2200      	movs	r2, #0
 8006030:	602a      	str	r2, [r5, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f7fb fe58 	bl	8001ce8 <_lseek>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_lseek_r+0x1e>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_lseek_r+0x1e>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000220 	.word	0x20000220

08006048 <__swhatbuf_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	460e      	mov	r6, r1
 800604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006050:	2900      	cmp	r1, #0
 8006052:	b096      	sub	sp, #88	; 0x58
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	da08      	bge.n	800606c <__swhatbuf_r+0x24>
 800605a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	602a      	str	r2, [r5, #0]
 8006062:	061a      	lsls	r2, r3, #24
 8006064:	d410      	bmi.n	8006088 <__swhatbuf_r+0x40>
 8006066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800606a:	e00e      	b.n	800608a <__swhatbuf_r+0x42>
 800606c:	466a      	mov	r2, sp
 800606e:	f000 f8bb 	bl	80061e8 <_fstat_r>
 8006072:	2800      	cmp	r0, #0
 8006074:	dbf1      	blt.n	800605a <__swhatbuf_r+0x12>
 8006076:	9a01      	ldr	r2, [sp, #4]
 8006078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800607c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006080:	425a      	negs	r2, r3
 8006082:	415a      	adcs	r2, r3
 8006084:	602a      	str	r2, [r5, #0]
 8006086:	e7ee      	b.n	8006066 <__swhatbuf_r+0x1e>
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	2000      	movs	r0, #0
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	b016      	add	sp, #88	; 0x58
 8006090:	bd70      	pop	{r4, r5, r6, pc}
	...

08006094 <__smakebuf_r>:
 8006094:	898b      	ldrh	r3, [r1, #12]
 8006096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006098:	079d      	lsls	r5, r3, #30
 800609a:	4606      	mov	r6, r0
 800609c:	460c      	mov	r4, r1
 800609e:	d507      	bpl.n	80060b0 <__smakebuf_r+0x1c>
 80060a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	2301      	movs	r3, #1
 80060aa:	6163      	str	r3, [r4, #20]
 80060ac:	b002      	add	sp, #8
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	ab01      	add	r3, sp, #4
 80060b2:	466a      	mov	r2, sp
 80060b4:	f7ff ffc8 	bl	8006048 <__swhatbuf_r>
 80060b8:	9900      	ldr	r1, [sp, #0]
 80060ba:	4605      	mov	r5, r0
 80060bc:	4630      	mov	r0, r6
 80060be:	f7ff fa57 	bl	8005570 <_malloc_r>
 80060c2:	b948      	cbnz	r0, 80060d8 <__smakebuf_r+0x44>
 80060c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c8:	059a      	lsls	r2, r3, #22
 80060ca:	d4ef      	bmi.n	80060ac <__smakebuf_r+0x18>
 80060cc:	f023 0303 	bic.w	r3, r3, #3
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	e7e3      	b.n	80060a0 <__smakebuf_r+0xc>
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <__smakebuf_r+0x7c>)
 80060da:	62b3      	str	r3, [r6, #40]	; 0x28
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	6020      	str	r0, [r4, #0]
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	6163      	str	r3, [r4, #20]
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	6120      	str	r0, [r4, #16]
 80060ee:	b15b      	cbz	r3, 8006108 <__smakebuf_r+0x74>
 80060f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f4:	4630      	mov	r0, r6
 80060f6:	f000 f889 	bl	800620c <_isatty_r>
 80060fa:	b128      	cbz	r0, 8006108 <__smakebuf_r+0x74>
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	89a0      	ldrh	r0, [r4, #12]
 800610a:	4305      	orrs	r5, r0
 800610c:	81a5      	strh	r5, [r4, #12]
 800610e:	e7cd      	b.n	80060ac <__smakebuf_r+0x18>
 8006110:	08005389 	.word	0x08005389

08006114 <__malloc_lock>:
 8006114:	4801      	ldr	r0, [pc, #4]	; (800611c <__malloc_lock+0x8>)
 8006116:	f7ff ba09 	b.w	800552c <__retarget_lock_acquire_recursive>
 800611a:	bf00      	nop
 800611c:	20000214 	.word	0x20000214

08006120 <__malloc_unlock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_unlock+0x8>)
 8006122:	f7ff ba04 	b.w	800552e <__retarget_lock_release_recursive>
 8006126:	bf00      	nop
 8006128:	20000214 	.word	0x20000214

0800612c <_free_r>:
 800612c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800612e:	2900      	cmp	r1, #0
 8006130:	d044      	beq.n	80061bc <_free_r+0x90>
 8006132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006136:	9001      	str	r0, [sp, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f1a1 0404 	sub.w	r4, r1, #4
 800613e:	bfb8      	it	lt
 8006140:	18e4      	addlt	r4, r4, r3
 8006142:	f7ff ffe7 	bl	8006114 <__malloc_lock>
 8006146:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <_free_r+0x94>)
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	b933      	cbnz	r3, 800615c <_free_r+0x30>
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	6014      	str	r4, [r2, #0]
 8006152:	b003      	add	sp, #12
 8006154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006158:	f7ff bfe2 	b.w	8006120 <__malloc_unlock>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d908      	bls.n	8006172 <_free_r+0x46>
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	1961      	adds	r1, r4, r5
 8006164:	428b      	cmp	r3, r1
 8006166:	bf01      	itttt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	1949      	addeq	r1, r1, r5
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	e7ed      	b.n	800614e <_free_r+0x22>
 8006172:	461a      	mov	r2, r3
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b10b      	cbz	r3, 800617c <_free_r+0x50>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d9fa      	bls.n	8006172 <_free_r+0x46>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	1855      	adds	r5, r2, r1
 8006180:	42a5      	cmp	r5, r4
 8006182:	d10b      	bne.n	800619c <_free_r+0x70>
 8006184:	6824      	ldr	r4, [r4, #0]
 8006186:	4421      	add	r1, r4
 8006188:	1854      	adds	r4, r2, r1
 800618a:	42a3      	cmp	r3, r4
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	d1e0      	bne.n	8006152 <_free_r+0x26>
 8006190:	681c      	ldr	r4, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6053      	str	r3, [r2, #4]
 8006196:	4421      	add	r1, r4
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	e7da      	b.n	8006152 <_free_r+0x26>
 800619c:	d902      	bls.n	80061a4 <_free_r+0x78>
 800619e:	230c      	movs	r3, #12
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	e7d6      	b.n	8006152 <_free_r+0x26>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1961      	adds	r1, r4, r5
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf04      	itt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	bf04      	itt	eq
 80061b4:	1949      	addeq	r1, r1, r5
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	6054      	str	r4, [r2, #4]
 80061ba:	e7ca      	b.n	8006152 <_free_r+0x26>
 80061bc:	b003      	add	sp, #12
 80061be:	bd30      	pop	{r4, r5, pc}
 80061c0:	20000218 	.word	0x20000218

080061c4 <_read_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	; (80061e4 <_read_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fb fd28 	bl	8001c28 <_read>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_read_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_read_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20000220 	.word	0x20000220

080061e8 <_fstat_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	; (8006208 <_fstat_r+0x20>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	f7fb fd5c 	bl	8001cb2 <_fstat>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d102      	bne.n	8006204 <_fstat_r+0x1c>
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	b103      	cbz	r3, 8006204 <_fstat_r+0x1c>
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	bf00      	nop
 8006208:	20000220 	.word	0x20000220

0800620c <_isatty_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d06      	ldr	r5, [pc, #24]	; (8006228 <_isatty_r+0x1c>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fb fd5b 	bl	8001cd2 <_isatty>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_isatty_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_isatty_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000220 	.word	0x20000220
 800622c:	00000000 	.word	0x00000000

08006230 <exp>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	ed2d 8b02 	vpush	{d8}
 8006236:	ec55 4b10 	vmov	r4, r5, d0
 800623a:	f000 f841 	bl	80062c0 <__ieee754_exp>
 800623e:	eeb0 8a40 	vmov.f32	s16, s0
 8006242:	eef0 8a60 	vmov.f32	s17, s1
 8006246:	ec45 4b10 	vmov	d0, r4, r5
 800624a:	f000 f9eb 	bl	8006624 <finite>
 800624e:	b168      	cbz	r0, 800626c <exp+0x3c>
 8006250:	a317      	add	r3, pc, #92	; (adr r3, 80062b0 <exp+0x80>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800625e:	b160      	cbz	r0, 800627a <exp+0x4a>
 8006260:	f7ff f824 	bl	80052ac <__errno>
 8006264:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80062a0 <exp+0x70>
 8006268:	2322      	movs	r3, #34	; 0x22
 800626a:	6003      	str	r3, [r0, #0]
 800626c:	eeb0 0a48 	vmov.f32	s0, s16
 8006270:	eef0 0a68 	vmov.f32	s1, s17
 8006274:	ecbd 8b02 	vpop	{d8}
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	a30f      	add	r3, pc, #60	; (adr r3, 80062b8 <exp+0x88>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa fc2a 	bl	8000adc <__aeabi_dcmplt>
 8006288:	2800      	cmp	r0, #0
 800628a:	d0ef      	beq.n	800626c <exp+0x3c>
 800628c:	f7ff f80e 	bl	80052ac <__errno>
 8006290:	2322      	movs	r3, #34	; 0x22
 8006292:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80062a8 <exp+0x78>
 8006296:	6003      	str	r3, [r0, #0]
 8006298:	e7e8      	b.n	800626c <exp+0x3c>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	00000000 	.word	0x00000000
 80062a4:	7ff00000 	.word	0x7ff00000
	...
 80062b0:	fefa39ef 	.word	0xfefa39ef
 80062b4:	40862e42 	.word	0x40862e42
 80062b8:	d52d3051 	.word	0xd52d3051
 80062bc:	c0874910 	.word	0xc0874910

080062c0 <__ieee754_exp>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	ec55 4b10 	vmov	r4, r5, d0
 80062c8:	49b5      	ldr	r1, [pc, #724]	; (80065a0 <__ieee754_exp+0x2e0>)
 80062ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062ce:	428b      	cmp	r3, r1
 80062d0:	ed2d 8b04 	vpush	{d8-d9}
 80062d4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80062d8:	d93d      	bls.n	8006356 <__ieee754_exp+0x96>
 80062da:	49b2      	ldr	r1, [pc, #712]	; (80065a4 <__ieee754_exp+0x2e4>)
 80062dc:	428b      	cmp	r3, r1
 80062de:	d918      	bls.n	8006312 <__ieee754_exp+0x52>
 80062e0:	ee10 3a10 	vmov	r3, s0
 80062e4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d009      	beq.n	8006300 <__ieee754_exp+0x40>
 80062ec:	ee10 2a10 	vmov	r2, s0
 80062f0:	462b      	mov	r3, r5
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7f9 ffc9 	bl	800028c <__adddf3>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	e002      	b.n	8006306 <__ieee754_exp+0x46>
 8006300:	b10e      	cbz	r6, 8006306 <__ieee754_exp+0x46>
 8006302:	2400      	movs	r4, #0
 8006304:	2500      	movs	r5, #0
 8006306:	ecbd 8b04 	vpop	{d8-d9}
 800630a:	ec45 4b10 	vmov	d0, r4, r5
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	a38d      	add	r3, pc, #564	; (adr r3, 8006548 <__ieee754_exp+0x288>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	ee10 0a10 	vmov	r0, s0
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8006322:	4607      	mov	r7, r0
 8006324:	b130      	cbz	r0, 8006334 <__ieee754_exp+0x74>
 8006326:	ecbd 8b04 	vpop	{d8-d9}
 800632a:	2000      	movs	r0, #0
 800632c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	f000 b96f 	b.w	8006612 <__math_oflow>
 8006334:	a386      	add	r3, pc, #536	; (adr r3, 8006550 <__ieee754_exp+0x290>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	4620      	mov	r0, r4
 800633c:	4629      	mov	r1, r5
 800633e:	f7fa fbcd 	bl	8000adc <__aeabi_dcmplt>
 8006342:	2800      	cmp	r0, #0
 8006344:	f000 808b 	beq.w	800645e <__ieee754_exp+0x19e>
 8006348:	ecbd 8b04 	vpop	{d8-d9}
 800634c:	4638      	mov	r0, r7
 800634e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006352:	f000 b955 	b.w	8006600 <__math_uflow>
 8006356:	4a94      	ldr	r2, [pc, #592]	; (80065a8 <__ieee754_exp+0x2e8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	f240 80ac 	bls.w	80064b6 <__ieee754_exp+0x1f6>
 800635e:	4a93      	ldr	r2, [pc, #588]	; (80065ac <__ieee754_exp+0x2ec>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d87c      	bhi.n	800645e <__ieee754_exp+0x19e>
 8006364:	4b92      	ldr	r3, [pc, #584]	; (80065b0 <__ieee754_exp+0x2f0>)
 8006366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	ee10 0a10 	vmov	r0, s0
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 ff88 	bl	8000288 <__aeabi_dsub>
 8006378:	4b8e      	ldr	r3, [pc, #568]	; (80065b4 <__ieee754_exp+0x2f4>)
 800637a:	00f7      	lsls	r7, r6, #3
 800637c:	443b      	add	r3, r7
 800637e:	ed93 7b00 	vldr	d7, [r3]
 8006382:	f1c6 0a01 	rsb	sl, r6, #1
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	ebaa 0a06 	sub.w	sl, sl, r6
 800638e:	eeb0 8a47 	vmov.f32	s16, s14
 8006392:	eef0 8a67 	vmov.f32	s17, s15
 8006396:	ec53 2b18 	vmov	r2, r3, d8
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7f9 ff73 	bl	8000288 <__aeabi_dsub>
 80063a2:	4604      	mov	r4, r0
 80063a4:	460d      	mov	r5, r1
 80063a6:	4622      	mov	r2, r4
 80063a8:	462b      	mov	r3, r5
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f923 	bl	80005f8 <__aeabi_dmul>
 80063b2:	a369      	add	r3, pc, #420	; (adr r3, 8006558 <__ieee754_exp+0x298>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	4606      	mov	r6, r0
 80063ba:	460f      	mov	r7, r1
 80063bc:	f7fa f91c 	bl	80005f8 <__aeabi_dmul>
 80063c0:	a367      	add	r3, pc, #412	; (adr r3, 8006560 <__ieee754_exp+0x2a0>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 ff5f 	bl	8000288 <__aeabi_dsub>
 80063ca:	4632      	mov	r2, r6
 80063cc:	463b      	mov	r3, r7
 80063ce:	f7fa f913 	bl	80005f8 <__aeabi_dmul>
 80063d2:	a365      	add	r3, pc, #404	; (adr r3, 8006568 <__ieee754_exp+0x2a8>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7f9 ff58 	bl	800028c <__adddf3>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	a362      	add	r3, pc, #392	; (adr r3, 8006570 <__ieee754_exp+0x2b0>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 ff4d 	bl	8000288 <__aeabi_dsub>
 80063ee:	4632      	mov	r2, r6
 80063f0:	463b      	mov	r3, r7
 80063f2:	f7fa f901 	bl	80005f8 <__aeabi_dmul>
 80063f6:	a360      	add	r3, pc, #384	; (adr r3, 8006578 <__ieee754_exp+0x2b8>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 ff46 	bl	800028c <__adddf3>
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	f7fa f8f8 	bl	80005f8 <__aeabi_dmul>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4620      	mov	r0, r4
 800640e:	4629      	mov	r1, r5
 8006410:	f7f9 ff3a 	bl	8000288 <__aeabi_dsub>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4606      	mov	r6, r0
 800641a:	460f      	mov	r7, r1
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7fa f8ea 	bl	80005f8 <__aeabi_dmul>
 8006424:	ec41 0b19 	vmov	d9, r0, r1
 8006428:	f1ba 0f00 	cmp.w	sl, #0
 800642c:	d15d      	bne.n	80064ea <__ieee754_exp+0x22a>
 800642e:	2200      	movs	r2, #0
 8006430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f7f9 ff26 	bl	8000288 <__aeabi_dsub>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	ec51 0b19 	vmov	r0, r1, d9
 8006444:	f7fa fa02 	bl	800084c <__aeabi_ddiv>
 8006448:	4622      	mov	r2, r4
 800644a:	462b      	mov	r3, r5
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	2000      	movs	r0, #0
 8006456:	4958      	ldr	r1, [pc, #352]	; (80065b8 <__ieee754_exp+0x2f8>)
 8006458:	f7f9 ff16 	bl	8000288 <__aeabi_dsub>
 800645c:	e74d      	b.n	80062fa <__ieee754_exp+0x3a>
 800645e:	4857      	ldr	r0, [pc, #348]	; (80065bc <__ieee754_exp+0x2fc>)
 8006460:	a347      	add	r3, pc, #284	; (adr r3, 8006580 <__ieee754_exp+0x2c0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800646a:	4629      	mov	r1, r5
 800646c:	4620      	mov	r0, r4
 800646e:	f7fa f8c3 	bl	80005f8 <__aeabi_dmul>
 8006472:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006476:	f7f9 ff09 	bl	800028c <__adddf3>
 800647a:	f7fa fb57 	bl	8000b2c <__aeabi_d2iz>
 800647e:	4682      	mov	sl, r0
 8006480:	f7fa f850 	bl	8000524 <__aeabi_i2d>
 8006484:	a340      	add	r3, pc, #256	; (adr r3, 8006588 <__ieee754_exp+0x2c8>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	4606      	mov	r6, r0
 800648c:	460f      	mov	r7, r1
 800648e:	f7fa f8b3 	bl	80005f8 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 fef5 	bl	8000288 <__aeabi_dsub>
 800649e:	a33c      	add	r3, pc, #240	; (adr r3, 8006590 <__ieee754_exp+0x2d0>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	4680      	mov	r8, r0
 80064a6:	4689      	mov	r9, r1
 80064a8:	4630      	mov	r0, r6
 80064aa:	4639      	mov	r1, r7
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	ec41 0b18 	vmov	d8, r0, r1
 80064b4:	e76f      	b.n	8006396 <__ieee754_exp+0xd6>
 80064b6:	4a42      	ldr	r2, [pc, #264]	; (80065c0 <__ieee754_exp+0x300>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d811      	bhi.n	80064e0 <__ieee754_exp+0x220>
 80064bc:	a336      	add	r3, pc, #216	; (adr r3, 8006598 <__ieee754_exp+0x2d8>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	ee10 0a10 	vmov	r0, s0
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7f9 fee0 	bl	800028c <__adddf3>
 80064cc:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <__ieee754_exp+0x2f8>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	f7fa fb22 	bl	8000b18 <__aeabi_dcmpgt>
 80064d4:	b138      	cbz	r0, 80064e6 <__ieee754_exp+0x226>
 80064d6:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <__ieee754_exp+0x2f8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	e70a      	b.n	80062f6 <__ieee754_exp+0x36>
 80064e0:	f04f 0a00 	mov.w	sl, #0
 80064e4:	e75f      	b.n	80063a6 <__ieee754_exp+0xe6>
 80064e6:	4682      	mov	sl, r0
 80064e8:	e75d      	b.n	80063a6 <__ieee754_exp+0xe6>
 80064ea:	4632      	mov	r2, r6
 80064ec:	463b      	mov	r3, r7
 80064ee:	2000      	movs	r0, #0
 80064f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064f4:	f7f9 fec8 	bl	8000288 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	ec51 0b19 	vmov	r0, r1, d9
 8006500:	f7fa f9a4 	bl	800084c <__aeabi_ddiv>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	ec51 0b18 	vmov	r0, r1, d8
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	f7f9 feb8 	bl	8000288 <__aeabi_dsub>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	2000      	movs	r0, #0
 800651e:	4926      	ldr	r1, [pc, #152]	; (80065b8 <__ieee754_exp+0x2f8>)
 8006520:	f7f9 feb2 	bl	8000288 <__aeabi_dsub>
 8006524:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006528:	4592      	cmp	sl, r2
 800652a:	db02      	blt.n	8006532 <__ieee754_exp+0x272>
 800652c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006530:	e6e3      	b.n	80062fa <__ieee754_exp+0x3a>
 8006532:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8006536:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800653a:	2200      	movs	r2, #0
 800653c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8006540:	f7fa f85a 	bl	80005f8 <__aeabi_dmul>
 8006544:	e6d9      	b.n	80062fa <__ieee754_exp+0x3a>
 8006546:	bf00      	nop
 8006548:	fefa39ef 	.word	0xfefa39ef
 800654c:	40862e42 	.word	0x40862e42
 8006550:	d52d3051 	.word	0xd52d3051
 8006554:	c0874910 	.word	0xc0874910
 8006558:	72bea4d0 	.word	0x72bea4d0
 800655c:	3e663769 	.word	0x3e663769
 8006560:	c5d26bf1 	.word	0xc5d26bf1
 8006564:	3ebbbd41 	.word	0x3ebbbd41
 8006568:	af25de2c 	.word	0xaf25de2c
 800656c:	3f11566a 	.word	0x3f11566a
 8006570:	16bebd93 	.word	0x16bebd93
 8006574:	3f66c16c 	.word	0x3f66c16c
 8006578:	5555553e 	.word	0x5555553e
 800657c:	3fc55555 	.word	0x3fc55555
 8006580:	652b82fe 	.word	0x652b82fe
 8006584:	3ff71547 	.word	0x3ff71547
 8006588:	fee00000 	.word	0xfee00000
 800658c:	3fe62e42 	.word	0x3fe62e42
 8006590:	35793c76 	.word	0x35793c76
 8006594:	3dea39ef 	.word	0x3dea39ef
 8006598:	8800759c 	.word	0x8800759c
 800659c:	7e37e43c 	.word	0x7e37e43c
 80065a0:	40862e41 	.word	0x40862e41
 80065a4:	7fefffff 	.word	0x7fefffff
 80065a8:	3fd62e42 	.word	0x3fd62e42
 80065ac:	3ff0a2b1 	.word	0x3ff0a2b1
 80065b0:	08006738 	.word	0x08006738
 80065b4:	08006748 	.word	0x08006748
 80065b8:	3ff00000 	.word	0x3ff00000
 80065bc:	08006728 	.word	0x08006728
 80065c0:	3defffff 	.word	0x3defffff

080065c4 <with_errno>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	4616      	mov	r6, r2
 80065cc:	f7fe fe6e 	bl	80052ac <__errno>
 80065d0:	4629      	mov	r1, r5
 80065d2:	6006      	str	r6, [r0, #0]
 80065d4:	4620      	mov	r0, r4
 80065d6:	bd70      	pop	{r4, r5, r6, pc}

080065d8 <xflow>:
 80065d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065da:	4614      	mov	r4, r2
 80065dc:	461d      	mov	r5, r3
 80065de:	b108      	cbz	r0, 80065e4 <xflow+0xc>
 80065e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	e9cd 2300 	strd	r2, r3, [sp]
 80065e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	2222      	movs	r2, #34	; 0x22
 80065f6:	b003      	add	sp, #12
 80065f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065fc:	f7ff bfe2 	b.w	80065c4 <with_errno>

08006600 <__math_uflow>:
 8006600:	b508      	push	{r3, lr}
 8006602:	2200      	movs	r2, #0
 8006604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006608:	f7ff ffe6 	bl	80065d8 <xflow>
 800660c:	ec41 0b10 	vmov	d0, r0, r1
 8006610:	bd08      	pop	{r3, pc}

08006612 <__math_oflow>:
 8006612:	b508      	push	{r3, lr}
 8006614:	2200      	movs	r2, #0
 8006616:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800661a:	f7ff ffdd 	bl	80065d8 <xflow>
 800661e:	ec41 0b10 	vmov	d0, r0, r1
 8006622:	bd08      	pop	{r3, pc}

08006624 <finite>:
 8006624:	b082      	sub	sp, #8
 8006626:	ed8d 0b00 	vstr	d0, [sp]
 800662a:	9801      	ldr	r0, [sp, #4]
 800662c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006630:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006634:	0fc0      	lsrs	r0, r0, #31
 8006636:	b002      	add	sp, #8
 8006638:	4770      	bx	lr
	...

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
